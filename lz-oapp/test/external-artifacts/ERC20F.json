{
	"abi": [
		{ "type": "constructor", "inputs": [], "stateMutability": "nonpayable" },
		{
			"type": "function",
			"name": "BURNER_ROLE",
			"inputs": [],
			"outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "CONTRACT_ADMIN_ROLE",
			"inputs": [],
			"outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "DEFAULT_ADMIN_ROLE",
			"inputs": [],
			"outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "DOMAIN_SEPARATOR",
			"inputs": [],
			"outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "MINTER_ROLE",
			"inputs": [],
			"outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "PAUSER_ROLE",
			"inputs": [],
			"outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "RECOVERY_ROLE",
			"inputs": [],
			"outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "SALVAGE_ROLE",
			"inputs": [],
			"outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "UPGRADER_ROLE",
			"inputs": [],
			"outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "accessRegistry",
			"inputs": [],
			"outputs": [{ "name": "", "type": "address", "internalType": "contract IAccessRegistry" }],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "accessRegistryUpdate",
			"inputs": [{ "name": "_accessRegistry", "type": "address", "internalType": "address" }],
			"outputs": [],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "allowance",
			"inputs": [
				{ "name": "owner", "type": "address", "internalType": "address" },
				{ "name": "spender", "type": "address", "internalType": "address" }
			],
			"outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "approve",
			"inputs": [
				{ "name": "spender", "type": "address", "internalType": "address" },
				{ "name": "amount", "type": "uint256", "internalType": "uint256" }
			],
			"outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "balanceOf",
			"inputs": [{ "name": "account", "type": "address", "internalType": "address" }],
			"outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "burn",
			"inputs": [{ "name": "amount", "type": "uint256", "internalType": "uint256" }],
			"outputs": [],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "contractUri",
			"inputs": [],
			"outputs": [{ "name": "", "type": "string", "internalType": "string" }],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "contractUriUpdate",
			"inputs": [{ "name": "_uri", "type": "string", "internalType": "string" }],
			"outputs": [],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "decimals",
			"inputs": [],
			"outputs": [{ "name": "", "type": "uint8", "internalType": "uint8" }],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "decreaseAllowance",
			"inputs": [
				{ "name": "spender", "type": "address", "internalType": "address" },
				{ "name": "subtractedValue", "type": "uint256", "internalType": "uint256" }
			],
			"outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "eip712Domain",
			"inputs": [],
			"outputs": [
				{ "name": "fields", "type": "bytes1", "internalType": "bytes1" },
				{ "name": "name", "type": "string", "internalType": "string" },
				{ "name": "version", "type": "string", "internalType": "string" },
				{ "name": "chainId", "type": "uint256", "internalType": "uint256" },
				{ "name": "verifyingContract", "type": "address", "internalType": "address" },
				{ "name": "salt", "type": "bytes32", "internalType": "bytes32" },
				{ "name": "extensions", "type": "uint256[]", "internalType": "uint256[]" }
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "getRoleAdmin",
			"inputs": [{ "name": "role", "type": "bytes32", "internalType": "bytes32" }],
			"outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "grantRole",
			"inputs": [
				{ "name": "role", "type": "bytes32", "internalType": "bytes32" },
				{ "name": "account", "type": "address", "internalType": "address" }
			],
			"outputs": [],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "hasRole",
			"inputs": [
				{ "name": "role", "type": "bytes32", "internalType": "bytes32" },
				{ "name": "account", "type": "address", "internalType": "address" }
			],
			"outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "increaseAllowance",
			"inputs": [
				{ "name": "spender", "type": "address", "internalType": "address" },
				{ "name": "addedValue", "type": "uint256", "internalType": "uint256" }
			],
			"outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "initialize",
			"inputs": [
				{ "name": "_name", "type": "string", "internalType": "string" },
				{ "name": "_symbol", "type": "string", "internalType": "string" },
				{ "name": "defaultAdmin", "type": "address", "internalType": "address" },
				{ "name": "minter", "type": "address", "internalType": "address" },
				{ "name": "pauser", "type": "address", "internalType": "address" }
			],
			"outputs": [],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "mint",
			"inputs": [
				{ "name": "to", "type": "address", "internalType": "address" },
				{ "name": "amount", "type": "uint256", "internalType": "uint256" }
			],
			"outputs": [],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "multicall",
			"inputs": [{ "name": "data", "type": "bytes[]", "internalType": "bytes[]" }],
			"outputs": [{ "name": "results", "type": "bytes[]", "internalType": "bytes[]" }],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "name",
			"inputs": [],
			"outputs": [{ "name": "", "type": "string", "internalType": "string" }],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "nonces",
			"inputs": [{ "name": "owner", "type": "address", "internalType": "address" }],
			"outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
			"stateMutability": "view"
		},
		{ "type": "function", "name": "pause", "inputs": [], "outputs": [], "stateMutability": "nonpayable" },
		{
			"type": "function",
			"name": "paused",
			"inputs": [],
			"outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "permit",
			"inputs": [
				{ "name": "owner", "type": "address", "internalType": "address" },
				{ "name": "spender", "type": "address", "internalType": "address" },
				{ "name": "value", "type": "uint256", "internalType": "uint256" },
				{ "name": "deadline", "type": "uint256", "internalType": "uint256" },
				{ "name": "v", "type": "uint8", "internalType": "uint8" },
				{ "name": "r", "type": "bytes32", "internalType": "bytes32" },
				{ "name": "s", "type": "bytes32", "internalType": "bytes32" }
			],
			"outputs": [],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "proxiableUUID",
			"inputs": [],
			"outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "recoverTokens",
			"inputs": [
				{ "name": "account", "type": "address", "internalType": "address" },
				{ "name": "amount", "type": "uint256", "internalType": "uint256" }
			],
			"outputs": [],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "renounceRole",
			"inputs": [
				{ "name": "role", "type": "bytes32", "internalType": "bytes32" },
				{ "name": "account", "type": "address", "internalType": "address" }
			],
			"outputs": [],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "revokeRole",
			"inputs": [
				{ "name": "role", "type": "bytes32", "internalType": "bytes32" },
				{ "name": "account", "type": "address", "internalType": "address" }
			],
			"outputs": [],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "salvageERC20",
			"inputs": [
				{ "name": "token", "type": "address", "internalType": "contract IERC20Upgradeable" },
				{ "name": "amount", "type": "uint256", "internalType": "uint256" }
			],
			"outputs": [],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "salvageGas",
			"inputs": [{ "name": "amount", "type": "uint256", "internalType": "uint256" }],
			"outputs": [],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "supportsInterface",
			"inputs": [{ "name": "interfaceId", "type": "bytes4", "internalType": "bytes4" }],
			"outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "symbol",
			"inputs": [],
			"outputs": [{ "name": "", "type": "string", "internalType": "string" }],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "totalSupply",
			"inputs": [],
			"outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "transfer",
			"inputs": [
				{ "name": "to", "type": "address", "internalType": "address" },
				{ "name": "amount", "type": "uint256", "internalType": "uint256" }
			],
			"outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "transferFrom",
			"inputs": [
				{ "name": "from", "type": "address", "internalType": "address" },
				{ "name": "to", "type": "address", "internalType": "address" },
				{ "name": "amount", "type": "uint256", "internalType": "uint256" }
			],
			"outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
			"stateMutability": "nonpayable"
		},
		{ "type": "function", "name": "unpause", "inputs": [], "outputs": [], "stateMutability": "nonpayable" },
		{
			"type": "function",
			"name": "upgradeTo",
			"inputs": [{ "name": "newImplementation", "type": "address", "internalType": "address" }],
			"outputs": [],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "upgradeToAndCall",
			"inputs": [
				{ "name": "newImplementation", "type": "address", "internalType": "address" },
				{ "name": "data", "type": "bytes", "internalType": "bytes" }
			],
			"outputs": [],
			"stateMutability": "payable"
		},
		{
			"type": "function",
			"name": "version",
			"inputs": [],
			"outputs": [{ "name": "", "type": "uint64", "internalType": "uint64" }],
			"stateMutability": "view"
		},
		{
			"type": "event",
			"name": "AccessRegistryUpdated",
			"inputs": [
				{ "name": "caller", "type": "address", "indexed": true, "internalType": "address" },
				{ "name": "oldAccessRegistry", "type": "address", "indexed": true, "internalType": "address" },
				{ "name": "newAccessRegistry", "type": "address", "indexed": true, "internalType": "address" }
			],
			"anonymous": false
		},
		{
			"type": "event",
			"name": "AdminChanged",
			"inputs": [
				{ "name": "previousAdmin", "type": "address", "indexed": false, "internalType": "address" },
				{ "name": "newAdmin", "type": "address", "indexed": false, "internalType": "address" }
			],
			"anonymous": false
		},
		{
			"type": "event",
			"name": "Approval",
			"inputs": [
				{ "name": "owner", "type": "address", "indexed": true, "internalType": "address" },
				{ "name": "spender", "type": "address", "indexed": true, "internalType": "address" },
				{ "name": "value", "type": "uint256", "indexed": false, "internalType": "uint256" }
			],
			"anonymous": false
		},
		{
			"type": "event",
			"name": "BeaconUpgraded",
			"inputs": [{ "name": "beacon", "type": "address", "indexed": true, "internalType": "address" }],
			"anonymous": false
		},
		{
			"type": "event",
			"name": "ContractUriUpdated",
			"inputs": [
				{ "name": "caller", "type": "address", "indexed": true, "internalType": "address" },
				{ "name": "oldUri", "type": "string", "indexed": false, "internalType": "string" },
				{ "name": "newUri", "type": "string", "indexed": false, "internalType": "string" }
			],
			"anonymous": false
		},
		{ "type": "event", "name": "EIP712DomainChanged", "inputs": [], "anonymous": false },
		{
			"type": "event",
			"name": "GasTokenSalvaged",
			"inputs": [
				{ "name": "caller", "type": "address", "indexed": true, "internalType": "address" },
				{ "name": "amount", "type": "uint256", "indexed": true, "internalType": "uint256" }
			],
			"anonymous": false
		},
		{
			"type": "event",
			"name": "Initialized",
			"inputs": [{ "name": "version", "type": "uint8", "indexed": false, "internalType": "uint8" }],
			"anonymous": false
		},
		{
			"type": "event",
			"name": "Paused",
			"inputs": [{ "name": "account", "type": "address", "indexed": false, "internalType": "address" }],
			"anonymous": false
		},
		{
			"type": "event",
			"name": "RoleAdminChanged",
			"inputs": [
				{ "name": "role", "type": "bytes32", "indexed": true, "internalType": "bytes32" },
				{ "name": "previousAdminRole", "type": "bytes32", "indexed": true, "internalType": "bytes32" },
				{ "name": "newAdminRole", "type": "bytes32", "indexed": true, "internalType": "bytes32" }
			],
			"anonymous": false
		},
		{
			"type": "event",
			"name": "RoleGranted",
			"inputs": [
				{ "name": "role", "type": "bytes32", "indexed": true, "internalType": "bytes32" },
				{ "name": "account", "type": "address", "indexed": true, "internalType": "address" },
				{ "name": "sender", "type": "address", "indexed": true, "internalType": "address" }
			],
			"anonymous": false
		},
		{
			"type": "event",
			"name": "RoleRevoked",
			"inputs": [
				{ "name": "role", "type": "bytes32", "indexed": true, "internalType": "bytes32" },
				{ "name": "account", "type": "address", "indexed": true, "internalType": "address" },
				{ "name": "sender", "type": "address", "indexed": true, "internalType": "address" }
			],
			"anonymous": false
		},
		{
			"type": "event",
			"name": "TokenSalvaged",
			"inputs": [
				{ "name": "caller", "type": "address", "indexed": true, "internalType": "address" },
				{ "name": "token", "type": "address", "indexed": true, "internalType": "address" },
				{ "name": "amount", "type": "uint256", "indexed": true, "internalType": "uint256" }
			],
			"anonymous": false
		},
		{
			"type": "event",
			"name": "TokensRecovered",
			"inputs": [
				{ "name": "caller", "type": "address", "indexed": true, "internalType": "address" },
				{ "name": "account", "type": "address", "indexed": true, "internalType": "address" },
				{ "name": "amount", "type": "uint256", "indexed": false, "internalType": "uint256" }
			],
			"anonymous": false
		},
		{
			"type": "event",
			"name": "Transfer",
			"inputs": [
				{ "name": "from", "type": "address", "indexed": true, "internalType": "address" },
				{ "name": "to", "type": "address", "indexed": true, "internalType": "address" },
				{ "name": "value", "type": "uint256", "indexed": false, "internalType": "uint256" }
			],
			"anonymous": false
		},
		{
			"type": "event",
			"name": "Unpaused",
			"inputs": [{ "name": "account", "type": "address", "indexed": false, "internalType": "address" }],
			"anonymous": false
		},
		{
			"type": "event",
			"name": "Upgraded",
			"inputs": [{ "name": "implementation", "type": "address", "indexed": true, "internalType": "address" }],
			"anonymous": false
		},
		{ "type": "error", "name": "AccessRegistryNotSet", "inputs": [] },
		{ "type": "error", "name": "DefaultAdminError", "inputs": [] },
		{
			"type": "error",
			"name": "ERC20InsufficientAllowance",
			"inputs": [
				{ "name": "spender", "type": "address", "internalType": "address" },
				{ "name": "allowance", "type": "uint256", "internalType": "uint256" },
				{ "name": "needed", "type": "uint256", "internalType": "uint256" }
			]
		},
		{
			"type": "error",
			"name": "ERC20InsufficientBalance",
			"inputs": [
				{ "name": "sender", "type": "address", "internalType": "address" },
				{ "name": "balance", "type": "uint256", "internalType": "uint256" },
				{ "name": "needed", "type": "uint256", "internalType": "uint256" }
			]
		},
		{
			"type": "error",
			"name": "ERC20InvalidApprover",
			"inputs": [{ "name": "approver", "type": "address", "internalType": "address" }]
		},
		{
			"type": "error",
			"name": "ERC20InvalidReceiver",
			"inputs": [{ "name": "receiver", "type": "address", "internalType": "address" }]
		},
		{
			"type": "error",
			"name": "ERC20InvalidSender",
			"inputs": [{ "name": "sender", "type": "address", "internalType": "address" }]
		},
		{
			"type": "error",
			"name": "ERC20InvalidSpender",
			"inputs": [{ "name": "spender", "type": "address", "internalType": "address" }]
		},
		{ "type": "error", "name": "InvalidAddress", "inputs": [] },
		{ "type": "error", "name": "InvalidImplementation", "inputs": [] },
		{
			"type": "error",
			"name": "RecoveryOnActiveAccount",
			"inputs": [{ "name": "account", "type": "address", "internalType": "address" }]
		},
		{ "type": "error", "name": "SalvageGasFailed", "inputs": [] },
		{ "type": "error", "name": "ZeroAmount", "inputs": [] }
	],
	"bytecode": {
		"object": "0x60a06040523060805234801562000014575f80fd5b506200001f62000025565b620000e3565b5f54610100900460ff1615620000915760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b5f5460ff90811614620000e1575f805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051613c1b620001185f395f8181610c1901528181610c5901528181610db601528181610df60152610e830152613c1b5ff3fe608060405260043610610280575f3560e01c80635c975abb11610155578063a9059cbb116100be578063d547741f11610078578063d547741f146107cd578063db0ed6a0146107ec578063dd62ed3e1461080b578063e63ab1e91461082a578063e6f29b051461085d578063f72c0d8b14610894575f80fd5b8063a9059cbb146106fd578063ac9650d81461071c578063c0e24d5e14610748578063c3d00d4e1461075c578063d505accf1461077b578063d53913931461079a575f80fd5b806384b0196e1161010f57806384b0196e1461063e57806388920d291461066557806391d148541461069857806395d89b41146106b7578063a217fddf146106cb578063a457c2d7146106de575f80fd5b80635c975abb146105815780636e1d21b01461059957806370a08231146105b85780637ecebe00146105ec5780637ffc5a5c1461060b5780638456cb591461062a575f80fd5b8063313ce567116101f75780633f4ba83a116101b15780633f4ba83a146104e857806340c10f19146104fc57806342966c681461051b5780634f1ef2861461053a57806352d1902d1461054d57806354fd4d5014610561575f80fd5b8063313ce5671461042957806331993a1c146104445780633644e5151461047757806336568abe1461048b5780633659cfe6146104aa57806339509351146104c9575f80fd5b80631da03312116102485780631da033121461033757806323b872dd1461036a578063248a9ca314610389578063282c51f3146103b85780632e13ae6e146103eb5780632f2ff15d1461040a575f80fd5b806301ffc9a714610284578063069c9fae146102b857806306fdde03146102d9578063095ea7b3146102fa57806318160ddd14610319575b5f80fd5b34801561028f575f80fd5b506102a361029e3660046131a7565b6108c7565b60405190151581526020015b60405180910390f35b3480156102c3575f80fd5b506102d76102d23660046131e2565b610970565b005b3480156102e4575f80fd5b506102ed610ad4565b6040516102af9190613259565b348015610305575f80fd5b506102a36103143660046131e2565b610b64565b348015610324575f80fd5b506035545b6040519081526020016102af565b348015610342575f80fd5b506103297f2ce8d04a9c35987429af538825cd2438cc5c5bb5dc427955f84daaa3ea10501681565b348015610375575f80fd5b506102a361038436600461326b565b610b7e565b348015610394575f80fd5b506103296103a33660046132a9565b5f90815261022a602052604090206001015490565b3480156103c3575f80fd5b506103297f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84881565b3480156103f6575f80fd5b506102d76104053660046132c0565b610ba7565b348015610415575f80fd5b506102d76104243660046132db565b610bbb565b348015610434575f80fd5b50604051601281526020016102af565b34801561044f575f80fd5b506103297f0acf805600123ef007091da3b3ffb39474074c656c127aa68cb0ffec232a8ff881565b348015610482575f80fd5b50610329610bd1565b348015610496575f80fd5b506102d76104a53660046132db565b610bdf565b3480156104b5575f80fd5b506102d76104c43660046132c0565b610c0f565b3480156104d4575f80fd5b506102a36104e33660046131e2565b610ce9565b3480156104f3575f80fd5b506102d7610cfc565b348015610507575f80fd5b506102d76105163660046131e2565b610d0e565b348015610526575f80fd5b506102d76105353660046132a9565b610d4c565b6102d761054836600461331d565b610dac565b348015610558575f80fd5b50610329610e77565b34801561056c575f80fd5b505f5460405160ff90911681526020016102af565b34801561058c575f80fd5b506101945460ff166102a3565b3480156105a4575f80fd5b506102d76105b33660046132a9565b610f28565b3480156105c3575f80fd5b506103296105d23660046132c0565b6001600160a01b03165f9081526033602052604090205490565b3480156105f7575f80fd5b506103296106063660046132c0565b610fe2565b348015610616575f80fd5b506102d7610625366004613420565b610fff565b348015610635575f80fd5b506102d7611045565b348015610649575f80fd5b50610652611055565b6040516102af979695949392919061345f565b348015610670575f80fd5b506103297f75afe8d9fedb4699bf07dc7bcb33fe609a84a99adfab7076931f0d93228085bb81565b3480156106a3575f80fd5b506102a36106b23660046132db565b6110ee565b3480156106c2575f80fd5b506102ed611119565b3480156106d6575f80fd5b506103295f81565b3480156106e9575f80fd5b506102a36106f83660046131e2565b611128565b348015610708575f80fd5b506102a36107173660046131e2565b61113b565b348015610727575f80fd5b5061073b6107363660046134f3565b611159565b6040516102af9190613562565b348015610753575f80fd5b506102ed61124c565b348015610767575f80fd5b506102d76107763660046131e2565b6112d9565b348015610786575f80fd5b506102d76107953660046135c2565b61134c565b3480156107a5575f80fd5b506103297f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b3480156107d8575f80fd5b506102d76107e73660046132db565b61136c565b3480156107f7575f80fd5b506102d7610806366004613633565b6113b2565b348015610816575f80fd5b506103296108253660046136d5565b61165e565b348015610835575f80fd5b506103297f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b348015610868575f80fd5b5060cc5461087c906001600160a01b031681565b6040516001600160a01b0390911681526020016102af565b34801561089f575f80fd5b506103297f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b5f6001600160e01b031982166336372b0760e01b14806108f757506001600160e01b0319821663a219a02560e01b145b8061090a57506001600160e01b03198216155b8061092557506001600160e01b031982166352d1902d60e01b145b8061094057506001600160e01b03198216634ec7fbed60e11b145b8061095b57506001600160e01b031982166342580cb760e11b145b8061096a575061096a82611688565b92915050565b7f0acf805600123ef007091da3b3ffb39474074c656c127aa68cb0ffec232a8ff861099a816116bc565b815f036109ba57604051631f2a200560e01b815260040160405180910390fd5b60cc546001600160a01b03166109e35760405163d582591b60e01b815260040160405180910390fd5b60cc546001600160a01b031663eefb7e9a84335f366040518563ffffffff1660e01b8152600401610a179493929190613701565b602060405180830381865afa158015610a32573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a56919061374b565b15610a8457604051636c480add60e01b81526001600160a01b03841660048201526024015b60405180910390fd5b6040518281526001600160a01b0384169033907f401f439d865a766757ec78675925bd67198d5e78805aa41691b34b5d6a6cbbe69060200160405180910390a3610acf8333846116c6565b505050565b606060368054610ae39061376a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0f9061376a565b8015610b5a5780601f10610b3157610100808354040283529160200191610b5a565b820191905f5260205f20905b815481529060010190602001808311610b3d57829003601f168201915b5050505050905090565b5f610b6d61187c565b610b7783836118c3565b9392505050565b5f610b8a8460016118da565b610b94835f6118da565b610b9f8484846119b0565b949350505050565b610baf6119d3565b610bb881611a05565b50565b610bc3611b02565b610bcd8282611b0a565b5050565b5f610bda611b2f565b905090565b81610bfd57604051630461f45f60e11b815260040160405180910390fd5b610c05611b02565b610bcd8282611b38565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610c575760405162461bcd60e51b8152600401610a7b9061379c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c9f5f80516020613b9f833981519152546001600160a01b031690565b6001600160a01b031614610cc55760405162461bcd60e51b8152600401610a7b906137e8565b610cce81611bb2565b604080515f80825260208201909252610bb891839190611bdc565b5f610cf261187c565b610b778383611d46565b610d04611d67565b610d0c611d91565b565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610d38816116bc565b610d42835f6118da565b610acf8383611de4565b7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848610d76816116bc565b815f03610d9657604051631f2a200560e01b815260040160405180910390fd5b610da2335b60016118da565b610bcd3383611eae565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610df45760405162461bcd60e51b8152600401610a7b9061379c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e3c5f80516020613b9f833981519152546001600160a01b031690565b6001600160a01b031614610e625760405162461bcd60e51b8152600401610a7b906137e8565b610e6b82611bb2565b610bcd82826001611bdc565b5f306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f165760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a7b565b505f80516020613b9f83398151915290565b805f03610f4857604051631f2a200560e01b815260040160405180910390fd5b610f50611feb565b604051819033907f6fe86159012c6b167b88e7b30e7c8ebe172ed05c753231df050bf60e4faf724a905f90a36040515f90339083908381818185875af1925050503d805f8114610fbb576040519150601f19603f3d011682016040523d82523d5f602084013e610fc0565b606091505b5050905080610bcd576040516382daa1e760e01b815260040160405180910390fd5b6001600160a01b0381165f9081526099602052604081205461096a565b6110076119d3565b610bcd82828080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061201d92505050565b61104d611d67565b610d0c61206f565b5f6060805f805f60606065545f801b1480156110715750606654155b6110b55760405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b6044820152606401610a7b565b6110bd6120ad565b6110c56120bc565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b5f91825261022a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060378054610ae39061376a565b5f61113161187c565b610b7783836120cb565b5f61114533610d9b565b61114f835f6118da565b610b778383612145565b60608167ffffffffffffffff81111561117457611174613309565b6040519080825280602002602001820160405280156111a757816020015b60608152602001906001900390816111925790505b5090505f5b8281101561124557611215308585848181106111ca576111ca613834565b90506020028101906111dc9190613848565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061215292505050565b82828151811061122757611227613834565b6020026020010181905250808061123d9061389f565b9150506111ac565b5092915050565b610162805461125a9061376a565b80601f01602080910402602001604051908101604052809291908181526020018280546112869061376a565b80156112d15780601f106112a8576101008083540402835291602001916112d1565b820191905f5260205f20905b8154815290600101906020018083116112b457829003601f168201915b505050505081565b805f036112f957604051631f2a200560e01b815260040160405180910390fd5b611301611feb565b60405181906001600160a01b0384169033907fca9a684d22747bbed3bef704e16858bfa9ac8f5af2d80c70455b298bd7d8d239905f90a4610bcd6001600160a01b0383163383612177565b61135461187c565b611363878787878787876121c9565b50505050505050565b8115801561138257506001600160a01b03811633145b156113a057604051630461f45f60e11b815260040160405180910390fd5b6113a8611b02565b610bcd828261232a565b5f54610100900460ff16158080156113d057505f54600160ff909116105b806113e95750303b1580156113e957505f5460ff166001145b61144c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a7b565b5f805460ff19166001179055801561146d575f805461ff0019166101001790555b6001600160a01b038416158061148a57506001600160a01b038216155b8061149c57506001600160a01b038316155b156114ba5760405163e6c4247b60e01b815260040160405180910390fd5b6114c261234f565b61153388888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050604080516020601f8c018190048102820181019092528a815292508a91508990819084018382808284375f9201919091525061237592505050565b61157188888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506123a592505050565b61157961234f565b6115825f6123ee565b61158a61234f565b6115a160405180602001604052805f815250612414565b6115a9612443565b6115b1612471565b6115bb5f8561249f565b6115e57f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68461249f565b61160f7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a8361249f565b8015611654575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6001600160a01b039182165f90815260346020908152604080832093909416825291909152205490565b5f6001600160e01b03198216637965db0b60e01b148061096a57506301ffc9a760e01b6001600160e01b031983161461096a565b610bb88133612525565b6001600160a01b03831661172a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610a7b565b6001600160a01b03821661178c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610a7b565b61179783838361257e565b6001600160a01b0383165f908152603360205260409020548181101561180e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610a7b565b6001600160a01b038085165f8181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061186d9086815260200190565b60405180910390a35b50505050565b6101945460ff1615610d0c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610a7b565b5f336118d0818585612586565b5060019392505050565b60cc546001600160a01b031615610bcd5760cc546001600160a01b031663eefb7e9a83335f366040518563ffffffff1660e01b815260040161191f9493929190613701565b602060405180830381865afa15801561193a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061195e919061374b565b610bcd57801561198c57604051634b637e8f60e11b81526001600160a01b0383166004820152602401610a7b565b60405163ec442f0560e01b81526001600160a01b0383166004820152602401610a7b565b5f336119bd8582856126a9565b6119c88585856116c6565b506001949350505050565b6119db61187c565b7f2ce8d04a9c35987429af538825cd2438cc5c5bb5dc427955f84daaa3ea105016610bb8816116bc565b6001600160a01b03811615801590611a8757506040516301ffc9a760e01b815263777dbf4d60e11b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa158015611a61573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a85919061374b565b155b15611aa55760405163340aafcd60e11b815260040160405180910390fd5b60cc546040516001600160a01b0383811692169033907ff30d5b081b4a3016a4b34d3732b94b2b2ccc2d99f6774c8ac47c42d8764fd265905f90a460cc80546001600160a01b0319166001600160a01b0392909216919091179055565b610d0c61187c565b5f82815261022a6020526040902060010154611b25816116bc565b610acf838361249f565b5f610bda61271b565b6001600160a01b0381163314611ba85760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a7b565b610bcd828261278e565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3610bcd816116bc565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611c0f57610acf836127f5565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611c69575060408051601f3d908101601f19168201909252611c66918101906138b7565b60015b611ccc5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610a7b565b5f80516020613b9f8339815191528114611d3a5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610a7b565b50610acf838383612890565b5f336118d0818585611d58838361165e565b611d6291906138ce565b612586565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610bb8816116bc565b611d996128b4565b610194805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038216611e3a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610a7b565b611e455f838361257e565b8060355f828254611e5691906138ce565b90915550506001600160a01b0382165f818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b038216611f0e5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610a7b565b611f19825f8361257e565b6001600160a01b0382165f9081526033602052604090205481811015611f8c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610a7b565b6001600160a01b0383165f8181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b611ff361187c565b7f75afe8d9fedb4699bf07dc7bcb33fe609a84a99adfab7076931f0d93228085bb610bb8816116bc565b336001600160a01b03167fe41f7f53dffb3e1410dab0f9f6a27c670b48ad40ccc47a64537100e1f3809e8a6101628360405161205a9291906138e1565b60405180910390a2610162610bcd82826139c8565b61207761187c565b610194805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611dc73390565b606060678054610ae39061376a565b606060688054610ae39061376a565b5f33816120d8828661165e565b9050838110156121385760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610a7b565b6119c88286868403612586565b5f336118d08185856116c6565b6060610b778383604051806060016040528060278152602001613bbf602791396128fe565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610acf908490612972565b834211156122195760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610a7b565b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886122478c612a45565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f6122a182612a6c565b90505f6122b082878787612a98565b9050896001600160a01b0316816001600160a01b0316146123135760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610a7b565b61231e8a8a8a612586565b50505050505050505050565b5f82815261022a6020526040902060010154612345816116bc565b610acf838361278e565b5f54610100900460ff16610d0c5760405162461bcd60e51b8152600401610a7b90613a84565b5f54610100900460ff1661239b5760405162461bcd60e51b8152600401610a7b90613a84565b610bcd8282612abe565b5f54610100900460ff166123cb5760405162461bcd60e51b8152600401610a7b90613a84565b610bb881604051806040016040528060018152602001603160f81b815250612afd565b5f54610100900460ff16610baf5760405162461bcd60e51b8152600401610a7b90613a84565b5f54610100900460ff1661243a5760405162461bcd60e51b8152600401610a7b90613a84565b610bb88161201d565b5f54610100900460ff166124695760405162461bcd60e51b8152600401610a7b90613a84565b610d0c612b4a565b5f54610100900460ff166124975760405162461bcd60e51b8152600401610a7b90613a84565b610d0c61234f565b6124a982826110ee565b610bcd575f82815261022a602090815260408083206001600160a01b03851684529091529020805460ff191660011790556124e13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61252f82826110ee565b610bcd5761253c81612b78565b612547836020612b8a565b604051602001612558929190613acf565b60408051601f198184030181529082905262461bcd60e51b8252610a7b91600401613259565b610acf61187c565b6001600160a01b0383166125e85760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610a7b565b6001600160a01b0382166126495760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610a7b565b6001600160a01b038381165f8181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b5f6126b4848461165e565b90505f198114611876578181101561270e5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610a7b565b6118768484848403612586565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f612745612d20565b61274d612d78565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b61279882826110ee565b15610bcd575f82815261022a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0381163b6128625760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610a7b565b5f80516020613b9f83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61289983612da8565b5f825111806128a55750805b15610acf576118768383612152565b6101945460ff16610d0c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610a7b565b60605f80856001600160a01b03168560405161291a9190613b43565b5f60405180830381855af49150503d805f8114612952576040519150601f19603f3d011682016040523d82523d5f602084013e612957565b606091505b509150915061296886838387612de7565b9695505050505050565b5f6129c6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e5f9092919063ffffffff16565b905080515f14806129e65750808060200190518101906129e6919061374b565b610acf5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a7b565b6001600160a01b0381165f9081526099602052604090208054600181018255905b50919050565b5f61096a612a78611b2f565b8360405161190160f01b8152600281019290925260228201526042902090565b5f805f612aa787878787612e6d565b91509150612ab481612f2a565b5095945050505050565b5f54610100900460ff16612ae45760405162461bcd60e51b8152600401610a7b90613a84565b6036612af083826139c8565b506037610acf82826139c8565b5f54610100900460ff16612b235760405162461bcd60e51b8152600401610a7b90613a84565b6067612b2f83826139c8565b506068612b3c82826139c8565b50505f606581905560665550565b5f54610100900460ff16612b705760405162461bcd60e51b8152600401610a7b90613a84565b610d0c613073565b606061096a6001600160a01b03831660145b60605f612b98836002613b5e565b612ba39060026138ce565b67ffffffffffffffff811115612bbb57612bbb613309565b6040519080825280601f01601f191660200182016040528015612be5576020820181803683370190505b509050600360fc1b815f81518110612bff57612bff613834565b60200101906001600160f81b03191690815f1a905350600f60fb1b81600181518110612c2d57612c2d613834565b60200101906001600160f81b03191690815f1a9053505f612c4f846002613b5e565b612c5a9060016138ce565b90505b6001811115612cd1576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612c8e57612c8e613834565b1a60f81b828281518110612ca457612ca4613834565b60200101906001600160f81b03191690815f1a90535060049490941c93612cca81613b75565b9050612c5d565b508315610b775760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a7b565b5f80612d2a6120ad565b805190915015612d41578051602090910120919050565b6065548015612d505792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b5f80612d826120bc565b805190915015612d99578051602090910120919050565b6066548015612d505792915050565b612db1816127f5565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a250565b60608315612e555782515f03612e4e576001600160a01b0385163b612e4e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a7b565b5081610b9f565b610b9f83836130a6565b6060610b9f84845f856130d0565b5f807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612ea257505f90506003612f21565b604080515f8082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612ef3573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b038116612f1b575f60019250925050612f21565b91505f90505b94509492505050565b5f816004811115612f3d57612f3d613b8a565b03612f455750565b6001816004811115612f5957612f59613b8a565b03612fa65760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610a7b565b6002816004811115612fba57612fba613b8a565b036130075760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a7b565b600381600481111561301b5761301b613b8a565b03610bb85760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610a7b565b5f54610100900460ff166130995760405162461bcd60e51b8152600401610a7b90613a84565b610194805460ff19169055565b8151156130b65781518083602001fd5b8060405162461bcd60e51b8152600401610a7b9190613259565b6060824710156131315760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610a7b565b5f80866001600160a01b0316858760405161314c9190613b43565b5f6040518083038185875af1925050503d805f8114613186576040519150601f19603f3d011682016040523d82523d5f602084013e61318b565b606091505b509150915061319c87838387612de7565b979650505050505050565b5f602082840312156131b7575f80fd5b81356001600160e01b031981168114610b77575f80fd5b6001600160a01b0381168114610bb8575f80fd5b5f80604083850312156131f3575f80fd5b82356131fe816131ce565b946020939093013593505050565b5f5b8381101561322657818101518382015260200161320e565b50505f910152565b5f815180845261324581602086016020860161320c565b601f01601f19169290920160200192915050565b602081525f610b77602083018461322e565b5f805f6060848603121561327d575f80fd5b8335613288816131ce565b92506020840135613298816131ce565b929592945050506040919091013590565b5f602082840312156132b9575f80fd5b5035919050565b5f602082840312156132d0575f80fd5b8135610b77816131ce565b5f80604083850312156132ec575f80fd5b8235915060208301356132fe816131ce565b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f806040838503121561332e575f80fd5b8235613339816131ce565b9150602083013567ffffffffffffffff80821115613355575f80fd5b818501915085601f830112613368575f80fd5b81358181111561337a5761337a613309565b604051601f8201601f19908116603f011681019083821181831017156133a2576133a2613309565b816040528281528860208487010111156133ba575f80fd5b826020860160208301375f6020848301015280955050505050509250929050565b5f8083601f8401126133eb575f80fd5b50813567ffffffffffffffff811115613402575f80fd5b602083019150836020828501011115613419575f80fd5b9250929050565b5f8060208385031215613431575f80fd5b823567ffffffffffffffff811115613447575f80fd5b613453858286016133db565b90969095509350505050565b60ff60f81b881681525f602060e08184015261347e60e084018a61322e565b8381036040850152613490818a61322e565b606085018990526001600160a01b038816608086015260a0850187905284810360c086015285518082528387019250908301905f5b818110156134e1578351835292840192918401916001016134c5565b50909c9b505050505050505050505050565b5f8060208385031215613504575f80fd5b823567ffffffffffffffff8082111561351b575f80fd5b818501915085601f83011261352e575f80fd5b81358181111561353c575f80fd5b8660208260051b8501011115613550575f80fd5b60209290920196919550909350505050565b5f602080830181845280855180835260408601915060408160051b87010192508387015f5b828110156135b557603f198886030184526135a385835161322e565b94509285019290850190600101613587565b5092979650505050505050565b5f805f805f805f60e0888a0312156135d8575f80fd5b87356135e3816131ce565b965060208801356135f3816131ce565b95506040880135945060608801359350608088013560ff81168114613616575f80fd5b9699959850939692959460a0840135945060c09093013592915050565b5f805f805f805f60a0888a031215613649575f80fd5b873567ffffffffffffffff80821115613660575f80fd5b61366c8b838c016133db565b909950975060208a0135915080821115613684575f80fd5b506136918a828b016133db565b90965094505060408801356136a5816131ce565b925060608801356136b5816131ce565b915060808801356136c5816131ce565b8091505092959891949750929550565b5f80604083850312156136e6575f80fd5b82356136f1816131ce565b915060208301356132fe816131ce565b6001600160a01b0385811682528416602082015260606040820181905281018290525f828460808401375f608084840101526080601f19601f850116830101905095945050505050565b5f6020828403121561375b575f80fd5b81518015158114610b77575f80fd5b600181811c9082168061377e57607f821691505b602082108103612a6657634e487b7160e01b5f52602260045260245ffd5b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b5f52603260045260245ffd5b5f808335601e1984360301811261385d575f80fd5b83018035915067ffffffffffffffff821115613877575f80fd5b602001915036819003821315613419575f80fd5b634e487b7160e01b5f52601160045260245ffd5b5f600182016138b0576138b061388b565b5060010190565b5f602082840312156138c7575f80fd5b5051919050565b8082018082111561096a5761096a61388b565b604081525f8084546138f28161376a565b806040860152606060018084165f8114613913576001811461392d5761395b565b60ff1985168884015283151560051b88018301955061395b565b895f526020805f205f5b868110156139525781548b8201870152908401908201613937565b8a018501975050505b50505050508281036020840152613972818561322e565b95945050505050565b601f821115610acf575f81815260208120601f850160051c810160208610156139a15750805b601f850160051c820191505b818110156139c0578281556001016139ad565b505050505050565b815167ffffffffffffffff8111156139e2576139e2613309565b6139f6816139f0845461376a565b8461397b565b602080601f831160018114613a29575f8415613a125750858301515b5f19600386901b1c1916600185901b1785556139c0565b5f85815260208120601f198616915b82811015613a5757888601518255948401946001909101908401613a38565b5085821015613a7457878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081525f8351613b0681601785016020880161320c565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613b3781602884016020880161320c565b01602801949350505050565b5f8251613b5481846020870161320c565b9190910192915050565b808202811582820484141761096a5761096a61388b565b5f81613b8357613b8361388b565b505f190190565b634e487b7160e01b5f52602160045260245ffdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220edac625166136e805bd55adb73ae179cd5b7475e339b1d4e2f8b4832462c838764736f6c63430008140033",
		"sourceMap": "3554:19943:2:-:0;;;1332:4:31;1289:48;;6414:44:2;;;;;;;;;-1:-1:-1;6432:22:2;:20;:22::i;:::-;3554:19943;;5939:280:30;6007:13;;;;;;;6006:14;5998:66;;;;-1:-1:-1;;;5998:66:30;;216:2:68;5998:66:30;;;198:21:68;255:2;235:18;;;228:30;294:34;274:18;;;267:62;-1:-1:-1;;;345:18:68;;;338:37;392:19;;5998:66:30;;;;;;;;6078:12;;6094:15;6078:12;;;:31;6074:139;;6125:12;:30;;-1:-1:-1;;6125:30:30;6140:15;6125:30;;;;;;6174:28;;564:36:68;;;6174:28:30;;552:2:68;537:18;6174:28:30;;;;;;;6074:139;5939:280::o;422:184:68:-;3554:19943:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
		"linkReferences": {}
	},
	"deployedBytecode": {
		"object": "0x608060405260043610610280575f3560e01c80635c975abb11610155578063a9059cbb116100be578063d547741f11610078578063d547741f146107cd578063db0ed6a0146107ec578063dd62ed3e1461080b578063e63ab1e91461082a578063e6f29b051461085d578063f72c0d8b14610894575f80fd5b8063a9059cbb146106fd578063ac9650d81461071c578063c0e24d5e14610748578063c3d00d4e1461075c578063d505accf1461077b578063d53913931461079a575f80fd5b806384b0196e1161010f57806384b0196e1461063e57806388920d291461066557806391d148541461069857806395d89b41146106b7578063a217fddf146106cb578063a457c2d7146106de575f80fd5b80635c975abb146105815780636e1d21b01461059957806370a08231146105b85780637ecebe00146105ec5780637ffc5a5c1461060b5780638456cb591461062a575f80fd5b8063313ce567116101f75780633f4ba83a116101b15780633f4ba83a146104e857806340c10f19146104fc57806342966c681461051b5780634f1ef2861461053a57806352d1902d1461054d57806354fd4d5014610561575f80fd5b8063313ce5671461042957806331993a1c146104445780633644e5151461047757806336568abe1461048b5780633659cfe6146104aa57806339509351146104c9575f80fd5b80631da03312116102485780631da033121461033757806323b872dd1461036a578063248a9ca314610389578063282c51f3146103b85780632e13ae6e146103eb5780632f2ff15d1461040a575f80fd5b806301ffc9a714610284578063069c9fae146102b857806306fdde03146102d9578063095ea7b3146102fa57806318160ddd14610319575b5f80fd5b34801561028f575f80fd5b506102a361029e3660046131a7565b6108c7565b60405190151581526020015b60405180910390f35b3480156102c3575f80fd5b506102d76102d23660046131e2565b610970565b005b3480156102e4575f80fd5b506102ed610ad4565b6040516102af9190613259565b348015610305575f80fd5b506102a36103143660046131e2565b610b64565b348015610324575f80fd5b506035545b6040519081526020016102af565b348015610342575f80fd5b506103297f2ce8d04a9c35987429af538825cd2438cc5c5bb5dc427955f84daaa3ea10501681565b348015610375575f80fd5b506102a361038436600461326b565b610b7e565b348015610394575f80fd5b506103296103a33660046132a9565b5f90815261022a602052604090206001015490565b3480156103c3575f80fd5b506103297f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84881565b3480156103f6575f80fd5b506102d76104053660046132c0565b610ba7565b348015610415575f80fd5b506102d76104243660046132db565b610bbb565b348015610434575f80fd5b50604051601281526020016102af565b34801561044f575f80fd5b506103297f0acf805600123ef007091da3b3ffb39474074c656c127aa68cb0ffec232a8ff881565b348015610482575f80fd5b50610329610bd1565b348015610496575f80fd5b506102d76104a53660046132db565b610bdf565b3480156104b5575f80fd5b506102d76104c43660046132c0565b610c0f565b3480156104d4575f80fd5b506102a36104e33660046131e2565b610ce9565b3480156104f3575f80fd5b506102d7610cfc565b348015610507575f80fd5b506102d76105163660046131e2565b610d0e565b348015610526575f80fd5b506102d76105353660046132a9565b610d4c565b6102d761054836600461331d565b610dac565b348015610558575f80fd5b50610329610e77565b34801561056c575f80fd5b505f5460405160ff90911681526020016102af565b34801561058c575f80fd5b506101945460ff166102a3565b3480156105a4575f80fd5b506102d76105b33660046132a9565b610f28565b3480156105c3575f80fd5b506103296105d23660046132c0565b6001600160a01b03165f9081526033602052604090205490565b3480156105f7575f80fd5b506103296106063660046132c0565b610fe2565b348015610616575f80fd5b506102d7610625366004613420565b610fff565b348015610635575f80fd5b506102d7611045565b348015610649575f80fd5b50610652611055565b6040516102af979695949392919061345f565b348015610670575f80fd5b506103297f75afe8d9fedb4699bf07dc7bcb33fe609a84a99adfab7076931f0d93228085bb81565b3480156106a3575f80fd5b506102a36106b23660046132db565b6110ee565b3480156106c2575f80fd5b506102ed611119565b3480156106d6575f80fd5b506103295f81565b3480156106e9575f80fd5b506102a36106f83660046131e2565b611128565b348015610708575f80fd5b506102a36107173660046131e2565b61113b565b348015610727575f80fd5b5061073b6107363660046134f3565b611159565b6040516102af9190613562565b348015610753575f80fd5b506102ed61124c565b348015610767575f80fd5b506102d76107763660046131e2565b6112d9565b348015610786575f80fd5b506102d76107953660046135c2565b61134c565b3480156107a5575f80fd5b506103297f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b3480156107d8575f80fd5b506102d76107e73660046132db565b61136c565b3480156107f7575f80fd5b506102d7610806366004613633565b6113b2565b348015610816575f80fd5b506103296108253660046136d5565b61165e565b348015610835575f80fd5b506103297f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b348015610868575f80fd5b5060cc5461087c906001600160a01b031681565b6040516001600160a01b0390911681526020016102af565b34801561089f575f80fd5b506103297f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b5f6001600160e01b031982166336372b0760e01b14806108f757506001600160e01b0319821663a219a02560e01b145b8061090a57506001600160e01b03198216155b8061092557506001600160e01b031982166352d1902d60e01b145b8061094057506001600160e01b03198216634ec7fbed60e11b145b8061095b57506001600160e01b031982166342580cb760e11b145b8061096a575061096a82611688565b92915050565b7f0acf805600123ef007091da3b3ffb39474074c656c127aa68cb0ffec232a8ff861099a816116bc565b815f036109ba57604051631f2a200560e01b815260040160405180910390fd5b60cc546001600160a01b03166109e35760405163d582591b60e01b815260040160405180910390fd5b60cc546001600160a01b031663eefb7e9a84335f366040518563ffffffff1660e01b8152600401610a179493929190613701565b602060405180830381865afa158015610a32573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a56919061374b565b15610a8457604051636c480add60e01b81526001600160a01b03841660048201526024015b60405180910390fd5b6040518281526001600160a01b0384169033907f401f439d865a766757ec78675925bd67198d5e78805aa41691b34b5d6a6cbbe69060200160405180910390a3610acf8333846116c6565b505050565b606060368054610ae39061376a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0f9061376a565b8015610b5a5780601f10610b3157610100808354040283529160200191610b5a565b820191905f5260205f20905b815481529060010190602001808311610b3d57829003601f168201915b5050505050905090565b5f610b6d61187c565b610b7783836118c3565b9392505050565b5f610b8a8460016118da565b610b94835f6118da565b610b9f8484846119b0565b949350505050565b610baf6119d3565b610bb881611a05565b50565b610bc3611b02565b610bcd8282611b0a565b5050565b5f610bda611b2f565b905090565b81610bfd57604051630461f45f60e11b815260040160405180910390fd5b610c05611b02565b610bcd8282611b38565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610c575760405162461bcd60e51b8152600401610a7b9061379c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c9f5f80516020613b9f833981519152546001600160a01b031690565b6001600160a01b031614610cc55760405162461bcd60e51b8152600401610a7b906137e8565b610cce81611bb2565b604080515f80825260208201909252610bb891839190611bdc565b5f610cf261187c565b610b778383611d46565b610d04611d67565b610d0c611d91565b565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610d38816116bc565b610d42835f6118da565b610acf8383611de4565b7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848610d76816116bc565b815f03610d9657604051631f2a200560e01b815260040160405180910390fd5b610da2335b60016118da565b610bcd3383611eae565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610df45760405162461bcd60e51b8152600401610a7b9061379c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e3c5f80516020613b9f833981519152546001600160a01b031690565b6001600160a01b031614610e625760405162461bcd60e51b8152600401610a7b906137e8565b610e6b82611bb2565b610bcd82826001611bdc565b5f306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f165760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a7b565b505f80516020613b9f83398151915290565b805f03610f4857604051631f2a200560e01b815260040160405180910390fd5b610f50611feb565b604051819033907f6fe86159012c6b167b88e7b30e7c8ebe172ed05c753231df050bf60e4faf724a905f90a36040515f90339083908381818185875af1925050503d805f8114610fbb576040519150601f19603f3d011682016040523d82523d5f602084013e610fc0565b606091505b5050905080610bcd576040516382daa1e760e01b815260040160405180910390fd5b6001600160a01b0381165f9081526099602052604081205461096a565b6110076119d3565b610bcd82828080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061201d92505050565b61104d611d67565b610d0c61206f565b5f6060805f805f60606065545f801b1480156110715750606654155b6110b55760405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b6044820152606401610a7b565b6110bd6120ad565b6110c56120bc565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b5f91825261022a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060378054610ae39061376a565b5f61113161187c565b610b7783836120cb565b5f61114533610d9b565b61114f835f6118da565b610b778383612145565b60608167ffffffffffffffff81111561117457611174613309565b6040519080825280602002602001820160405280156111a757816020015b60608152602001906001900390816111925790505b5090505f5b8281101561124557611215308585848181106111ca576111ca613834565b90506020028101906111dc9190613848565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061215292505050565b82828151811061122757611227613834565b6020026020010181905250808061123d9061389f565b9150506111ac565b5092915050565b610162805461125a9061376a565b80601f01602080910402602001604051908101604052809291908181526020018280546112869061376a565b80156112d15780601f106112a8576101008083540402835291602001916112d1565b820191905f5260205f20905b8154815290600101906020018083116112b457829003601f168201915b505050505081565b805f036112f957604051631f2a200560e01b815260040160405180910390fd5b611301611feb565b60405181906001600160a01b0384169033907fca9a684d22747bbed3bef704e16858bfa9ac8f5af2d80c70455b298bd7d8d239905f90a4610bcd6001600160a01b0383163383612177565b61135461187c565b611363878787878787876121c9565b50505050505050565b8115801561138257506001600160a01b03811633145b156113a057604051630461f45f60e11b815260040160405180910390fd5b6113a8611b02565b610bcd828261232a565b5f54610100900460ff16158080156113d057505f54600160ff909116105b806113e95750303b1580156113e957505f5460ff166001145b61144c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a7b565b5f805460ff19166001179055801561146d575f805461ff0019166101001790555b6001600160a01b038416158061148a57506001600160a01b038216155b8061149c57506001600160a01b038316155b156114ba5760405163e6c4247b60e01b815260040160405180910390fd5b6114c261234f565b61153388888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050604080516020601f8c018190048102820181019092528a815292508a91508990819084018382808284375f9201919091525061237592505050565b61157188888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506123a592505050565b61157961234f565b6115825f6123ee565b61158a61234f565b6115a160405180602001604052805f815250612414565b6115a9612443565b6115b1612471565b6115bb5f8561249f565b6115e57f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68461249f565b61160f7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a8361249f565b8015611654575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6001600160a01b039182165f90815260346020908152604080832093909416825291909152205490565b5f6001600160e01b03198216637965db0b60e01b148061096a57506301ffc9a760e01b6001600160e01b031983161461096a565b610bb88133612525565b6001600160a01b03831661172a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610a7b565b6001600160a01b03821661178c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610a7b565b61179783838361257e565b6001600160a01b0383165f908152603360205260409020548181101561180e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610a7b565b6001600160a01b038085165f8181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061186d9086815260200190565b60405180910390a35b50505050565b6101945460ff1615610d0c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610a7b565b5f336118d0818585612586565b5060019392505050565b60cc546001600160a01b031615610bcd5760cc546001600160a01b031663eefb7e9a83335f366040518563ffffffff1660e01b815260040161191f9493929190613701565b602060405180830381865afa15801561193a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061195e919061374b565b610bcd57801561198c57604051634b637e8f60e11b81526001600160a01b0383166004820152602401610a7b565b60405163ec442f0560e01b81526001600160a01b0383166004820152602401610a7b565b5f336119bd8582856126a9565b6119c88585856116c6565b506001949350505050565b6119db61187c565b7f2ce8d04a9c35987429af538825cd2438cc5c5bb5dc427955f84daaa3ea105016610bb8816116bc565b6001600160a01b03811615801590611a8757506040516301ffc9a760e01b815263777dbf4d60e11b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa158015611a61573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a85919061374b565b155b15611aa55760405163340aafcd60e11b815260040160405180910390fd5b60cc546040516001600160a01b0383811692169033907ff30d5b081b4a3016a4b34d3732b94b2b2ccc2d99f6774c8ac47c42d8764fd265905f90a460cc80546001600160a01b0319166001600160a01b0392909216919091179055565b610d0c61187c565b5f82815261022a6020526040902060010154611b25816116bc565b610acf838361249f565b5f610bda61271b565b6001600160a01b0381163314611ba85760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a7b565b610bcd828261278e565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3610bcd816116bc565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611c0f57610acf836127f5565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611c69575060408051601f3d908101601f19168201909252611c66918101906138b7565b60015b611ccc5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610a7b565b5f80516020613b9f8339815191528114611d3a5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610a7b565b50610acf838383612890565b5f336118d0818585611d58838361165e565b611d6291906138ce565b612586565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610bb8816116bc565b611d996128b4565b610194805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038216611e3a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610a7b565b611e455f838361257e565b8060355f828254611e5691906138ce565b90915550506001600160a01b0382165f818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b038216611f0e5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610a7b565b611f19825f8361257e565b6001600160a01b0382165f9081526033602052604090205481811015611f8c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610a7b565b6001600160a01b0383165f8181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b611ff361187c565b7f75afe8d9fedb4699bf07dc7bcb33fe609a84a99adfab7076931f0d93228085bb610bb8816116bc565b336001600160a01b03167fe41f7f53dffb3e1410dab0f9f6a27c670b48ad40ccc47a64537100e1f3809e8a6101628360405161205a9291906138e1565b60405180910390a2610162610bcd82826139c8565b61207761187c565b610194805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611dc73390565b606060678054610ae39061376a565b606060688054610ae39061376a565b5f33816120d8828661165e565b9050838110156121385760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610a7b565b6119c88286868403612586565b5f336118d08185856116c6565b6060610b778383604051806060016040528060278152602001613bbf602791396128fe565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610acf908490612972565b834211156122195760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610a7b565b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886122478c612a45565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f6122a182612a6c565b90505f6122b082878787612a98565b9050896001600160a01b0316816001600160a01b0316146123135760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610a7b565b61231e8a8a8a612586565b50505050505050505050565b5f82815261022a6020526040902060010154612345816116bc565b610acf838361278e565b5f54610100900460ff16610d0c5760405162461bcd60e51b8152600401610a7b90613a84565b5f54610100900460ff1661239b5760405162461bcd60e51b8152600401610a7b90613a84565b610bcd8282612abe565b5f54610100900460ff166123cb5760405162461bcd60e51b8152600401610a7b90613a84565b610bb881604051806040016040528060018152602001603160f81b815250612afd565b5f54610100900460ff16610baf5760405162461bcd60e51b8152600401610a7b90613a84565b5f54610100900460ff1661243a5760405162461bcd60e51b8152600401610a7b90613a84565b610bb88161201d565b5f54610100900460ff166124695760405162461bcd60e51b8152600401610a7b90613a84565b610d0c612b4a565b5f54610100900460ff166124975760405162461bcd60e51b8152600401610a7b90613a84565b610d0c61234f565b6124a982826110ee565b610bcd575f82815261022a602090815260408083206001600160a01b03851684529091529020805460ff191660011790556124e13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61252f82826110ee565b610bcd5761253c81612b78565b612547836020612b8a565b604051602001612558929190613acf565b60408051601f198184030181529082905262461bcd60e51b8252610a7b91600401613259565b610acf61187c565b6001600160a01b0383166125e85760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610a7b565b6001600160a01b0382166126495760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610a7b565b6001600160a01b038381165f8181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b5f6126b4848461165e565b90505f198114611876578181101561270e5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610a7b565b6118768484848403612586565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f612745612d20565b61274d612d78565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b61279882826110ee565b15610bcd575f82815261022a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0381163b6128625760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610a7b565b5f80516020613b9f83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61289983612da8565b5f825111806128a55750805b15610acf576118768383612152565b6101945460ff16610d0c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610a7b565b60605f80856001600160a01b03168560405161291a9190613b43565b5f60405180830381855af49150503d805f8114612952576040519150601f19603f3d011682016040523d82523d5f602084013e612957565b606091505b509150915061296886838387612de7565b9695505050505050565b5f6129c6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e5f9092919063ffffffff16565b905080515f14806129e65750808060200190518101906129e6919061374b565b610acf5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a7b565b6001600160a01b0381165f9081526099602052604090208054600181018255905b50919050565b5f61096a612a78611b2f565b8360405161190160f01b8152600281019290925260228201526042902090565b5f805f612aa787878787612e6d565b91509150612ab481612f2a565b5095945050505050565b5f54610100900460ff16612ae45760405162461bcd60e51b8152600401610a7b90613a84565b6036612af083826139c8565b506037610acf82826139c8565b5f54610100900460ff16612b235760405162461bcd60e51b8152600401610a7b90613a84565b6067612b2f83826139c8565b506068612b3c82826139c8565b50505f606581905560665550565b5f54610100900460ff16612b705760405162461bcd60e51b8152600401610a7b90613a84565b610d0c613073565b606061096a6001600160a01b03831660145b60605f612b98836002613b5e565b612ba39060026138ce565b67ffffffffffffffff811115612bbb57612bbb613309565b6040519080825280601f01601f191660200182016040528015612be5576020820181803683370190505b509050600360fc1b815f81518110612bff57612bff613834565b60200101906001600160f81b03191690815f1a905350600f60fb1b81600181518110612c2d57612c2d613834565b60200101906001600160f81b03191690815f1a9053505f612c4f846002613b5e565b612c5a9060016138ce565b90505b6001811115612cd1576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612c8e57612c8e613834565b1a60f81b828281518110612ca457612ca4613834565b60200101906001600160f81b03191690815f1a90535060049490941c93612cca81613b75565b9050612c5d565b508315610b775760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a7b565b5f80612d2a6120ad565b805190915015612d41578051602090910120919050565b6065548015612d505792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b5f80612d826120bc565b805190915015612d99578051602090910120919050565b6066548015612d505792915050565b612db1816127f5565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a250565b60608315612e555782515f03612e4e576001600160a01b0385163b612e4e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a7b565b5081610b9f565b610b9f83836130a6565b6060610b9f84845f856130d0565b5f807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612ea257505f90506003612f21565b604080515f8082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612ef3573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b038116612f1b575f60019250925050612f21565b91505f90505b94509492505050565b5f816004811115612f3d57612f3d613b8a565b03612f455750565b6001816004811115612f5957612f59613b8a565b03612fa65760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610a7b565b6002816004811115612fba57612fba613b8a565b036130075760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a7b565b600381600481111561301b5761301b613b8a565b03610bb85760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610a7b565b5f54610100900460ff166130995760405162461bcd60e51b8152600401610a7b90613a84565b610194805460ff19169055565b8151156130b65781518083602001fd5b8060405162461bcd60e51b8152600401610a7b9190613259565b6060824710156131315760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610a7b565b5f80866001600160a01b0316858760405161314c9190613b43565b5f6040518083038185875af1925050503d805f8114613186576040519150601f19603f3d011682016040523d82523d5f602084013e61318b565b606091505b509150915061319c87838387612de7565b979650505050505050565b5f602082840312156131b7575f80fd5b81356001600160e01b031981168114610b77575f80fd5b6001600160a01b0381168114610bb8575f80fd5b5f80604083850312156131f3575f80fd5b82356131fe816131ce565b946020939093013593505050565b5f5b8381101561322657818101518382015260200161320e565b50505f910152565b5f815180845261324581602086016020860161320c565b601f01601f19169290920160200192915050565b602081525f610b77602083018461322e565b5f805f6060848603121561327d575f80fd5b8335613288816131ce565b92506020840135613298816131ce565b929592945050506040919091013590565b5f602082840312156132b9575f80fd5b5035919050565b5f602082840312156132d0575f80fd5b8135610b77816131ce565b5f80604083850312156132ec575f80fd5b8235915060208301356132fe816131ce565b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f806040838503121561332e575f80fd5b8235613339816131ce565b9150602083013567ffffffffffffffff80821115613355575f80fd5b818501915085601f830112613368575f80fd5b81358181111561337a5761337a613309565b604051601f8201601f19908116603f011681019083821181831017156133a2576133a2613309565b816040528281528860208487010111156133ba575f80fd5b826020860160208301375f6020848301015280955050505050509250929050565b5f8083601f8401126133eb575f80fd5b50813567ffffffffffffffff811115613402575f80fd5b602083019150836020828501011115613419575f80fd5b9250929050565b5f8060208385031215613431575f80fd5b823567ffffffffffffffff811115613447575f80fd5b613453858286016133db565b90969095509350505050565b60ff60f81b881681525f602060e08184015261347e60e084018a61322e565b8381036040850152613490818a61322e565b606085018990526001600160a01b038816608086015260a0850187905284810360c086015285518082528387019250908301905f5b818110156134e1578351835292840192918401916001016134c5565b50909c9b505050505050505050505050565b5f8060208385031215613504575f80fd5b823567ffffffffffffffff8082111561351b575f80fd5b818501915085601f83011261352e575f80fd5b81358181111561353c575f80fd5b8660208260051b8501011115613550575f80fd5b60209290920196919550909350505050565b5f602080830181845280855180835260408601915060408160051b87010192508387015f5b828110156135b557603f198886030184526135a385835161322e565b94509285019290850190600101613587565b5092979650505050505050565b5f805f805f805f60e0888a0312156135d8575f80fd5b87356135e3816131ce565b965060208801356135f3816131ce565b95506040880135945060608801359350608088013560ff81168114613616575f80fd5b9699959850939692959460a0840135945060c09093013592915050565b5f805f805f805f60a0888a031215613649575f80fd5b873567ffffffffffffffff80821115613660575f80fd5b61366c8b838c016133db565b909950975060208a0135915080821115613684575f80fd5b506136918a828b016133db565b90965094505060408801356136a5816131ce565b925060608801356136b5816131ce565b915060808801356136c5816131ce565b8091505092959891949750929550565b5f80604083850312156136e6575f80fd5b82356136f1816131ce565b915060208301356132fe816131ce565b6001600160a01b0385811682528416602082015260606040820181905281018290525f828460808401375f608084840101526080601f19601f850116830101905095945050505050565b5f6020828403121561375b575f80fd5b81518015158114610b77575f80fd5b600181811c9082168061377e57607f821691505b602082108103612a6657634e487b7160e01b5f52602260045260245ffd5b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b5f52603260045260245ffd5b5f808335601e1984360301811261385d575f80fd5b83018035915067ffffffffffffffff821115613877575f80fd5b602001915036819003821315613419575f80fd5b634e487b7160e01b5f52601160045260245ffd5b5f600182016138b0576138b061388b565b5060010190565b5f602082840312156138c7575f80fd5b5051919050565b8082018082111561096a5761096a61388b565b604081525f8084546138f28161376a565b806040860152606060018084165f8114613913576001811461392d5761395b565b60ff1985168884015283151560051b88018301955061395b565b895f526020805f205f5b868110156139525781548b8201870152908401908201613937565b8a018501975050505b50505050508281036020840152613972818561322e565b95945050505050565b601f821115610acf575f81815260208120601f850160051c810160208610156139a15750805b601f850160051c820191505b818110156139c0578281556001016139ad565b505050505050565b815167ffffffffffffffff8111156139e2576139e2613309565b6139f6816139f0845461376a565b8461397b565b602080601f831160018114613a29575f8415613a125750858301515b5f19600386901b1c1916600185901b1785556139c0565b5f85815260208120601f198616915b82811015613a5757888601518255948401946001909101908401613a38565b5085821015613a7457878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081525f8351613b0681601785016020880161320c565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613b3781602884016020880161320c565b01602801949350505050565b5f8251613b5481846020870161320c565b9190910192915050565b808202811582820484141761096a5761096a61388b565b5f81613b8357613b8361388b565b505f190190565b634e487b7160e01b5f52602160045260245ffdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220edac625166136e805bd55adb73ae179cd5b7475e339b1d4e2f8b4832462c838764736f6c63430008140033",
		"sourceMap": "3554:19943:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18627:516;;;;;;;;;;-1:-1:-1;18627:516:2;;;;;:::i;:::-;;:::i;:::-;;;470:14:68;;463:22;445:41;;433:2;418:18;18627:516:2;;;;;;;;10228:454;;;;;;;;;;-1:-1:-1;10228:454:2;;;;;:::i;:::-;;:::i;:::-;;2495:98:38;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;13943:148:2:-;;;;;;;;;;-1:-1:-1;13943:148:2;;;;;:::i;:::-;;:::i;3592:106:38:-;;;;;;;;;;-1:-1:-1;3679:12:38;;3592:106;;;1855:25:68;;;1843:2;1828:18;3592:106:38;1709:177:68;4638:78:2;;;;;;;;;;;;4684:32;4638:78;;18124:219;;;;;;;;;;-1:-1:-1;18124:219:2;;;;;:::i;:::-;;:::i;4834:129:22:-;;;;;;;;;;-1:-1:-1;4834:129:22;;;;;:::i;:::-;4908:7;4934:12;;;:6;:12;;;;;:22;;;;4834:129;5176:62:2;;;;;;;;;;;;5214:24;5176:62;;3059:154:5;;;;;;;;;;-1:-1:-1;3059:154:5;;;;;:::i;:::-;;:::i;3468:171:16:-;;;;;;;;;;-1:-1:-1;3468:171:16;;;;;:::i;:::-;;:::i;3441:91:38:-;;;;;;;;;;-1:-1:-1;3441:91:38;;3523:2;3433:36:68;;3421:2;3406:18;3441:91:38;3291:184:68;5446:66:2;;;;;;;;;;;;5486:26;5446:66;;3264:113:40;;;;;;;;;;;;;:::i;2802:258:16:-;;;;;;;;;;-1:-1:-1;2802:258:16;;;;;:::i;:::-;;:::i;3387:195:31:-;;;;;;;;;;-1:-1:-1;3387:195:31;;;;;:::i;:::-;;:::i;14779:176:2:-;;;;;;;;;;-1:-1:-1;14779:176:2;;;;;:::i;:::-;;:::i;2199:75:15:-;;;;;;;;;;;;;:::i;8389:138:2:-;;;;;;;;;;-1:-1:-1;8389:138:2;;;;;:::i;:::-;;:::i;9175:195::-;;;;;;;;;;-1:-1:-1;9175:195:2;;;;;:::i;:::-;;:::i;3901:220:31:-;;;;;;:::i;:::-;;:::i;3006:131::-;;;;;;;;;;;;;:::i;10987:111:2:-;;;;;;;;;;-1:-1:-1;11037:6:2;6410:12:30;10987:111:2;;6410:12:30;;;;5002:50:68;;4990:2;4975:18;10987:111:2;4858:200:68;1858:84:32;;;;;;;;;;-1:-1:-1;1928:7:32;;;;1858:84;;3579:310:17;;;;;;;;;;-1:-1:-1;3579:310:17;;;;;:::i;:::-;;:::i;3756:125:38:-;;;;;;;;;;-1:-1:-1;3756:125:38;;;;;:::i;:::-;-1:-1:-1;;;;;3856:18:38;3830:7;3856:18;;;:9;:18;;;;;;;3756:125;3014:126:40;;;;;;;;;;-1:-1:-1;3014:126:40;;;;;:::i;:::-;;:::i;2518:131:13:-;;;;;;;;;;-1:-1:-1;2518:131:13;;;;;:::i;:::-;;:::i;1856:71:15:-;;;;;;;;;;;;;:::i;4500:861:55:-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;5726:64:2:-;;;;;;;;;;;;5765:25;5726:64;;3329:145:22;;;;;;;;;;-1:-1:-1;3329:145:22;;;;;:::i;:::-;;:::i;2706:102:38:-;;;;;;;;;;;;;:::i;2450:49:22:-;;;;;;;;;;-1:-1:-1;2450:49:22;2495:4;2450:49;;15769:193:2;;;;;;;;;;-1:-1:-1;15769:193:2;;;;;:::i;:::-;;:::i;16747:199::-;;;;;;;;;;-1:-1:-1;16747:199:2;;;;;:::i;:::-;;:::i;695:319:51:-;;;;;;;;;;-1:-1:-1;695:319:51;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1457:25:13:-;;;;;;;;;;;;;:::i;2988:275:17:-;;;;;;;;;;-1:-1:-1;2988:275:17;;;;;:::i;:::-;;:::i;12753:229:2:-;;;;;;;;;;-1:-1:-1;12753:229:2;;;;;:::i;:::-;;:::i;4915:62::-;;;;;;;;;;;;4953:24;4915:62;;2185:282:16;;;;;;;;;;-1:-1:-1;2185:282:16;;;;;:::i;:::-;;:::i;7094:653:2:-;;;;;;;;;;-1:-1:-1;7094:653:2;;;;;:::i;:::-;;:::i;4324:149:38:-;;;;;;;;;;-1:-1:-1;4324:149:38;;;;;:::i;:::-;;:::i;4341:62:2:-;;;;;;;;;;;;4379:24;4341:62;;1604:37:5;;;;;;;;;;-1:-1:-1;1604:37:5;;;;-1:-1:-1;;;;;1604:37:5;;;;;;-1:-1:-1;;;;;11439:32:68;;;11421:51;;11409:2;11394:18;1604:37:5;11251:227:68;4069:66:2;;;;;;;;;;;;4109:26;4069:66;;18627:516;18712:4;-1:-1:-1;;;;;;18732:50:2;;-1:-1:-1;;;18732:50:2;;:115;;-1:-1:-1;;;;;;;18789:58:2;;-1:-1:-1;;;18789:58:2;18732:115;:174;;;-1:-1:-1;;;;;;;18854:52:2;;;18732:174;:242;;;-1:-1:-1;;;;;;;18913:61:2;;-1:-1:-1;;;18913:61:2;18732:242;:305;;;-1:-1:-1;;;;;;;18981:56:2;;-1:-1:-1;;;18981:56:2;18732:305;:364;;;-1:-1:-1;;;;;;;19044:52:2;;-1:-1:-1;;;19044:52:2;18732:364;:407;;;;19103:36;19127:11;19103:23;:36::i;:::-;18722:417;18627:516;-1:-1:-1;;18627:516:2:o;10228:454::-;5486:26;2928:16:22;2939:4;2928:10;:16::i;:::-;10333:6:2::1;10343:1;10333:11:::0;10329:46:::1;;10353:22;;-1:-1:-1::0;;;10353:22:2::1;;;;;;;;;;;10329:46;10391:14;::::0;-1:-1:-1;;;;;10391:14:2::1;10379:82;;10429:32;;-1:-1:-1::0;;;10429:32:2::1;;;;;;;;;;;10379:82;10469:14;::::0;-1:-1:-1;;;;;10469:14:2::1;:24;10494:7:::0;929:10:49;1003:14;;10469:59:2::1;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10465:114;;;10537:42;::::0;-1:-1:-1;;;10537:42:2;;-1:-1:-1;;;;;11439:32:68;;10537:42:2::1;::::0;::::1;11421:51:68::0;11394:18;;10537:42:2::1;;;;;;;;10465:114;10588:46;::::0;1855:25:68;;;-1:-1:-1;;;;;10588:46:2;::::1;::::0;929:10:49;;10588:46:2::1;::::0;1843:2:68;1828:18;10588:46:2::1;;;;;;;10638:40;10648:7:::0;929:10:49;10671:6:2::1;10638:9;:40::i;:::-;10228:454:::0;;;:::o;2495:98:38:-;2549:13;2581:5;2574:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2495:98;:::o;13943:148:2:-;14040:4;1482:19:32;:17;:19::i;:::-;14057:30:2::1;14071:7;14080:6;14057:13;:30::i;:::-;14050:37:::0;13943:148;-1:-1:-1;;;13943:148:2:o;18124:219::-;18221:4;18231:29;18249:4;18255;18231:17;:29::i;:::-;18264:28;18282:2;18286:5;18264:17;:28::i;:::-;18303:36;18322:4;18328:2;18332:6;18303:18;:36::i;:::-;18296:43;18124:219;-1:-1:-1;;;;18124:219:2:o;3059:154:5:-;3135:32;:30;:32::i;:::-;3171:38;3193:15;3171:21;:38::i;:::-;3059:154;:::o;3468:171:16:-;3546:22;:20;:22::i;:::-;3572:30;3588:4;3594:7;3572:15;:30::i;:::-;3468:171;;:::o;3264:113:40:-;3324:7;3350:20;:18;:20::i;:::-;3343:27;;3264:113;:::o;2802:258:16:-;2887:4;2883:78;;2927:29;;-1:-1:-1;;;2927:29:16;;;;;;;;;;;2883:78;2964:22;:20;:22::i;:::-;2990:33;3009:4;3015:7;2990:18;:33::i;3387:195:31:-;-1:-1:-1;;;;;1898:6:31;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:31;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:31;:20;-1:-1:-1;;;;;;;;;;;1536:65:28;-1:-1:-1;;;;;1536:65:28;;1457:151;1971:20:31;-1:-1:-1;;;;;1971:30:31;;1963:87;;;;-1:-1:-1;;;1963:87:31;;;;;;;:::i;:::-;3468:36:::1;3486:17;3468;:36::i;:::-;3555:12;::::0;;3565:1:::1;3555:12:::0;;;::::1;::::0;::::1;::::0;;;3514:61:::1;::::0;3536:17;;3555:12;3514:21:::1;:61::i;14779:176:2:-:0;14890:4;1482:19:32;:17;:19::i;:::-;14907:44:2::1;14931:7;14940:10;14907:23;:44::i;2199:75:15:-:0;2239:17;:15;:17::i;:::-;2260:10;:8;:10::i;:::-;2199:75::o;8389:138:2:-;4953:24;2928:16:22;2939:4;2928:10;:16::i;:::-;8474:28:2::1;8492:2;8496:5;8474:17;:28::i;:::-;8506:17;8512:2;8516:6;8506:5;:17::i;9175:195::-:0;5214:24;2928:16:22;2939:4;2928:10;:16::i;:::-;9252:6:2::1;9262:1;9252:11:::0;9248:46:::1;;9272:22;;-1:-1:-1::0;;;9272:22:2::1;;;;;;;;;;;9248:46;9298:37;929:10:49::0;9316:12:2::1;9330:4;9298:17;:37::i;:::-;9339:27;929:10:49::0;9359:6:2::1;9339:5;:27::i;3901:220:31:-:0;-1:-1:-1;;;;;1898:6:31;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:31;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:31;:20;-1:-1:-1;;;;;;;;;;;1536:65:28;-1:-1:-1;;;;;1536:65:28;;1457:151;1971:20:31;-1:-1:-1;;;;;1971:30:31;;1963:87;;;;-1:-1:-1;;;1963:87:31;;;;;;;:::i;:::-;4016:36:::1;4034:17;4016;:36::i;:::-;4062:52;4084:17;4103:4;4109;4062:21;:52::i;3006:131::-:0;3084:7;2324:4;-1:-1:-1;;;;;2333:6:31;2316:23;;2308:92;;;;-1:-1:-1;;;2308:92:31;;13980:2:68;2308:92:31;;;13962:21:68;14019:2;13999:18;;;13992:30;14058:34;14038:18;;;14031:62;14129:26;14109:18;;;14102:54;14173:19;;2308:92:31;13778:420:68;2308:92:31;-1:-1:-1;;;;;;;;;;;;3006:131:31;:::o;3579:310:17:-;3640:6;3650:1;3640:11;3636:56;;3665:22;;-1:-1:-1;;;3665:22:17;;;;;;;;;;;3636:56;3695:22;:20;:22::i;:::-;3726:38;;3757:6;;929:10:49;;3726:38:17;;;;;3787:36;;3769:12;;929:10:49;;3812:6:17;;3769:12;3787:36;3769:12;3787:36;3812:6;929:10:49;3787:36:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3768:55;;;3832:7;3827:59;;3853:28;;-1:-1:-1;;;3853:28:17;;;;;;;;;;;3014:126:40;-1:-1:-1;;;;;3109:14:40;;3083:7;3109:14;;;:7;:14;;;;;929::50;3109:24:40;838:112:50;2518:131:13;2588:29;:27;:29::i;:::-;2621:24;2640:4;;2621:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2621:18:13;;-1:-1:-1;;;2621:24:13:i;1856:71:15:-;1894:17;:15;:17::i;:::-;1915:8;:6;:8::i;4500:861:55:-;4615:13;4642:18;4674:21;4709:15;4738:25;4777:12;4803:27;5066:11;;5081:1;5066:16;;;:39;;;;-1:-1:-1;5086:14:55;;:19;5066:39;5058:73;;;;-1:-1:-1;;;5058:73:55;;14615:2:68;5058:73:55;;;14597:21:68;14654:2;14634:18;;;14627:30;-1:-1:-1;;;14673:18:68;;;14666:51;14734:18;;5058:73:55;14413:345:68;5058:73:55;5193:13;:11;:13::i;:::-;5220:16;:14;:16::i;:::-;5328;;;5312:1;5328:16;;;;;;;;;-1:-1:-1;;;5142:212:55;;;-1:-1:-1;5142:212:55;;-1:-1:-1;5250:13:55;;-1:-1:-1;5285:4:55;;-1:-1:-1;5312:1:55;-1:-1:-1;5328:16:55;-1:-1:-1;5142:212:55;-1:-1:-1;4500:861:55:o;3329:145:22:-;3415:4;3438:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;3438:29:22;;;;;;;;;;;;;;;3329:145::o;2706:102:38:-;2762:13;2794:7;2787:14;;;;;:::i;15769:193:2:-;15892:4;1482:19:32;:17;:19::i;:::-;15909:49:2::1;15933:7;15942:15;15909:23;:49::i;16747:199::-:0;16826:4;16836:37;929:10:49;16854:12:2;850:96:49;16836:37:2;16877:28;16895:2;16899:5;16877:17;:28::i;:::-;16916:26;16931:2;16935:6;16916:14;:26::i;695:319:51:-;763:22;819:4;807:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;797:34;;846:9;841:143;861:15;;;841:143;;;910:63;958:4;965;;970:1;965:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;910:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;910:39:51;;-1:-1:-1;;;910:63:51:i;:::-;897:7;905:1;897:10;;;;;;;;:::i;:::-;;;;;;:76;;;;878:3;;;;;:::i;:::-;;;;841:143;;;;695:319;;;;:::o;1457:25:13:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2988:275:17:-;3076:6;3086:1;3076:11;3072:56;;3101:22;;-1:-1:-1;;;3101:22:17;;;;;;;;;;;3072:56;3131:24;:22;:24::i;:::-;3164:51;;3208:6;;-1:-1:-1;;;;;3164:51:17;;;929:10:49;;3164:51:17;;;;;3219:40;-1:-1:-1;;;;;3219:18:17;;929:10:49;3252:6:17;3219:18;:40::i;12753:229:2:-;1482:19:32;:17;:19::i;:::-;12924:54:2::1;12937:5;12944:7;12953:5;12960:8;12970:1;12973;12976;12924:12;:54::i;:::-;12753:229:::0;;;;;;;:::o;2185:282:16:-;2268:26;;:53;;;;-1:-1:-1;;;;;;2298:23:16;;929:10:49;2298:23:16;2268:53;2264:105;;;2335:29;;-1:-1:-1;;;2335:29:16;;;;;;;;;;;2264:105;2373:22;:20;:22::i;:::-;2399:31;2416:4;2422:7;2399:16;:31::i;7094:653:2:-;3279:19:30;3302:13;;;;;;3301:14;;3347:34;;;;-1:-1:-1;3365:12:30;;3380:1;3365:12;;;;:16;3347:34;3346:108;;;-1:-1:-1;3426:4:30;1713:19:48;:23;;;3387:66:30;;-1:-1:-1;3436:12:30;;;;;:17;3387:66;3325:201;;;;-1:-1:-1;;;3325:201:30;;15895:2:68;3325:201:30;;;15877:21:68;15934:2;15914:18;;;15907:30;15973:34;15953:18;;;15946:62;-1:-1:-1;;;16024:18:68;;;16017:44;16078:19;;3325:201:30;15693:410:68;3325:201:30;3536:12;:16;;-1:-1:-1;;3536:16:30;3551:1;3536:16;;;3562:65;;;;3596:13;:20;;-1:-1:-1;;3596:20:30;;;;;3562:65;-1:-1:-1;;;;;7258:26:2;::::1;::::0;;:50:::1;;-1:-1:-1::0;;;;;;7288:20:2;::::1;::::0;7258:50:::1;:74;;;-1:-1:-1::0;;;;;;7312:20:2;::::1;::::0;7258:74:::1;7254:123;;;7346:26;;-1:-1:-1::0;;;7346:26:2::1;;;;;;;;;;;7254:123;7381:24;:22;:24::i;:::-;7409:28;7422:5;;7409:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;;-1:-1:-1;;7409:28:2::1;::::0;;::::1;;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;;;;;;;;;;;-1:-1:-1;7429:7:2;;-1:-1:-1;7429:7:2;;;;7409:28;::::1;7429:7:::0;;;;7409:28;::::1;;::::0;::::1;::::0;;;;-1:-1:-1;7409:12:2::1;::::0;-1:-1:-1;;;7409:28:2:i:1;:::-;7441:25;7460:5;;7441:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;;-1:-1:-1;7441:18:2::1;::::0;-1:-1:-1;;;7441:25:2:i:1;:::-;7470:18;:16;:18::i;:::-;7492:45;7534:1;7492:33;:45::i;:::-;7541:16;:14;:16::i;:::-;7561:22;;;;;;;;;;;;::::0;:18:::1;:22::i;:::-;7587:14;:12;:14::i;:::-;7605:19;:17;:19::i;:::-;7629:44;2495:4:22;7660:12:2::0;7629:10:::1;:44::i;:::-;7677:31;4953:24;7701:6;7677:10;:31::i;:::-;7712;4379:24;7736:6;7712:10;:31::i;:::-;3651:14:30::0;3647:99;;;3697:5;3681:21;;-1:-1:-1;;3681:21:30;;;3721:14;;-1:-1:-1;3433:36:68;;3721:14:30;;3421:2:68;3406:18;3721:14:30;;;;;;;3647:99;3269:483;7094:653:2;;;;;;;:::o;4324:149:38:-;-1:-1:-1;;;;;4439:18:38;;;4413:7;4439:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4324:149::o;3029:213:22:-;3114:4;-1:-1:-1;;;;;;3137:58:22;;-1:-1:-1;;;3137:58:22;;:98;;-1:-1:-1;;;;;;;;;;1168:51:56;;;3199:36:22;1060:166:56;3768:103:22;3834:30;3845:4;929:10:49;3834::22;:30::i;7793:788:38:-;-1:-1:-1;;;;;7889:18:38;;7881:68;;;;-1:-1:-1;;;7881:68:38;;16509:2:68;7881:68:38;;;16491:21:68;16548:2;16528:18;;;16521:30;16587:34;16567:18;;;16560:62;-1:-1:-1;;;16638:18:68;;;16631:35;16683:19;;7881:68:38;16307:401:68;7881:68:38;-1:-1:-1;;;;;7967:16:38;;7959:64;;;;-1:-1:-1;;;7959:64:38;;16915:2:68;7959:64:38;;;16897:21:68;16954:2;16934:18;;;16927:30;16993:34;16973:18;;;16966:62;-1:-1:-1;;;17044:18:68;;;17037:33;17087:19;;7959:64:38;16713:399:68;7959:64:38;8034:38;8055:4;8061:2;8065:6;8034:20;:38::i;:::-;-1:-1:-1;;;;;8105:15:38;;8083:19;8105:15;;;:9;:15;;;;;;8138:21;;;;8130:72;;;;-1:-1:-1;;;8130:72:38;;17319:2:68;8130:72:38;;;17301:21:68;17358:2;17338:18;;;17331:30;17397:34;17377:18;;;17370:62;-1:-1:-1;;;17448:18:68;;;17441:36;17494:19;;8130:72:38;17117:402:68;8130:72:38;-1:-1:-1;;;;;8236:15:38;;;;;;;:9;:15;;;;;;8254:20;;;8236:38;;8451:13;;;;;;;;;;:23;;;;;;8500:26;;;;;;8268:6;1855:25:68;;1843:2;1828:18;;1709:177;8500:26:38;;;;;;;;8537:37;7871:710;7793:788;;;:::o;2010:106:32:-;1928:7;;;;2079:9;2071:38;;;;-1:-1:-1;;;2071:38:32;;17726:2:68;2071:38:32;;;17708:21:68;17765:2;17745:18;;;17738:30;-1:-1:-1;;;17784:18:68;;;17777:46;17840:18;;2071:38:32;17524:340:68;4781:197:38;4864:4;929:10:49;4918:32:38;929:10:49;4934:7:38;4943:6;4918:8;:32::i;:::-;-1:-1:-1;4967:4:38;;4781:197;-1:-1:-1;;;4781:197:38:o;23160:335:2:-;23257:14;;-1:-1:-1;;;;;23257:14:2;23249:37;23245:247;;23298:14;;-1:-1:-1;;;;;23298:14:2;:24;23323:7;929:10:49;1003:14;;23298:59:2;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;23293:195;;23369:8;23365:118;;;23393:27;;-1:-1:-1;;;23393:27:2;;-1:-1:-1;;;;;11439:32:68;;23393:27:2;;;11421:51:68;11394:18;;23393:27:2;11251:227:68;23365:118:2;23447:29;;-1:-1:-1;;;23447:29:2;;-1:-1:-1;;;;;11439:32:68;;23447:29:2;;;11421:51:68;11394:18;;23447:29:2;11251:227:68;5540:256:38;5637:4;929:10:49;5693:38:38;5709:4;929:10:49;5724:6:38;5693:15;:38::i;:::-;5741:27;5751:4;5757:2;5761:6;5741:9;:27::i;:::-;-1:-1:-1;5785:4:38;;5540:256;-1:-1:-1;;;;5540:256:38:o;22355:114:2:-;1482:19:32;:17;:19::i;:::-;4684:32:2::1;2928:16:22;2939:4;2928:10;:16::i;3565:410:5:-:0;-1:-1:-1;;;;;3650:29:5;;;;;;:127;;-1:-1:-1;3688:88:5;;-1:-1:-1;;;3688:88:5;;-1:-1:-1;;;3688:88:5;;;18013:52:68;-1:-1:-1;;;;;3688:53:5;;;;;17986:18:68;;3688:88:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3687:89;3650:127;3642:190;;;3794:33;;-1:-1:-1;;;3794:33:5;;;;;;;;;;;3642:190;3885:14;;3841:77;;-1:-1:-1;;;;;3841:77:5;;;;3885:14;;929:10:49;;3841:77:5;;;;;3922:14;:49;;-1:-1:-1;;;;;;3922:49:5;-1:-1:-1;;;;;3922:49:5;;;;;;;;;;3565:410::o;22790:74:2:-;1482:19:32;:17;:19::i;5259:145:22:-;4908:7;4934:12;;;:6;:12;;;;;:22;;;2928:16;2939:4;2928:10;:16::i;:::-;5372:25:::1;5383:4;5389:7;5372:10;:25::i;3304:109:55:-:0;3357:7;3383:23;:21;:23::i;6368:214:22:-;-1:-1:-1;;;;;6463:23:22;;929:10:49;6463:23:22;6455:83;;;;-1:-1:-1;;;6455:83:22;;18278:2:68;6455:83:22;;;18260:21:68;18317:2;18297:18;;;18290:30;18356:34;18336:18;;;18329:62;-1:-1:-1;;;18407:18:68;;;18400:45;18462:19;;6455:83:22;18076:411:68;6455:83:22;6549:26;6561:4;6567:7;6549:11;:26::i;20157:106:2:-;4109:26;2928:16:22;2939:4;2928:10;:16::i;2820:944:28:-;971:66;3236:59;;;3232:526;;;3311:37;3330:17;3311:18;:37::i;3232:526::-;3412:17;-1:-1:-1;;;;;3383:61:28;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3383:63:28;;;;;;;;-1:-1:-1;;3383:63:28;;;;;;;;;;;;:::i;:::-;;;3379:302;;3610:56;;-1:-1:-1;;;3610:56:28;;18883:2:68;3610:56:28;;;18865:21:68;18922:2;18902:18;;;18895:30;18961:34;18941:18;;;18934:62;-1:-1:-1;;;19012:18:68;;;19005:44;19066:19;;3610:56:28;18681:410:68;3379:302:28;-1:-1:-1;;;;;;;;;;;3496:28:28;;3488:82;;;;-1:-1:-1;;;3488:82:28;;19298:2:68;3488:82:28;;;19280:21:68;19337:2;19317:18;;;19310:30;19376:34;19356:18;;;19349:62;-1:-1:-1;;;19427:18:68;;;19420:39;19476:19;;3488:82:28;19096:405:68;3488:82:28;3447:138;3694:53;3712:17;3731:4;3737:9;3694:17;:53::i;6191:234:38:-;6279:4;929:10:49;6333:64:38;929:10:49;6349:7:38;6386:10;6358:25;929:10:49;6349:7:38;6358:9;:25::i;:::-;:38;;;;:::i;:::-;6333:8;:64::i;21933:77:2:-;4379:24;2928:16:22;2939:4;2928:10;:16::i;2676:117:32:-;1729:16;:14;:16::i;:::-;2734:7:::1;:15:::0;;-1:-1:-1;;2734:15:32::1;::::0;;2764:22:::1;929:10:49::0;2773:12:32::1;2764:22;::::0;-1:-1:-1;;;;;11439:32:68;;;11421:51;;11409:2;11394:18;2764:22:32::1;;;;;;;2676:117::o:0;8857:535:38:-;-1:-1:-1;;;;;8940:21:38;;8932:65;;;;-1:-1:-1;;;8932:65:38;;19838:2:68;8932:65:38;;;19820:21:68;19877:2;19857:18;;;19850:30;19916:33;19896:18;;;19889:61;19967:18;;8932:65:38;19636:355:68;8932:65:38;9008:49;9037:1;9041:7;9050:6;9008:20;:49::i;:::-;9084:6;9068:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;9236:18:38;;;;;;:9;:18;;;;;;;;:28;;;;;;9289:37;1855:25:68;;;9289:37:38;;1828:18:68;9289:37:38;;;;;;;3468:171:16;;:::o;9712:659:38:-;-1:-1:-1;;;;;9795:21:38;;9787:67;;;;-1:-1:-1;;;9787:67:38;;20198:2:68;9787:67:38;;;20180:21:68;20237:2;20217:18;;;20210:30;20276:34;20256:18;;;20249:62;-1:-1:-1;;;20327:18:68;;;20320:31;20368:19;;9787:67:38;19996:397:68;9787:67:38;9865:49;9886:7;9903:1;9907:6;9865:20;:49::i;:::-;-1:-1:-1;;;;;9950:18:38;;9925:22;9950:18;;;:9;:18;;;;;;9986:24;;;;9978:71;;;;-1:-1:-1;;;9978:71:38;;20600:2:68;9978:71:38;;;20582:21:68;20639:2;20619:18;;;20612:30;20678:34;20658:18;;;20651:62;-1:-1:-1;;;20729:18:68;;;20722:32;20771:19;;9978:71:38;20398:398:68;9978:71:38;-1:-1:-1;;;;;10083:18:38;;;;;;:9;:18;;;;;;;;10104:23;;;10083:44;;10220:12;:22;;;;;;;10268:37;1855:25:68;;;10083:18:38;;;10268:37;;1828:18:68;10268:37:38;;;;;;;10228:454:2;;;:::o;21052:97::-;1482:19:32;:17;:19::i;:::-;5765:25:2::1;2928:16:22;2939:4;2928:10;:16::i;2877:151:13:-:0;929:10:49;-1:-1:-1;;;;;2951:51:13;;2984:11;2997:4;2951:51;;;;;;;:::i;:::-;;;;;;;;3006:11;:18;3020:4;3006:11;:18;:::i;2429:115:32:-;1482:19;:17;:19::i;:::-;2488:7:::1;:14:::0;;-1:-1:-1;;2488:14:32::1;2498:4;2488:14;::::0;;2517:20:::1;2524:12;929:10:49::0;;850:96;5585:98:55;5639:13;5671:5;5664:12;;;;;:::i;5910:104::-;5967:13;5999:8;5992:15;;;;;:::i;6912:427:38:-;7005:4;929:10:49;7005:4:38;7086:25;929:10:49;7103:7:38;7086:9;:25::i;:::-;7059:52;;7149:15;7129:16;:35;;7121:85;;;;-1:-1:-1;;;7121:85:38;;24314:2:68;7121:85:38;;;24296:21:68;24353:2;24333:18;;;24326:30;24392:34;24372:18;;;24365:62;-1:-1:-1;;;24443:18:68;;;24436:35;24488:19;;7121:85:38;24112:401:68;7121:85:38;7240:60;7249:5;7256:7;7284:15;7265:16;:34;7240:8;:60::i;4077:189::-;4156:4;929:10:49;4210:28:38;929:10:49;4227:2:38;4231:6;4210:9;:28::i;6685:198:48:-;6768:12;6799:77;6820:6;6828:4;6799:77;;;;;;;;;;;;;;;;;:20;:77::i;996:186:43:-;1116:58;;;-1:-1:-1;;;;;24710:32:68;;1116:58:43;;;24692:51:68;24759:18;;;;24752:34;;;1116:58:43;;;;;;;;;;24665:18:68;;;;1116:58:43;;;;;;;;-1:-1:-1;;;;;1116:58:43;-1:-1:-1;;;1116:58:43;;;1089:86;;1109:5;;1089:19;:86::i;2316:637:40:-;2551:8;2532:15;:27;;2524:69;;;;-1:-1:-1;;;2524:69:40;;24999:2:68;2524:69:40;;;24981:21:68;25038:2;25018:18;;;25011:30;25077:31;25057:18;;;25050:59;25126:18;;2524:69:40;24797:353:68;2524:69:40;2604:18;1351:95;2664:5;2671:7;2680:5;2687:16;2697:5;2687:9;:16::i;:::-;2635:79;;;;;;25442:25:68;;;;-1:-1:-1;;;;;25541:15:68;;;25521:18;;;25514:43;25593:15;;;;25573:18;;;25566:43;25625:18;;;25618:34;25668:19;;;25661:35;25712:19;;;25705:35;;;25414:19;;2635:79:40;;;;;;;;;;;;2625:90;;;;;;2604:111;;2726:12;2741:28;2758:10;2741:16;:28::i;:::-;2726:43;;2780:14;2797:39;2822:4;2828:1;2831;2834;2797:24;:39::i;:::-;2780:56;;2864:5;-1:-1:-1;;;;;2854:15:40;:6;-1:-1:-1;;;;;2854:15:40;;2846:58;;;;-1:-1:-1;;;2846:58:40;;25953:2:68;2846:58:40;;;25935:21:68;25992:2;25972:18;;;25965:30;26031:32;26011:18;;;26004:60;26081:18;;2846:58:40;25751:354:68;2846:58:40;2915:31;2924:5;2931:7;2940:5;2915:8;:31::i;:::-;2514:439;;;2316:637;;;;;;;:::o;5684:147:22:-;4908:7;4934:12;;;:6;:12;;;;;:22;;;2928:16;2939:4;2928:10;:16::i;:::-;5798:26:::1;5810:4;5816:7;5798:11;:26::i;1042:67:31:-:0;5374:13:30;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:30;;;;;;;:::i;2118:147:38:-;5374:13:30;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:30;;;;;;;:::i;:::-;2220:38:38::1;2243:5;2250:7;2220:22;:38::i;2043:125:40:-:0;5374:13:30;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:30;;;;;;;:::i;:::-;2127:34:40::1;2151:4;2127:34;;;;;;;;;;;;;-1:-1:-1::0;;;2127:34:40::1;;::::0;:23:::1;:34::i;2584:140:5:-:0;5374:13:30;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:30;;;;;;;:::i;2184:106:13:-;5374:13:30;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:30;;;;;;;:::i;:::-;2262:24:13::1;2281:4;2262:18;:24::i;1514:75:15:-:0;5374:13:30;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:30;;;;;;;:::i;:::-;1568:17:15::1;:15;:17::i;1686:85:16:-:0;5374:13:30;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:30;;;;;;;:::i;:::-;1745:22:16::1;:20;:22::i;7917:233:22:-:0;8000:22;8008:4;8014:7;8000;:22::i;:::-;7995:149;;8038:12;;;;:6;:12;;;;;;;;-1:-1:-1;;;;;8038:29:22;;;;;;;;;:36;;-1:-1:-1;;8038:36:22;8070:4;8038:36;;;8120:12;929:10:49;;850:96;8120:12:22;-1:-1:-1;;;;;8093:40:22;8111:7;-1:-1:-1;;;;;8093:40:22;8105:4;8093:40;;;;;;;;;;7917:233;;:::o;4152:501::-;4240:22;4248:4;4254:7;4240;:22::i;:::-;4235:412;;4423:39;4454:7;4423:30;:39::i;:::-;4533:49;4572:4;4579:2;4533:30;:49::i;:::-;4330:274;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4330:274:22;;;;;;;;;;-1:-1:-1;;;4278:358:22;;;;;;;:::i;19623:164:2:-;1482:19:32;:17;:19::i;10794:340:38:-;-1:-1:-1;;;;;10895:19:38;;10887:68;;;;-1:-1:-1;;;10887:68:38;;27541:2:68;10887:68:38;;;27523:21:68;27580:2;27560:18;;;27553:30;27619:34;27599:18;;;27592:62;-1:-1:-1;;;27670:18:68;;;27663:34;27714:19;;10887:68:38;27339:400:68;10887:68:38;-1:-1:-1;;;;;10973:21:38;;10965:68;;;;-1:-1:-1;;;10965:68:38;;27946:2:68;10965:68:38;;;27928:21:68;27985:2;27965:18;;;27958:30;28024:34;28004:18;;;27997:62;-1:-1:-1;;;28075:18:68;;;28068:32;28117:19;;10965:68:38;27744:398:68;10965:68:38;-1:-1:-1;;;;;11044:18:38;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;11095:32;;1855:25:68;;;11095:32:38;;1828:18:68;11095:32:38;;;;;;;10794:340;;;:::o;11415:411::-;11515:24;11542:25;11552:5;11559:7;11542:9;:25::i;:::-;11515:52;;-1:-1:-1;;11581:16:38;:37;11577:243;;11662:6;11642:16;:26;;11634:68;;;;-1:-1:-1;;;11634:68:38;;28349:2:68;11634:68:38;;;28331:21:68;28388:2;28368:18;;;28361:30;28427:31;28407:18;;;28400:59;28476:18;;11634:68:38;28147:353:68;11634:68:38;11744:51;11753:5;11760:7;11788:6;11769:16;:25;11744:8;:51::i;3419:192:55:-;3474:7;1913:95;3533:17;:15;:17::i;:::-;3552:20;:18;:20::i;:::-;3510:93;;;;;;28764:25:68;;;;28805:18;;28798:34;;;;28848:18;;;28841:34;3574:13:55;28891:18:68;;;28884:34;3597:4:55;28934:19:68;;;28927:61;28736:19;;3510:93:55;;;;;;;;;;;;3500:104;;;;;;3493:111;;3419:192;:::o;8321:234:22:-;8404:22;8412:4;8418:7;8404;:22::i;:::-;8400:149;;;8474:5;8442:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;8442:29:22;;;;;;;;;;:37;;-1:-1:-1;;8442:37:22;;;8498:40;929:10:49;;8442:12:22;;8498:40;;8474:5;8498:40;8321:234;;:::o;1699:281:28:-;-1:-1:-1;;;;;1713:19:48;;;1772:106:28;;;;-1:-1:-1;;;1772:106:28;;29201:2:68;1772:106:28;;;29183:21:68;29240:2;29220:18;;;29213:30;29279:34;29259:18;;;29252:62;-1:-1:-1;;;29330:18:68;;;29323:43;29383:19;;1772:106:28;28999:409:68;1772:106:28;-1:-1:-1;;;;;;;;;;;1888:85:28;;-1:-1:-1;;;;;;1888:85:28;-1:-1:-1;;;;;1888:85:28;;;;;;;;;;1699:281::o;2372:276::-;2480:29;2491:17;2480:10;:29::i;:::-;2537:1;2523:4;:11;:15;:28;;;;2542:9;2523:28;2519:123;;;2567:64;2607:17;2626:4;2567:39;:64::i;2188:106:32:-;1928:7;;;;2246:41;;;;-1:-1:-1;;;2246:41:32;;29615:2:68;2246:41:32;;;29597:21:68;29654:2;29634:18;;;29627:30;-1:-1:-1;;;29673:18:68;;;29666:50;29733:18;;2246:41:32;29413:344:68;7069:325:48;7210:12;7235;7249:23;7276:6;-1:-1:-1;;;;;7276:19:48;7296:4;7276:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7234:67;;;;7318:69;7345:6;7353:7;7362:10;7374:12;7318:26;:69::i;:::-;7311:76;7069:325;-1:-1:-1;;;;;;7069:325:48:o;5328:653:43:-;5758:23;5784:69;5812:4;5784:69;;;;;;;;;;;;;;;;;5792:5;-1:-1:-1;;;;;5784:27:43;;;:69;;;;;:::i;:::-;5758:95;;5871:10;:17;5892:1;5871:22;:56;;;;5908:10;5897:30;;;;;;;;;;;;:::i;:::-;5863:111;;;;-1:-1:-1;;;5863:111:43;;30256:2:68;5863:111:43;;;30238:21:68;30295:2;30275:18;;;30268:30;30334:34;30314:18;;;30307:62;-1:-1:-1;;;30385:18:68;;;30378:40;30435:19;;5863:111:43;30054:406:68;3508:214:40;-1:-1:-1;;;;;3639:14:40;;3568:15;3639:14;;;:7;:14;;;;;929::50;;1061:1;1043:19;;;;929:14;3698:17:40;3585:137;3508:214;;;:::o;4236:176:55:-;4313:7;4339:66;4372:20;:18;:20::i;:::-;4394:10;8569:4:54;8563:11;-1:-1:-1;;;8587:23:54;;8639:4;8630:14;;8623:39;;;;8691:4;8682:14;;8675:34;8745:4;8730:20;;;8369:397;6620:232;6705:7;6725:17;6744:18;6766:25;6777:4;6783:1;6786;6789;6766:10;:25::i;:::-;6724:67;;;;6801:18;6813:5;6801:11;:18::i;:::-;-1:-1:-1;6836:9:54;6620:232;-1:-1:-1;;;;;6620:232:54:o;2271:159:38:-;5374:13:30;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:30;;;;;;;:::i;:::-;2383:5:38::1;:13;2391:5:::0;2383;:13:::1;:::i;:::-;-1:-1:-1::0;2406:7:38::1;:17;2416:7:::0;2406;:17:::1;:::i;2951:267:55:-:0;5374:13:30;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:30;;;;;;;:::i;:::-;3063:5:55::1;:12;3071:4:::0;3063:5;:12:::1;:::i;:::-;-1:-1:-1::0;3085:8:55::1;:18;3096:7:::0;3085:8;:18:::1;:::i;:::-;-1:-1:-1::0;;3182:1:55::1;3168:11;:15:::0;;;3193:14:::1;:18:::0;-1:-1:-1;2951:267:55:o;1063:97:32:-;5374:13:30;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:30;;;;;;;:::i;:::-;1126:27:32::1;:25;:27::i;2473:149:53:-:0;2531:13;2563:52;-1:-1:-1;;;;;2575:22:53;;376:2;1884:437;1959:13;1984:19;2016:10;2020:6;2016:1;:10;:::i;:::-;:14;;2029:1;2016:14;:::i;:::-;2006:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2006:25:53;;1984:47;;-1:-1:-1;;;2041:6:53;2048:1;2041:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;2041:15:53;;;;;;;;;-1:-1:-1;;;2066:6:53;2073:1;2066:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;2066:15:53;;;;;;;;-1:-1:-1;2096:9:53;2108:10;2112:6;2108:1;:10;:::i;:::-;:14;;2121:1;2108:14;:::i;:::-;2096:26;;2091:128;2128:1;2124;:5;2091:128;;;-1:-1:-1;;;2171:5:53;2179:3;2171:11;2162:21;;;;;;;:::i;:::-;;;;2150:6;2157:1;2150:9;;;;;;;;:::i;:::-;;;;:33;-1:-1:-1;;;;;2150:33:53;;;;;;;;-1:-1:-1;2207:1:53;2197:11;;;;;2131:3;;;:::i;:::-;;;2091:128;;;-1:-1:-1;2236:10:53;;2228:55;;;;-1:-1:-1;;;2228:55:53;;30981:2:68;2228:55:53;;;30963:21:68;;;31000:18;;;30993:30;31059:34;31039:18;;;31032:62;31111:18;;2228:55:53;30779:356:68;6229:630:55;6279:7;6298:18;6319:13;:11;:13::i;:::-;6346:18;;6298:34;;-1:-1:-1;6346:22:55;6342:511;;6391:22;;;;;;;;6229:630;-1:-1:-1;6229:630:55:o;6342:511::-;6688:11;;6717:15;;6713:130;;6759:10;6229:630;-1:-1:-1;;6229:630:55:o;6713:130::-;6815:13;6808:20;;;;6229:630;:::o;7080:666::-;7133:7;7152:21;7176:16;:14;:16::i;:::-;7206:21;;7152:40;;-1:-1:-1;7206:25:55;7202:538;;7254:25;;;;;;;;7080:666;-1:-1:-1;7080:666:55:o;7202:538::-;7566:14;;7598:18;;7594:136;;7643:13;7080:666;-1:-1:-1;;7080:666:55:o;2086:152:28:-;2152:37;2171:17;2152:18;:37::i;:::-;2204:27;;-1:-1:-1;;;;;2204:27:28;;;;;;;;2086:152;:::o;7682:628:48:-;7862:12;7890:7;7886:418;;;7917:10;:17;7938:1;7917:22;7913:286;;-1:-1:-1;;;;;1713:19:48;;;8124:60;;;;-1:-1:-1;;;8124:60:48;;31342:2:68;8124:60:48;;;31324:21:68;31381:2;31361:18;;;31354:30;31420:31;31400:18;;;31393:59;31469:18;;8124:60:48;31140:353:68;8124:60:48;-1:-1:-1;8219:10:48;8212:17;;7886:418;8260:33;8268:10;8280:12;8260:7;:33::i;4119:223::-;4252:12;4283:52;4305:6;4313:4;4319:1;4322:12;4283:21;:52::i;5031:1456:54:-;5119:7;;6043:66;6030:79;;6026:161;;;-1:-1:-1;6141:1:54;;-1:-1:-1;6145:30:54;6125:51;;6026:161;6298:24;;;6281:14;6298:24;;;;;;;;;31725:25:68;;;31798:4;31786:17;;31766:18;;;31759:45;;;;31820:18;;;31813:34;;;31863:18;;;31856:34;;;6298:24:54;;31697:19:68;;6298:24:54;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6298:24:54;;-1:-1:-1;;6298:24:54;;;-1:-1:-1;;;;;;;6336:20:54;;6332:101;;6388:1;6392:29;6372:50;;;;;;;6332:101;6451:6;-1:-1:-1;6459:20:54;;-1:-1:-1;5031:1456:54;;;;;;;;:::o;592:511::-;669:20;660:5;:29;;;;;;;;:::i;:::-;;656:441;;592:511;:::o;656:441::-;765:29;756:5;:38;;;;;;;;:::i;:::-;;752:345;;810:34;;-1:-1:-1;;;810:34:54;;32235:2:68;810:34:54;;;32217:21:68;32274:2;32254:18;;;32247:30;32313:26;32293:18;;;32286:54;32357:18;;810:34:54;32033:348:68;752:345:54;874:35;865:5;:44;;;;;;;;:::i;:::-;;861:236;;925:41;;-1:-1:-1;;;925:41:54;;32588:2:68;925:41:54;;;32570:21:68;32627:2;32607:18;;;32600:30;32666:33;32646:18;;;32639:61;32717:18;;925:41:54;32386:355:68;861:236:54;996:30;987:5;:39;;;;;;;;:::i;:::-;;983:114;;1042:44;;-1:-1:-1;;;1042:44:54;;32948:2:68;1042:44:54;;;32930:21:68;32987:2;32967:18;;;32960:30;33026:34;33006:18;;;32999:62;-1:-1:-1;;;33077:18:68;;;33070:32;33119:19;;1042:44:54;32746:398:68;1166:95:32;5374:13:30;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:30;;;;;;;:::i;:::-;1239:7:32::1;:15:::0;;-1:-1:-1;;1239:15:32::1;::::0;;1166:95::o;8832:540:48:-;8991:17;;:21;8987:379;;9219:10;9213:17;9275:15;9262:10;9258:2;9254:19;9247:44;8987:379;9342:12;9335:20;;-1:-1:-1;;;9335:20:48;;;;;;;;:::i;5176:446::-;5341:12;5398:5;5373:21;:30;;5365:81;;;;-1:-1:-1;;;5365:81:48;;33351:2:68;5365:81:48;;;33333:21:68;33390:2;33370:18;;;33363:30;33429:34;33409:18;;;33402:62;-1:-1:-1;;;33480:18:68;;;33473:36;33526:19;;5365:81:48;33149:402:68;5365:81:48;5457:12;5471:23;5498:6;-1:-1:-1;;;;;5498:11:48;5517:5;5524:4;5498:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5456:73;;;;5546:69;5573:6;5581:7;5590:10;5602:12;5546:26;:69::i;:::-;5539:76;5176:446;-1:-1:-1;;;;;;;5176:446:48:o;14:286:68:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:68;;209:43;;199:71;;266:1;263;256:12;497:131;-1:-1:-1;;;;;572:31:68;;562:42;;552:70;;618:1;615;608:12;633:315;701:6;709;762:2;750:9;741:7;737:23;733:32;730:52;;;778:1;775;768:12;730:52;817:9;804:23;836:31;861:5;836:31;:::i;:::-;886:5;938:2;923:18;;;;910:32;;-1:-1:-1;;;633:315:68:o;953:250::-;1038:1;1048:113;1062:6;1059:1;1056:13;1048:113;;;1138:11;;;1132:18;1119:11;;;1112:39;1084:2;1077:10;1048:113;;;-1:-1:-1;;1195:1:68;1177:16;;1170:27;953:250::o;1208:271::-;1250:3;1288:5;1282:12;1315:6;1310:3;1303:19;1331:76;1400:6;1393:4;1388:3;1384:14;1377:4;1370:5;1366:16;1331:76;:::i;:::-;1461:2;1440:15;-1:-1:-1;;1436:29:68;1427:39;;;;1468:4;1423:50;;1208:271;-1:-1:-1;;1208:271:68:o;1484:220::-;1633:2;1622:9;1615:21;1596:4;1653:45;1694:2;1683:9;1679:18;1671:6;1653:45;:::i;2073:456::-;2150:6;2158;2166;2219:2;2207:9;2198:7;2194:23;2190:32;2187:52;;;2235:1;2232;2225:12;2187:52;2274:9;2261:23;2293:31;2318:5;2293:31;:::i;:::-;2343:5;-1:-1:-1;2400:2:68;2385:18;;2372:32;2413:33;2372:32;2413:33;:::i;:::-;2073:456;;2465:7;;-1:-1:-1;;;2519:2:68;2504:18;;;;2491:32;;2073:456::o;2534:180::-;2593:6;2646:2;2634:9;2625:7;2621:23;2617:32;2614:52;;;2662:1;2659;2652:12;2614:52;-1:-1:-1;2685:23:68;;2534:180;-1:-1:-1;2534:180:68:o;2719:247::-;2778:6;2831:2;2819:9;2810:7;2806:23;2802:32;2799:52;;;2847:1;2844;2837:12;2799:52;2886:9;2873:23;2905:31;2930:5;2905:31;:::i;2971:315::-;3039:6;3047;3100:2;3088:9;3079:7;3075:23;3071:32;3068:52;;;3116:1;3113;3106:12;3068:52;3152:9;3139:23;3129:33;;3212:2;3201:9;3197:18;3184:32;3225:31;3250:5;3225:31;:::i;:::-;3275:5;3265:15;;;2971:315;;;;;:::o;3665:127::-;3726:10;3721:3;3717:20;3714:1;3707:31;3757:4;3754:1;3747:15;3781:4;3778:1;3771:15;3797:1056;3874:6;3882;3935:2;3923:9;3914:7;3910:23;3906:32;3903:52;;;3951:1;3948;3941:12;3903:52;3990:9;3977:23;4009:31;4034:5;4009:31;:::i;:::-;4059:5;-1:-1:-1;4115:2:68;4100:18;;4087:32;4138:18;4168:14;;;4165:34;;;4195:1;4192;4185:12;4165:34;4233:6;4222:9;4218:22;4208:32;;4278:7;4271:4;4267:2;4263:13;4259:27;4249:55;;4300:1;4297;4290:12;4249:55;4336:2;4323:16;4358:2;4354;4351:10;4348:36;;;4364:18;;:::i;:::-;4439:2;4433:9;4407:2;4493:13;;-1:-1:-1;;4489:22:68;;;4513:2;4485:31;4481:40;4469:53;;;4537:18;;;4557:22;;;4534:46;4531:72;;;4583:18;;:::i;:::-;4623:10;4619:2;4612:22;4658:2;4650:6;4643:18;4698:7;4693:2;4688;4684;4680:11;4676:20;4673:33;4670:53;;;4719:1;4716;4709:12;4670:53;4775:2;4770;4766;4762:11;4757:2;4749:6;4745:15;4732:46;4820:1;4815:2;4810;4802:6;4798:15;4794:24;4787:35;4841:6;4831:16;;;;;;;3797:1056;;;;;:::o;5063:348::-;5115:8;5125:6;5179:3;5172:4;5164:6;5160:17;5156:27;5146:55;;5197:1;5194;5187:12;5146:55;-1:-1:-1;5220:20:68;;5263:18;5252:30;;5249:50;;;5295:1;5292;5285:12;5249:50;5332:4;5324:6;5320:17;5308:29;;5384:3;5377:4;5368:6;5360;5356:19;5352:30;5349:39;5346:59;;;5401:1;5398;5391:12;5346:59;5063:348;;;;;:::o;5416:411::-;5487:6;5495;5548:2;5536:9;5527:7;5523:23;5519:32;5516:52;;;5564:1;5561;5554:12;5516:52;5604:9;5591:23;5637:18;5629:6;5626:30;5623:50;;;5669:1;5666;5659:12;5623:50;5708:59;5759:7;5750:6;5739:9;5735:22;5708:59;:::i;:::-;5786:8;;5682:85;;-1:-1:-1;5416:411:68;-1:-1:-1;;;;5416:411:68:o;5832:1259::-;6238:3;6233;6229:13;6221:6;6217:26;6206:9;6199:45;6180:4;6263:2;6301:3;6296:2;6285:9;6281:18;6274:31;6328:46;6369:3;6358:9;6354:19;6346:6;6328:46;:::i;:::-;6422:9;6414:6;6410:22;6405:2;6394:9;6390:18;6383:50;6456:33;6482:6;6474;6456:33;:::i;:::-;6520:2;6505:18;;6498:34;;;-1:-1:-1;;;;;6569:32:68;;6563:3;6548:19;;6541:61;6589:3;6618:19;;6611:35;;;6683:22;;;6677:3;6662:19;;6655:51;6755:13;;6777:22;;;6853:15;;;;-1:-1:-1;6815:15:68;;;;-1:-1:-1;6896:169:68;6910:6;6907:1;6904:13;6896:169;;;6971:13;;6959:26;;7040:15;;;;7005:12;;;;6932:1;6925:9;6896:169;;;-1:-1:-1;7082:3:68;;5832:1259;-1:-1:-1;;;;;;;;;;;;5832:1259:68:o;7096:626::-;7193:6;7201;7254:2;7242:9;7233:7;7229:23;7225:32;7222:52;;;7270:1;7267;7260:12;7222:52;7310:9;7297:23;7339:18;7380:2;7372:6;7369:14;7366:34;;;7396:1;7393;7386:12;7366:34;7434:6;7423:9;7419:22;7409:32;;7479:7;7472:4;7468:2;7464:13;7460:27;7450:55;;7501:1;7498;7491:12;7450:55;7541:2;7528:16;7567:2;7559:6;7556:14;7553:34;;;7583:1;7580;7573:12;7553:34;7636:7;7631:2;7621:6;7618:1;7614:14;7610:2;7606:23;7602:32;7599:45;7596:65;;;7657:1;7654;7647:12;7596:65;7688:2;7680:11;;;;;7710:6;;-1:-1:-1;7096:626:68;;-1:-1:-1;;;;7096:626:68:o;7727:801::-;7887:4;7916:2;7956;7945:9;7941:18;7986:2;7975:9;7968:21;8009:6;8044;8038:13;8075:6;8067;8060:22;8113:2;8102:9;8098:18;8091:25;;8175:2;8165:6;8162:1;8158:14;8147:9;8143:30;8139:39;8125:53;;8213:2;8205:6;8201:15;8234:1;8244:255;8258:6;8255:1;8252:13;8244:255;;;8351:2;8347:7;8335:9;8327:6;8323:22;8319:36;8314:3;8307:49;8379:40;8412:6;8403;8397:13;8379:40;:::i;:::-;8369:50;-1:-1:-1;8477:12:68;;;;8442:15;;;;8280:1;8273:9;8244:255;;;-1:-1:-1;8516:6:68;;7727:801;-1:-1:-1;;;;;;;7727:801:68:o;8879:829::-;8990:6;8998;9006;9014;9022;9030;9038;9091:3;9079:9;9070:7;9066:23;9062:33;9059:53;;;9108:1;9105;9098:12;9059:53;9147:9;9134:23;9166:31;9191:5;9166:31;:::i;:::-;9216:5;-1:-1:-1;9273:2:68;9258:18;;9245:32;9286:33;9245:32;9286:33;:::i;:::-;9338:7;-1:-1:-1;9392:2:68;9377:18;;9364:32;;-1:-1:-1;9443:2:68;9428:18;;9415:32;;-1:-1:-1;9499:3:68;9484:19;;9471:33;9548:4;9535:18;;9523:31;;9513:59;;9568:1;9565;9558:12;9513:59;8879:829;;;;-1:-1:-1;8879:829:68;;;;9591:7;9645:3;9630:19;;9617:33;;-1:-1:-1;9697:3:68;9682:19;;;9669:33;;8879:829;-1:-1:-1;;8879:829:68:o;9713:1140::-;9832:6;9840;9848;9856;9864;9872;9880;9933:3;9921:9;9912:7;9908:23;9904:33;9901:53;;;9950:1;9947;9940:12;9901:53;9990:9;9977:23;10019:18;10060:2;10052:6;10049:14;10046:34;;;10076:1;10073;10066:12;10046:34;10115:59;10166:7;10157:6;10146:9;10142:22;10115:59;:::i;:::-;10193:8;;-1:-1:-1;10089:85:68;-1:-1:-1;10281:2:68;10266:18;;10253:32;;-1:-1:-1;10297:16:68;;;10294:36;;;10326:1;10323;10316:12;10294:36;;10365:61;10418:7;10407:8;10396:9;10392:24;10365:61;:::i;:::-;10445:8;;-1:-1:-1;10339:87:68;-1:-1:-1;;10530:2:68;10515:18;;10502:32;10543:31;10502:32;10543:31;:::i;:::-;10593:5;-1:-1:-1;10650:2:68;10635:18;;10622:32;10663:33;10622:32;10663:33;:::i;:::-;10715:7;-1:-1:-1;10774:3:68;10759:19;;10746:33;10788;10746;10788;:::i;:::-;10840:7;10830:17;;;9713:1140;;;;;;;;;;:::o;10858:388::-;10926:6;10934;10987:2;10975:9;10966:7;10962:23;10958:32;10955:52;;;11003:1;11000;10993:12;10955:52;11042:9;11029:23;11061:31;11086:5;11061:31;:::i;:::-;11111:5;-1:-1:-1;11168:2:68;11153:18;;11140:32;11181:33;11140:32;11181:33;:::i;11483:589::-;-1:-1:-1;;;;;11734:15:68;;;11716:34;;11786:15;;11781:2;11766:18;;11759:43;11838:2;11833;11818:18;;11811:30;;;11857:18;;11850:34;;;11659:4;11877:6;11927;11921:3;11906:19;;11893:49;11992:1;11986:3;11977:6;11966:9;11962:22;11958:32;11951:43;12062:3;12055:2;12051:7;12046:2;12038:6;12034:15;12030:29;12019:9;12015:45;12011:55;12003:63;;11483:589;;;;;;;:::o;12077:277::-;12144:6;12197:2;12185:9;12176:7;12172:23;12168:32;12165:52;;;12213:1;12210;12203:12;12165:52;12245:9;12239:16;12298:5;12291:13;12284:21;12277:5;12274:32;12264:60;;12320:1;12317;12310:12;12567:380;12646:1;12642:12;;;;12689;;;12710:61;;12764:4;12756:6;12752:17;12742:27;;12710:61;12817:2;12809:6;12806:14;12786:18;12783:38;12780:161;;12863:10;12858:3;12854:20;12851:1;12844:31;12898:4;12895:1;12888:15;12926:4;12923:1;12916:15;12952:408;13154:2;13136:21;;;13193:2;13173:18;;;13166:30;13232:34;13227:2;13212:18;;13205:62;-1:-1:-1;;;13298:2:68;13283:18;;13276:42;13350:3;13335:19;;12952:408::o;13365:::-;13567:2;13549:21;;;13606:2;13586:18;;;13579:30;13645:34;13640:2;13625:18;;13618:62;-1:-1:-1;;;13711:2:68;13696:18;;13689:42;13763:3;13748:19;;13365:408::o;14763:127::-;14824:10;14819:3;14815:20;14812:1;14805:31;14855:4;14852:1;14845:15;14879:4;14876:1;14869:15;14895:521;14972:4;14978:6;15038:11;15025:25;15132:2;15128:7;15117:8;15101:14;15097:29;15093:43;15073:18;15069:68;15059:96;;15151:1;15148;15141:12;15059:96;15178:33;;15230:20;;;-1:-1:-1;15273:18:68;15262:30;;15259:50;;;15305:1;15302;15295:12;15259:50;15338:4;15326:17;;-1:-1:-1;15369:14:68;15365:27;;;15355:38;;15352:58;;;15406:1;15403;15396:12;15421:127;15482:10;15477:3;15473:20;15470:1;15463:31;15513:4;15510:1;15503:15;15537:4;15534:1;15527:15;15553:135;15592:3;15613:17;;;15610:43;;15633:18;;:::i;:::-;-1:-1:-1;15680:1:68;15669:13;;15553:135::o;18492:184::-;18562:6;18615:2;18603:9;18594:7;18590:23;18586:32;18583:52;;;18631:1;18628;18621:12;18583:52;-1:-1:-1;18654:16:68;;18492:184;-1:-1:-1;18492:184:68:o;19506:125::-;19571:9;;;19592:10;;;19589:36;;;19605:18;;:::i;20927:1102::-;21121:2;21110:9;21103:21;21084:4;21144:1;21177:6;21171:13;21207:36;21233:9;21207:36;:::i;:::-;21279:6;21274:2;21263:9;21259:18;21252:34;21305:2;21326:1;21358:2;21347:9;21343:18;21375:1;21370:158;;;;21542:1;21537:381;;;;21336:582;;21370:158;-1:-1:-1;;21418:24:68;;21398:18;;;21391:52;21496:14;;21489:22;21486:1;21482:30;21467:46;;21463:55;;;-1:-1:-1;21370:158:68;;21537:381;21568:6;21565:1;21558:17;21598:4;21643:2;21640:1;21630:16;21668:1;21682:180;21696:6;21693:1;21690:13;21682:180;;;21789:14;;21765:17;;;21761:26;;21754:50;21832:16;;;;21711:10;;21682:180;;;21886:17;;21882:26;;;-1:-1:-1;;;21336:582:68;;;;;;21965:9;21960:3;21956:19;21949:4;21938:9;21934:20;21927:49;21993:30;22019:3;22011:6;21993:30;:::i;:::-;21985:38;20927:1102;-1:-1:-1;;;;;20927:1102:68:o;22034:545::-;22136:2;22131:3;22128:11;22125:448;;;22172:1;22197:5;22193:2;22186:17;22242:4;22238:2;22228:19;22312:2;22300:10;22296:19;22293:1;22289:27;22283:4;22279:38;22348:4;22336:10;22333:20;22330:47;;;-1:-1:-1;22371:4:68;22330:47;22426:2;22421:3;22417:12;22414:1;22410:20;22404:4;22400:31;22390:41;;22481:82;22499:2;22492:5;22489:13;22481:82;;;22544:17;;;22525:1;22514:13;22481:82;;;22485:3;;;22034:545;;;:::o;22755:1352::-;22881:3;22875:10;22908:18;22900:6;22897:30;22894:56;;;22930:18;;:::i;:::-;22959:97;23049:6;23009:38;23041:4;23035:11;23009:38;:::i;:::-;23003:4;22959:97;:::i;:::-;23111:4;;23175:2;23164:14;;23192:1;23187:663;;;;23894:1;23911:6;23908:89;;;-1:-1:-1;23963:19:68;;;23957:26;23908:89;-1:-1:-1;;22712:1:68;22708:11;;;22704:24;22700:29;22690:40;22736:1;22732:11;;;22687:57;24010:81;;23157:944;;23187:663;20874:1;20867:14;;;20911:4;20898:18;;-1:-1:-1;;23223:20:68;;;23341:236;23355:7;23352:1;23349:14;23341:236;;;23444:19;;;23438:26;23423:42;;23536:27;;;;23504:1;23492:14;;;;23371:19;;23341:236;;;23345:3;23605:6;23596:7;23593:19;23590:201;;;23666:19;;;23660:26;-1:-1:-1;;23749:1:68;23745:14;;;23761:3;23741:24;23737:37;23733:42;23718:58;23703:74;;23590:201;-1:-1:-1;;;;;23837:1:68;23821:14;;;23817:22;23804:36;;-1:-1:-1;22755:1352:68:o;26110:407::-;26312:2;26294:21;;;26351:2;26331:18;;;26324:30;26390:34;26385:2;26370:18;;26363:62;-1:-1:-1;;;26456:2:68;26441:18;;26434:41;26507:3;26492:19;;26110:407::o;26522:812::-;26933:25;26928:3;26921:38;26903:3;26988:6;26982:13;27004:75;27072:6;27067:2;27062:3;27058:12;27051:4;27043:6;27039:17;27004:75;:::i;:::-;-1:-1:-1;;;27138:2:68;27098:16;;;27130:11;;;27123:40;27188:13;;27210:76;27188:13;27272:2;27264:11;;27257:4;27245:17;;27210:76;:::i;:::-;27306:17;27325:2;27302:26;;26522:812;-1:-1:-1;;;;26522:812:68:o;29762:287::-;29891:3;29929:6;29923:13;29945:66;30004:6;29999:3;29992:4;29984:6;29980:17;29945:66;:::i;:::-;30027:16;;;;;29762:287;-1:-1:-1;;29762:287:68:o;30465:168::-;30538:9;;;30569;;30586:15;;;30580:22;;30566:37;30556:71;;30607:18;;:::i;30638:136::-;30677:3;30705:5;30695:39;;30714:18;;:::i;:::-;-1:-1:-1;;;30750:18:68;;30638:136::o;31901:127::-;31962:10;31957:3;31953:20;31950:1;31943:31;31993:4;31990:1;31983:15;32017:4;32014:1;32007:15",
		"linkReferences": {},
		"immutableReferences": {
			"4797": [
				{ "start": 3097, "length": 32 },
				{ "start": 3161, "length": 32 },
				{ "start": 3510, "length": 32 },
				{ "start": 3574, "length": 32 },
				{ "start": 3715, "length": 32 }
			]
		}
	},
	"methodIdentifiers": {
		"BURNER_ROLE()": "282c51f3",
		"CONTRACT_ADMIN_ROLE()": "1da03312",
		"DEFAULT_ADMIN_ROLE()": "a217fddf",
		"DOMAIN_SEPARATOR()": "3644e515",
		"MINTER_ROLE()": "d5391393",
		"PAUSER_ROLE()": "e63ab1e9",
		"RECOVERY_ROLE()": "31993a1c",
		"SALVAGE_ROLE()": "88920d29",
		"UPGRADER_ROLE()": "f72c0d8b",
		"accessRegistry()": "e6f29b05",
		"accessRegistryUpdate(address)": "2e13ae6e",
		"allowance(address,address)": "dd62ed3e",
		"approve(address,uint256)": "095ea7b3",
		"balanceOf(address)": "70a08231",
		"burn(uint256)": "42966c68",
		"contractUri()": "c0e24d5e",
		"contractUriUpdate(string)": "7ffc5a5c",
		"decimals()": "313ce567",
		"decreaseAllowance(address,uint256)": "a457c2d7",
		"eip712Domain()": "84b0196e",
		"getRoleAdmin(bytes32)": "248a9ca3",
		"grantRole(bytes32,address)": "2f2ff15d",
		"hasRole(bytes32,address)": "91d14854",
		"increaseAllowance(address,uint256)": "39509351",
		"initialize(string,string,address,address,address)": "db0ed6a0",
		"mint(address,uint256)": "40c10f19",
		"multicall(bytes[])": "ac9650d8",
		"name()": "06fdde03",
		"nonces(address)": "7ecebe00",
		"pause()": "8456cb59",
		"paused()": "5c975abb",
		"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
		"proxiableUUID()": "52d1902d",
		"recoverTokens(address,uint256)": "069c9fae",
		"renounceRole(bytes32,address)": "36568abe",
		"revokeRole(bytes32,address)": "d547741f",
		"salvageERC20(address,uint256)": "c3d00d4e",
		"salvageGas(uint256)": "6e1d21b0",
		"supportsInterface(bytes4)": "01ffc9a7",
		"symbol()": "95d89b41",
		"totalSupply()": "18160ddd",
		"transfer(address,uint256)": "a9059cbb",
		"transferFrom(address,address,uint256)": "23b872dd",
		"unpause()": "3f4ba83a",
		"upgradeTo(address)": "3659cfe6",
		"upgradeToAndCall(address,bytes)": "4f1ef286",
		"version()": "54fd4d50"
	},
	"rawMetadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessRegistryNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DefaultAdminError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RecoveryOnActiveAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SalvageGasFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAccessRegistry\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAccessRegistry\",\"type\":\"address\"}],\"name\":\"AccessRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldUri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"ContractUriUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GasTokenSalvaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenSalvaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECOVERY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SALVAGE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessRegistry\",\"outputs\":[{\"internalType\":\"contract IAccessRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessRegistry\",\"type\":\"address\"}],\"name\":\"accessRegistryUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"contractUriUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"salvageERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"salvageGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Fireblocks\",\"errors\":{\"AccessRegistryNotSet()\":[{\"details\":\"Indicates that registry is not set.\"}],\"DefaultAdminError()\":[{\"details\":\"Indicates a failure because \\\"DEFAULT_ADMIN_ROLE\\\" was tried to be revoked.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"InvalidAddress()\":[{\"details\":\"Indicates a failure that an address is not valid.\"}],\"InvalidImplementation()\":[{\"details\":\"Indicates that a contract does not implement a required interface.\"}],\"RecoveryOnActiveAccount(address)\":[{\"details\":\"Indicates that there was an attempt to recover tokens from an account that can participate in the system.\",\"params\":{\"account\":\"The address from which token recovery was attempted.\"}}],\"SalvageGasFailed()\":[{\"details\":\"Indicates a failure while rescuing gas.\"}],\"ZeroAmount()\":[{\"details\":\"Indicates a failure that a value is not valid.\"}]},\"events\":{\"AccessRegistryUpdated(address,address,address)\":{\"details\":\"This event is emitted by the {_updateAccessRegistry} function.\",\"params\":{\"caller\":\"The address of the account that updated the {AccessRegistry} contract address.\",\"newAccessRegistry\":\"The address of the new {AccessRegistry} contract.\",\"oldAccessRegistry\":\"The address of the old {AccessRegistry} contract.\"}},\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"ContractUriUpdated(address,string,string)\":{\"params\":{\"caller\":\"The (indexed) address of the entity that triggered the update.\",\"newUri\":\"The new URI associated with the contract.\",\"oldUri\":\"The URI previously associated with the contract.\"}},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"GasTokenSalvaged(address,uint256)\":{\"params\":{\"amount\":\"The (indexed) amount of ETH salvaged.\",\"caller\":\"The (indexed) address of the entity that triggered the salvage.\"}},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TokenSalvaged(address,address,uint256)\":{\"params\":{\"amount\":\"The (indexed) amount of tokens salvaged.\",\"caller\":\"The (indexed) address of the entity that triggered the salvage.\",\"token\":\"The (indexed) address of the ERC20 token which was salvaged.\"}},\"TokensRecovered(address,address,uint256)\":{\"params\":{\"account\":\"The (indexed) account the tokens were recovered from.\",\"amount\":\"The number of tokens recovered.\",\"caller\":\"The (indexed) address of the caller.\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"accessRegistryUpdate(address)\":{\"details\":\"This function emits a {AccessRegistryUpdated} event as part of {_accessRegistryUpdate} when the access registry address is successfully updated.\",\"params\":{\"_accessRegistry\":\"The address of the contract that implements {IAccessRegistry}.\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"Calling Conditions: - {ERC20F} is not paused. - The `spender` must be a non-zero address. (checked internally by {ERC20Upgradeable}.{_approve}) If the spender is already authorized to spend a non-zero amount of token, the `amount` parameter will overwrite the previously authorized amount. Upon successful execution function emits an {Approval} event as part of {ERC20Upgradeable._approve}.\",\"params\":{\"amount\":\"The amount allowed to be spent.\",\"spender\":\"The address getting an allowance.\"},\"returns\":{\"_0\":\"True value indicating whether the approval was successful.\"}},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Calling Conditions: - Can only be invoked by the address that has the role \\\"BURNER_ROLE\\\". - {ERC20F} is not paused. (checked internally by {_beforeTokenTransfer}) - `amount` is less than or equal to the caller's balance. (checked internally by {ERC20Upgradeable}.{_burn}) - `amount` is greater than 0. (checked internally by {ERC20Upgradeable}.{_burn}) This function emits a {Transfer} event as part of {ERC20Upgradeable._burn}.\",\"params\":{\"amount\":\"The number of tokens to be burned.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"contractUriUpdate(string)\":{\"details\":\"This function emits a {ContractUriUpdated} event.\",\"params\":{\"_uri\":\"A URI link pointing to the current URI associated with the contract.\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Calling Conditions: - {ERC20F} is not paused. - The `spender` must be a non-zero address. (checked internally by {ERC20Upgradeable}.{_approve}) - Allowance to any spender cannot assume a negative value. The request is only processed if the requested decrease is less than the current allowance. (checked internally by {ERC20Upgradeable.decreaseAllowance}) This function emits an {Approval} event as part of {ERC20Upgradeable._approve}.\",\"params\":{\"spender\":\"The spender's address.\",\"subtractedValue\":\"The Amount by which allowance is decreased.\"},\"returns\":{\"_0\":\"True if successful.\"}},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Calling Conditions: - Caller must be the role admin of the `role`. - Non-zero address `account`. This function emits a {RoleGranted} event as part of {AccessControlUpgradeable._grantRole}.\",\"params\":{\"account\":\"The address to which role is granted\",\"role\":\"The role that will be granted.\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Calling Conditions: - {ERC20F} is not paused. - The `spender` must be a non-zero address. (checked internally by {ERC20Upgradeable}.{_approve}) This function emits an {Approval} event as part of {ERC20Upgradeable._approve}.\",\"params\":{\"addedValue\":\"The amount by which allowance is increased.\",\"spender\":\"The spender's address.\"},\"returns\":{\"_0\":\"True if successful.\"}},\"initialize(string,string,address,address,address)\":{\"details\":\"Calling Conditions: - Can only be invoked once (controlled via the {initializer} modifier). - Non-zero address `defaultAdmin`. - Non-zero address `minter`. - Non-zero address `pauser`.\",\"params\":{\"_name\":\"The name of the token.\",\"_symbol\":\"The symbol of the token.\",\"defaultAdmin\":\"The account to be granted the \\\"DEFAULT_ADMIN_ROLE\\\".\",\"minter\":\"The account to be granted the \\\"MINTER_ROLE\\\".\",\"pauser\":\"The account to be granted the \\\"PAUSER_ROLE\\\".\"}},\"mint(address,uint256)\":{\"details\":\"Calling Conditions: - Can only be invoked by the address that has the role \\\"MINTER_ROLE\\\". - {ERC20F} is not paused. (checked internally by {_beforeTokenTransfer}) - `to` is a non-zero address. (checked internally by {ERC20Upgradeable}.{_mint}) - `to` is allowed to receive tokens. This function emits a {Transfer} event as part of {ERC20Upgradeable._mint}.\",\"params\":{\"amount\":\"The number of tokens to be issued.\",\"to\":\"The address that will receive the issued tokens.\"}},\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"pause()\":{\"details\":\"Calling Conditions: - Contract is not paused. (checked internally by {Pausable._pause}) This function emits a {Paused} event as part of {PausableUpgradeable._pause}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"If the Spender already has a non-zero allowance by the same caller(approver), the allowance will be set to reflect the new amount. Calling Conditions: - {ERC20F} is not paused. - The `owner` must be a non-zero address. (checked internally by {ERC20Upgradeable}.{_approve}) - `spender` must be a non-zero address. (checked internally by {ERC20Upgradeable}.{_approve}) - `deadline` must be a timestamp in the future. (checked internally by {ERC20PermitUpgradeable}.{permit}) - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. (checked internally by {ERC20PermitUpgradeable}.{permit}) - The signature must use `owner`'s current nonce This function emits an {Approval} event as part of {ERC20Upgradeable._approve}.\",\"params\":{\"deadline\":\"The expiry timestamp of the signature.\",\"owner\":\"The address that will sign the approval.\",\"r\":\"The first 32 bytes of the ECDSA signature.\",\"s\":\"The second 32 bytes of the ECDSA signature.\",\"spender\":\"The address that will receive the approval.\",\"v\":\"The recovery byte of the ECDSA signature.\",\"value\":\"The allowance that will be approved.\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"recoverTokens(address,uint256)\":{\"details\":\"Calling Conditions: - `caller` of this function must have the \\\"RECOVERY_ROLE\\\". - {ERC20F} is not paused.(checked internally by {_beforeTokenTransfer}). - `account` address must be not be allowed to hold tokens. - `account` must be a non-zero address. (checked internally in {ERC20Upgradeable._transfer}) - `amount` is greater than 0. - `amount` is less than or equal to the balance of the account. (checked internally in {ERC20Upgradeable._transfer}) This function emits a {TokensRecovered} event, signalling that the funds of the given address were recovered.\",\"params\":{\"account\":\"The address to recover the tokens from.\",\"amount\":\"The amount to be recovered from the balance of the `account`.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Only the account itself can renounce its own roles, and not any other account. Calling Conditions: - Cannot renounce DEFAULT_ADMIN_ROLE. - 'account' is the caller of the transaction.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Calling Conditions: - Caller must be the role admin of the `role`. - Non-zero address `account`. This function emits a {RoleRevoked} event as part of {AccessControlUpgradeable._revokeRole}.\",\"params\":{\"account\":\"The address from which role is revoked\",\"role\":\"The role that will be revoked.\"}},\"salvageERC20(address,uint256)\":{\"details\":\"Calling Conditions: - `amount` is greater than 0. This function emits a {TokenSalvaged} event, indicating that funds were salvaged.\",\"params\":{\"amount\":\"The amount to be salvaged.\",\"token\":\"The ERC20 asset which is to be salvaged.\"}},\"salvageGas(uint256)\":{\"details\":\"Calling Conditions: - `amount` is greater than 0. This function emits a {GasTokenSalvaged} event, indicating that funds were salvaged.\",\"params\":{\"amount\":\"The amount to be salvaged.\"}},\"supportsInterface(bytes4)\":{\"details\":\"This function returns `true` if the interface is supported, otherwise it returns `false`.\",\"returns\":{\"_0\":\"`true` if the interface is supported, otherwise it returns `false`.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"Calling Conditions: - {ERC20F} is not paused. (checked internally by {_beforeTokenTransfer}) - The `sender` is allowed to send tokens. - The `to` is allowed to receive tokens. - `to` is a non-zero address. (checked internally by {ERC20Upgradeable}.{_transfer}) - `amount` is not greater than sender's balance. (checked internally by {ERC20Upgradeable}.{_transfer}) This function emits a {Transfer} event as part of {ERC20Upgradeable._transfer}.\",\"params\":{\"amount\":\"The number of tokens that will be sent to the `recipient`.\",\"to\":\"The address that will receive the tokens.\"},\"returns\":{\"_0\":\"True if the function was successful.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Calling Conditions: - {ERC20F} is not paused. (checked internally by {_beforeTokenTransfer}) - The `from` is allowed to send tokens. - The `to` is allowed to receive tokens. - `from` is a non-zero address. (checked internally by {ERC20Upgradeable}.{_transfer}) - `to` is a non-zero address. (checked internally by {ERC20Upgradeable}.{_transfer}) - `amount` is not greater than `from`'s balance or caller's allowance of `from`'s funds. (checked internally   by {ERC20Upgradeable}.{transferFrom}) - `amount` is greater than 0. (checked internally by {_spendAllowance})\",\"params\":{\"amount\":\"The number of tokens that will be sent to the `to` (recipient).\",\"from\":\"The address that tokens will be transferred on behalf of.\",\"to\":\"The address that will receive the tokens.\"},\"returns\":{\"_0\":\"True if the function was successful.\"}},\"unpause()\":{\"details\":\"Calling Conditions: - Contract is paused. (checked internally by {Pausable._unpause}) This function emits an {Unpaused} event as part of {PausableUpgradeable._unpause}.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"version()\":{\"details\":\"This function get the latest deployment version from the {Initializable}.{_getInitializedVersion}. With every new deployment, the version number will be incremented.\",\"returns\":{\"_0\":\"The version of the contract.\"}}},\"stateVariables\":{\"BURNER_ROLE\":{\"details\":\"This constant holds the hash of the string \\\"BURNER_ROLE\\\".\"},\"CONTRACT_ADMIN_ROLE\":{\"details\":\"This constant holds the hash of the string \\\"CONTRACT_ADMIN_ROLE\\\".\"},\"MINTER_ROLE\":{\"details\":\"This constant holds the hash of the string \\\"MINTER_ROLE\\\".\"},\"PAUSER_ROLE\":{\"details\":\"This constant holds the hash of the string \\\"PAUSER_ROLE\\\".\"},\"RECOVERY_ROLE\":{\"details\":\"This constant holds the hash of the string \\\"RECOVERY_ROLE\\\".\"},\"SALVAGE_ROLE\":{\"details\":\"This constant holds the hash of the string \\\"SALVAGE_ROLE\\\".\"},\"UPGRADER_ROLE\":{\"details\":\"This constant holds the hash of the string \\\"UPGRADER_ROLE\\\".\"}},\"title\":\"ERC20F\",\"version\":1},\"userdoc\":{\"events\":{\"AccessRegistryUpdated(address,address,address)\":{\"notice\":\"This event is emitted when the {AccessRegistry} contract address is updated.\"},\"ContractUriUpdated(address,string,string)\":{\"notice\":\"This event is logged when the contract URI is updated.\"},\"GasTokenSalvaged(address,uint256)\":{\"notice\":\"This event is logged when ETH is salvaged.\"},\"TokenSalvaged(address,address,uint256)\":{\"notice\":\"This event is logged when ERC20 tokens are salvaged.\"},\"TokensRecovered(address,address,uint256)\":{\"notice\":\"This event is logged when the funds are recovered from an address that is not allowed to participate in the system.\"}},\"kind\":\"user\",\"methods\":{\"BURNER_ROLE()\":{\"notice\":\"The Access Control identifier for the Burner Role. An account with \\\"BURNER_ROLE\\\" can burn tokens.\"},\"CONTRACT_ADMIN_ROLE()\":{\"notice\":\"The Access Control identifier for the Contract Admin Role. An account with \\\"CONTRACT_ADMIN_ROLE\\\" can update the contract URI.\"},\"MINTER_ROLE()\":{\"notice\":\"The Access Control identifier for the Minter Role. An account with \\\"MINTER_ROLE\\\" can mint tokens.\"},\"PAUSER_ROLE()\":{\"notice\":\"The Access Control identifier for the Pauser Role. An account with \\\"PAUSER_ROLE\\\" can pause the contract.\"},\"RECOVERY_ROLE()\":{\"notice\":\"The Access Control identifier for the Recovery Role. An account with \\\"RECOVERY_ROLE\\\" can recover tokens.\"},\"SALVAGE_ROLE()\":{\"notice\":\"The Access Control identifier for the Salvager Role. An account with \\\"SALVAGE_ROLE\\\" can salvage tokens and gas.\"},\"UPGRADER_ROLE()\":{\"notice\":\"The Access Control identifier for the Upgrader Role. An account with \\\"UPGRADER_ROLE\\\" can upgrade the implementation contract address.\"},\"accessRegistry()\":{\"notice\":\"This field is the address of the {AccessRegistry} contract.\"},\"accessRegistryUpdate(address)\":{\"notice\":\"This is a function used to update `accessRegistry` field.\"},\"approve(address,uint256)\":{\"notice\":\"This function allows the owner of the tokens to authorize another address to spend a certain amount of token on their behalf. The `spender` parameter is the address that is being authorized to spend the token, and the `amount` parameter is the maximum number of tokens that the spender is authorized to spend.\"},\"burn(uint256)\":{\"notice\":\"This is a function used to burn tokens. The caller will burn tokens from their own address.\"},\"contractUri()\":{\"notice\":\"This field is a URI (Uniform Resource Identifier) that points to a JSON file with metadata about the contract.\"},\"contractUriUpdate(string)\":{\"notice\":\"This is a function used to update `contractUri` field.\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"This function decrease the allowance of the `spender` by `subtractedValue`. The new allowance will be the difference of previous amount and `subtractedValue`.\"},\"grantRole(bytes32,address)\":{\"notice\":\"This function grants an Access Control role to an account\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"This function increases the allowance of the `spender` by `addedValue`. This means that the caller is delegating the `spender` to spend more funds than previously allowed. The resultant allowance will be a sum of previous allowance and the `addedValue`.\"},\"initialize(string,string,address,address,address)\":{\"notice\":\"This function configures the ERC20F contract with the initial state and granting privileged roles.\"},\"mint(address,uint256)\":{\"notice\":\"This is a function used to issue new tokens. The caller will issue tokens to the `to` address.\"},\"pause()\":{\"notice\":\"This is a function used to pause the contract.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"This is a function that allows an owner to provide off-chain permission for a specific `spender` to spend a certain amount of tokens on their behalf, using an ECDSA signature. This signature is then provided to this {ERC20F} contract which verifies the signature and updates the allowance. This exercise reduces the number of transactions required to approve a transfer.\"},\"recoverTokens(address,uint256)\":{\"notice\":\"This is a function used to recover tokens from an address not on the Allowlist.\"},\"renounceRole(bytes32,address)\":{\"notice\":\"This function renounces an Access Control role from an account, except for the \\\"DEFAULT_ADMIN_ROLE\\\".\"},\"revokeRole(bytes32,address)\":{\"notice\":\"This function revokes an Access Control role from an account\"},\"salvageERC20(address,uint256)\":{\"notice\":\"A function used to salvage ERC20 tokens sent to the contract using this abstract contract.\"},\"salvageGas(uint256)\":{\"notice\":\"A function used to salvage ETH sent to the contract using this abstract contract.\"},\"supportsInterface(bytes4)\":{\"notice\":\"This is a function used to check if an interface is supported by this contract.\"},\"transfer(address,uint256)\":{\"notice\":\"This is a function used to transfer tokens from the sender to the `to` address.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"This is a function used to transfer tokens on behalf of the `from` address to the `to` address. This function emits an {Approval} event as part of {ERC20Upgradeable._approve}. This function emits a {Transfer} event as part of {ERC20Upgradeable._transfer}.\"},\"unpause()\":{\"notice\":\"This is a function used to unpause the contract.\"},\"version()\":{\"notice\":\"This is a function used to get the version of the contract.\"}},\"notice\":\"This contract represents a fungible token within the Fireblocks ecosystem of contracts. The contract utilizes the UUPS (Universal Upgradeable Proxy Standard) for seamless upgradability. This standard enables the contract to be easily upgraded without disrupting its state. By following the UUPS proxy pattern, the ERC20F logic is separated from the storage, allowing upgrades while preserving the existing data. This approach ensures that the contract can adapt and evolve over time, incorporating improvements and new features and mitigating potential attack vectors in future. The ERC20F contract Role Based Access Control employs following roles:  - UPGRADER_ROLE  - PAUSER_ROLE  - CONTRACT_ADMIN_ROLE  - MINTER_ROLE  - BURNER_ROLE  - RECOVERY_ROLE  - SALVAGE_ROLE The ERC20F Token contract can utilize an Access Registry contract to retrieve information on whether an account is authorized to interact with the system.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20F.sol\":\"ERC20F\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"contracts/ERC20F.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2024 Fireblocks <support@fireblocks.com>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\npragma solidity 0.8.20;\\n\\nimport {ERC20PermitUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\\\";\\nimport {ERC20Upgradeable, IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {IERC1822ProxiableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport {IERC1967Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\\\";\\nimport {IERC20MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport {IERC5267Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\\\";\\nimport {IERC20PermitUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {MulticallUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {IERC20Errors} from \\\"./library/Errors/interface/IERC20Errors.sol\\\";\\n\\nimport {LibErrors} from \\\"./library/Errors/LibErrors.sol\\\";\\nimport {AccessRegistrySubscriptionUpgradeable} from \\\"./library/AccessRegistry/AccessRegistrySubscriptionUpgradeable.sol\\\";\\nimport {ContractUriUpgradeable} from \\\"./library/Utils/ContractUriUpgradeable.sol\\\";\\nimport {SalvageUpgradeable} from \\\"./library/Utils/SalvageUpgradeable.sol\\\";\\nimport {PauseUpgradeable} from \\\"./library/Utils/PauseUpgradeable.sol\\\";\\nimport {RoleAccessUpgradeable} from \\\"./library/Utils/RoleAccessUpgradeable.sol\\\";\\n\\n/**\\n * @title ERC20F\\n * @author Fireblocks\\n * @notice This contract represents a fungible token within the Fireblocks ecosystem of contracts.\\n *\\n * The contract utilizes the UUPS (Universal Upgradeable Proxy Standard) for seamless upgradability. This standard\\n * enables the contract to be easily upgraded without disrupting its state. By following the UUPS proxy pattern, the\\n * ERC20F logic is separated from the storage, allowing upgrades while preserving the existing data. This\\n * approach ensures that the contract can adapt and evolve over time, incorporating improvements and new features and\\n * mitigating potential attack vectors in future.\\n *\\n * The ERC20F contract Role Based Access Control employs following roles:\\n *\\n *  - UPGRADER_ROLE\\n *  - PAUSER_ROLE\\n *  - CONTRACT_ADMIN_ROLE\\n *  - MINTER_ROLE\\n *  - BURNER_ROLE\\n *  - RECOVERY_ROLE\\n *  - SALVAGE_ROLE\\n *\\n * The ERC20F Token contract can utilize an Access Registry contract to retrieve information on whether an account\\n * is authorized to interact with the system.\\n */\\ncontract ERC20F is\\n\\tInitializable,\\n\\tERC20Upgradeable,\\n\\tERC20PermitUpgradeable,\\n\\tAccessRegistrySubscriptionUpgradeable,\\n\\tMulticallUpgradeable,\\n\\tSalvageUpgradeable,\\n\\tContractUriUpgradeable,\\n\\tPauseUpgradeable,\\n\\tRoleAccessUpgradeable,\\n\\tIERC20Errors,\\n\\tUUPSUpgradeable\\n{\\n\\t/// Constants\\n\\n\\t/**\\n\\t * @notice The Access Control identifier for the Upgrader Role.\\n\\t * An account with \\\"UPGRADER_ROLE\\\" can upgrade the implementation contract address.\\n\\t *\\n\\t * @dev This constant holds the hash of the string \\\"UPGRADER_ROLE\\\".\\n\\t */\\n\\tbytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n\\n\\t/**\\n\\t * @notice The Access Control identifier for the Pauser Role.\\n\\t * An account with \\\"PAUSER_ROLE\\\" can pause the contract.\\n\\t *\\n\\t * @dev This constant holds the hash of the string \\\"PAUSER_ROLE\\\".\\n\\t */\\n\\tbytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n\\t/**\\n\\t * @notice The Access Control identifier for the Contract Admin Role.\\n\\t * An account with \\\"CONTRACT_ADMIN_ROLE\\\" can update the contract URI.\\n\\t *\\n\\t * @dev This constant holds the hash of the string \\\"CONTRACT_ADMIN_ROLE\\\".\\n\\t */\\n\\tbytes32 public constant CONTRACT_ADMIN_ROLE = keccak256(\\\"CONTRACT_ADMIN_ROLE\\\");\\n\\n\\t/**\\n\\t * @notice The Access Control identifier for the Minter Role.\\n\\t * An account with \\\"MINTER_ROLE\\\" can mint tokens.\\n\\t *\\n\\t * @dev This constant holds the hash of the string \\\"MINTER_ROLE\\\".\\n\\t */\\n\\tbytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n\\t/**\\n\\t * @notice The Access Control identifier for the Burner Role.\\n\\t * An account with \\\"BURNER_ROLE\\\" can burn tokens.\\n\\t *\\n\\t * @dev This constant holds the hash of the string \\\"BURNER_ROLE\\\".\\n\\t */\\n\\tbytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n\\t/**\\n\\t * @notice The Access Control identifier for the Recovery Role.\\n\\t * An account with \\\"RECOVERY_ROLE\\\" can recover tokens.\\n\\t *\\n\\t * @dev This constant holds the hash of the string \\\"RECOVERY_ROLE\\\".\\n\\t */\\n\\tbytes32 public constant RECOVERY_ROLE = keccak256(\\\"RECOVERY_ROLE\\\");\\n\\n\\t/**\\n\\t * @notice The Access Control identifier for the Salvager Role.\\n\\t * An account with \\\"SALVAGE_ROLE\\\" can salvage tokens and gas.\\n\\t *\\n\\t * @dev This constant holds the hash of the string \\\"SALVAGE_ROLE\\\".\\n\\t */\\n\\tbytes32 public constant SALVAGE_ROLE = keccak256(\\\"SALVAGE_ROLE\\\");\\n\\n\\t/// Events\\n\\n\\t/**\\n\\t * @notice This event is logged when the funds are recovered from an address that is not allowed\\n\\t * to participate in the system.\\n\\t *\\n\\t * @param caller The (indexed) address of the caller.\\n\\t * @param account The (indexed) account the tokens were recovered from.\\n\\t * @param amount The number of tokens recovered.\\n\\t */\\n\\tevent TokensRecovered(address indexed caller, address indexed account, uint256 amount);\\n\\n\\t/// Functions\\n\\n\\t/**\\n\\t * @notice This function acts as the constructor of the contract.\\n\\t * @dev This function disables the initializers.\\n\\t */\\n\\t/// @custom:oz-upgrades-unsafe-allow constructor\\n\\tconstructor() {\\n\\t\\t_disableInitializers();\\n\\t}\\n\\n\\t/**\\n\\t * @notice This function configures the ERC20F contract with the initial state and granting\\n\\t * privileged roles.\\n\\t *\\n\\t * @dev Calling Conditions:\\n\\t *\\n\\t * - Can only be invoked once (controlled via the {initializer} modifier).\\n\\t * - Non-zero address `defaultAdmin`.\\n\\t * - Non-zero address `minter`.\\n\\t * - Non-zero address `pauser`.\\n\\t *\\n\\t * @param _name The name of the token.\\n\\t * @param _symbol The symbol of the token.\\n\\t * @param defaultAdmin The account to be granted the \\\"DEFAULT_ADMIN_ROLE\\\".\\n\\t * @param minter The account to be granted the \\\"MINTER_ROLE\\\".\\n\\t * @param pauser The account to be granted the \\\"PAUSER_ROLE\\\".\\n\\t */\\n\\tfunction initialize(\\n\\t\\tstring calldata _name,\\n\\t\\tstring calldata _symbol,\\n\\t\\taddress defaultAdmin,\\n\\t\\taddress minter,\\n\\t\\taddress pauser\\n\\t) external initializer {\\n\\t\\tif (defaultAdmin == address(0) || pauser == address(0) || minter == address(0)) {\\n\\t\\t\\trevert LibErrors.InvalidAddress();\\n\\t\\t}\\n\\n\\t\\t__UUPSUpgradeable_init();\\n\\t\\t__ERC20_init(_name, _symbol);\\n\\t\\t__ERC20Permit_init(_name);\\n\\t\\t__Multicall_init();\\n\\t\\t__AccessRegistrySubscription_init(address(0));\\n\\t\\t__Salvage_init();\\n\\t\\t__ContractUri_init(\\\"\\\");\\n\\t\\t__Pause_init();\\n\\t\\t__RoleAccess_init();\\n\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, defaultAdmin);\\n\\t\\t_grantRole(MINTER_ROLE, minter);\\n\\t\\t_grantRole(PAUSER_ROLE, pauser);\\n\\t}\\n\\n\\t/**\\n\\t * @notice This is a function used to issue new tokens.\\n\\t * The caller will issue tokens to the `to` address.\\n\\t *\\n\\t * @dev Calling Conditions:\\n\\t *\\n\\t * - Can only be invoked by the address that has the role \\\"MINTER_ROLE\\\".\\n\\t * - {ERC20F} is not paused. (checked internally by {_beforeTokenTransfer})\\n\\t * - `to` is a non-zero address. (checked internally by {ERC20Upgradeable}.{_mint})\\n\\t * - `to` is allowed to receive tokens.\\n\\t *\\n\\t * This function emits a {Transfer} event as part of {ERC20Upgradeable._mint}.\\n\\t *\\n\\t * @param to The address that will receive the issued tokens.\\n\\t * @param amount The number of tokens to be issued.\\n\\t */\\n\\tfunction mint(address to, uint256 amount) external virtual onlyRole(MINTER_ROLE) {\\n\\t\\t_requireHasAccess(to, false);\\n\\t\\t_mint(to, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice This is a function used to burn tokens.\\n\\t * The caller will burn tokens from their own address.\\n\\t *\\n\\t * @dev Calling Conditions:\\n\\t *\\n\\t * - Can only be invoked by the address that has the role \\\"BURNER_ROLE\\\".\\n\\t * - {ERC20F} is not paused. (checked internally by {_beforeTokenTransfer})\\n\\t * - `amount` is less than or equal to the caller's balance. (checked internally by {ERC20Upgradeable}.{_burn})\\n\\t * - `amount` is greater than 0. (checked internally by {ERC20Upgradeable}.{_burn})\\n\\t *\\n\\t * This function emits a {Transfer} event as part of {ERC20Upgradeable._burn}.\\n\\t *\\n\\t * @param amount The number of tokens to be burned.\\n\\t */\\n\\tfunction burn(uint256 amount) external virtual onlyRole(BURNER_ROLE) {\\n\\t\\tif (amount == 0) revert LibErrors.ZeroAmount();\\n\\t\\t_requireHasAccess(_msgSender(), true);\\n\\t\\t_burn(_msgSender(), amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice This is a function used to recover tokens from an address not on the Allowlist.\\n\\t *\\n\\t * @dev Calling Conditions:\\n\\t *\\n\\t * - `caller` of this function must have the \\\"RECOVERY_ROLE\\\".\\n\\t * - {ERC20F} is not paused.(checked internally by {_beforeTokenTransfer}).\\n\\t * - `account` address must be not be allowed to hold tokens.\\n\\t * - `account` must be a non-zero address. (checked internally in {ERC20Upgradeable._transfer})\\n\\t * - `amount` is greater than 0.\\n\\t * - `amount` is less than or equal to the balance of the account. (checked internally in {ERC20Upgradeable._transfer})\\n\\t *\\n\\t * This function emits a {TokensRecovered} event, signalling that the funds of the given address were recovered.\\n\\t *\\n\\t * @param account The address to recover the tokens from.\\n\\t * @param amount The amount to be recovered from the balance of the `account`.\\n\\t */\\n\\tfunction recoverTokens(address account, uint256 amount) external virtual onlyRole(RECOVERY_ROLE) {\\n\\t\\tif (amount == 0) revert LibErrors.ZeroAmount();\\n\\t\\tif (address(accessRegistry) == address(0)) revert LibErrors.AccessRegistryNotSet();\\n\\t\\tif (accessRegistry.hasAccess(account, _msgSender(), _msgData())) revert LibErrors.RecoveryOnActiveAccount(account);\\n\\t\\temit TokensRecovered(_msgSender(), account, amount);\\n\\t\\t_transfer(account, _msgSender(), amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice This is a function used to get the version of the contract.\\n\\t * @dev This function get the latest deployment version from the {Initializable}.{_getInitializedVersion}.\\n\\t * With every new deployment, the version number will be incremented.\\n\\t * @return The version of the contract.\\n\\t */\\n\\tfunction version() external view virtual returns (uint64) {\\n\\t\\treturn uint64(super._getInitializedVersion());\\n\\t}\\n\\n\\t/**\\n\\t * @notice This is a function that allows an owner to provide off-chain permission for a specific `spender` to spend\\n\\t * a certain amount of tokens on their behalf, using an ECDSA signature. This signature is then provided to this\\n\\t * {ERC20F} contract which verifies the signature and updates the allowance. This exercise reduces the number\\n\\t * of transactions required to approve a transfer.\\n\\t *\\n\\t * @dev If the Spender already has a non-zero allowance by the same caller(approver), the allowance will be set to\\n\\t * reflect the new amount.\\n\\t *\\n\\t * Calling Conditions:\\n\\t *\\n\\t * - {ERC20F} is not paused.\\n\\t * - The `owner` must be a non-zero address. (checked internally by {ERC20Upgradeable}.{_approve})\\n\\t * - `spender` must be a non-zero address. (checked internally by {ERC20Upgradeable}.{_approve})\\n\\t * - `deadline` must be a timestamp in the future. (checked internally by {ERC20PermitUpgradeable}.{permit})\\n\\t * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n\\t * over the EIP712-formatted function arguments. (checked internally by {ERC20PermitUpgradeable}.{permit})\\n\\t * - The signature must use `owner`'s current nonce\\n\\t *\\n\\t * This function emits an {Approval} event as part of {ERC20Upgradeable._approve}.\\n\\t *\\n\\t * @param owner The address that will sign the approval.\\n\\t * @param spender The address that will receive the approval.\\n\\t * @param value The allowance that will be approved.\\n\\t * @param deadline The expiry timestamp of the signature.\\n\\t * @param v The recovery byte of the ECDSA signature.\\n\\t * @param r The first 32 bytes of the ECDSA signature.\\n\\t * @param s The second 32 bytes of the ECDSA signature.\\n\\t */\\n\\tfunction permit(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 value,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) public virtual override whenNotPaused {\\n\\t\\tsuper.permit(owner, spender, value, deadline, v, r, s);\\n\\t}\\n\\n\\t/**\\n\\t * @notice This function allows the owner of the tokens to authorize another address to spend a certain\\n\\t * amount of token on their behalf. The `spender` parameter is the address that is being authorized\\n\\t * to spend the token, and the `amount` parameter is the maximum number of tokens that the spender\\n\\t * is authorized to spend.\\n\\t *\\n\\t * @dev Calling Conditions:\\n\\t *\\n\\t * - {ERC20F} is not paused.\\n\\t * - The `spender` must be a non-zero address. (checked internally by {ERC20Upgradeable}.{_approve})\\n\\t *\\n\\t * If the spender is already authorized to spend a non-zero amount of token, the `amount` parameter\\n\\t * will overwrite the previously authorized amount.\\n\\t *\\n\\t * Upon successful execution function emits an {Approval} event as part of {ERC20Upgradeable._approve}.\\n\\t *\\n\\t * @param spender The address getting an allowance.\\n\\t * @param amount The amount allowed to be spent.\\n\\t * @return True value indicating whether the approval was successful.\\n\\t */\\n\\tfunction approve(address spender, uint256 amount) public virtual override whenNotPaused returns (bool) {\\n\\t\\treturn super.approve(spender, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice This function increases the allowance of the `spender` by `addedValue`. This means that the caller is\\n\\t * delegating the `spender` to spend more funds than previously allowed. The resultant allowance will be a sum of\\n\\t * previous allowance and the `addedValue`.\\n\\t *\\n\\t * @dev Calling Conditions:\\n\\t *\\n\\t * - {ERC20F} is not paused.\\n\\t * - The `spender` must be a non-zero address. (checked internally by {ERC20Upgradeable}.{_approve})\\n\\t *\\n\\t * This function emits an {Approval} event as part of {ERC20Upgradeable._approve}.\\n\\t *\\n\\t * @param spender The spender's address.\\n\\t * @param addedValue The amount by which allowance is increased.\\n\\t * @return True if successful.\\n\\t */\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual override whenNotPaused returns (bool) {\\n\\t\\treturn super.increaseAllowance(spender, addedValue);\\n\\t}\\n\\n\\t/**\\n\\t * @notice This function decrease the allowance of the `spender` by `subtractedValue`. The new allowance will be the\\n\\t * difference of previous amount and `subtractedValue`.\\n\\t *\\n\\t * @dev Calling Conditions:\\n\\t *\\n\\t * - {ERC20F} is not paused.\\n\\t * - The `spender` must be a non-zero address. (checked internally by {ERC20Upgradeable}.{_approve})\\n\\t * - Allowance to any spender cannot assume a negative value. The request is only processed if the requested\\n\\t * decrease is less than the current allowance. (checked internally by {ERC20Upgradeable.decreaseAllowance})\\n\\t *\\n\\t * This function emits an {Approval} event as part of {ERC20Upgradeable._approve}.\\n\\t *\\n\\t * @param spender The spender's address.\\n\\t * @param subtractedValue The Amount by which allowance is decreased.\\n\\t * @return True if successful.\\n\\t */\\n\\tfunction decreaseAllowance(\\n\\t\\taddress spender,\\n\\t\\tuint256 subtractedValue\\n\\t) public virtual override whenNotPaused returns (bool) {\\n\\t\\treturn super.decreaseAllowance(spender, subtractedValue);\\n\\t}\\n\\n\\t/**\\n\\t * @notice This is a function used to transfer tokens from the sender to\\n\\t * the `to` address.\\n\\t *\\n\\t * @dev Calling Conditions:\\n\\t *\\n\\t * - {ERC20F} is not paused. (checked internally by {_beforeTokenTransfer})\\n\\t * - The `sender` is allowed to send tokens.\\n\\t * - The `to` is allowed to receive tokens.\\n\\t * - `to` is a non-zero address. (checked internally by {ERC20Upgradeable}.{_transfer})\\n\\t * - `amount` is not greater than sender's balance. (checked internally by {ERC20Upgradeable}.{_transfer})\\n\\t *\\n\\t * This function emits a {Transfer} event as part of {ERC20Upgradeable._transfer}.\\n\\t *\\n\\t * @param to The address that will receive the tokens.\\n\\t * @param amount The number of tokens that will be sent to the `recipient`.\\n\\t * @return True if the function was successful.\\n\\t */\\n\\tfunction transfer(address to, uint256 amount) public virtual override returns (bool) {\\n\\t\\t_requireHasAccess(_msgSender(), true);\\n\\t\\t_requireHasAccess(to, false);\\n\\t\\treturn super.transfer(to, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice This is a function used to transfer tokens on behalf of the `from` address to\\n\\t * the `to` address.\\n\\t *\\n\\t * This function emits an {Approval} event as part of {ERC20Upgradeable._approve}.\\n\\t * This function emits a {Transfer} event as part of {ERC20Upgradeable._transfer}.\\n\\t *\\n\\t * @dev Calling Conditions:\\n\\t *\\n\\t * - {ERC20F} is not paused. (checked internally by {_beforeTokenTransfer})\\n\\t * - The `from` is allowed to send tokens.\\n\\t * - The `to` is allowed to receive tokens.\\n\\t * - `from` is a non-zero address. (checked internally by {ERC20Upgradeable}.{_transfer})\\n\\t * - `to` is a non-zero address. (checked internally by {ERC20Upgradeable}.{_transfer})\\n\\t * - `amount` is not greater than `from`'s balance or caller's allowance of `from`'s funds. (checked internally\\n\\t *   by {ERC20Upgradeable}.{transferFrom})\\n\\t * - `amount` is greater than 0. (checked internally by {_spendAllowance})\\n\\t *\\n\\t * @param from The address that tokens will be transferred on behalf of.\\n\\t * @param to The address that will receive the tokens.\\n\\t * @param amount The number of tokens that will be sent to the `to` (recipient).\\n\\t * @return True if the function was successful.\\n\\t */\\n\\tfunction transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n\\t\\t_requireHasAccess(from, true);\\n\\t\\t_requireHasAccess(to, false);\\n\\t\\treturn super.transferFrom(from, to, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice This is a function used to check if an interface is supported by this contract.\\n\\t * @dev This function returns `true` if the interface is supported, otherwise it returns `false`.\\n\\t * @return `true` if the interface is supported, otherwise it returns `false`.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n\\t\\treturn\\n\\t\\t\\tinterfaceId == type(IERC20Upgradeable).interfaceId ||\\n\\t\\t\\tinterfaceId == type(IERC20MetadataUpgradeable).interfaceId ||\\n\\t\\t\\tinterfaceId == type(IERC1967Upgradeable).interfaceId ||\\n\\t\\t\\tinterfaceId == type(IERC1822ProxiableUpgradeable).interfaceId ||\\n\\t\\t\\tinterfaceId == type(IERC20PermitUpgradeable).interfaceId ||\\n\\t\\t\\tinterfaceId == type(IERC5267Upgradeable).interfaceId ||\\n\\t\\t\\tsuper.supportsInterface(interfaceId);\\n\\t}\\n\\n\\t/**\\n\\t * @notice This function works as a middle layer and performs some checks before\\n\\t * it allows a transfer to operate.\\n\\t *\\n\\t * @dev A hook inherited from ERC20Upgradeable.\\n\\t *\\n\\t * This function performs the following checks, and reverts when not met:\\n\\t *\\n\\t * - {ERC20F} is not paused.\\n\\t *\\n\\t * @param from The address that sent the tokens.\\n\\t * @param to The address that receives the transfer `amount`.\\n\\t * @param amount The number of tokens sent to the `to` address.\\n\\t */\\n\\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override whenNotPaused {\\n\\t\\tsuper._beforeTokenTransfer(from, to, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice This is a function that applies any validations required to allow upgrade operations.\\n\\t *\\n\\t * @dev Reverts when the caller does not have the \\\"UPGRADER_ROLE\\\".\\n\\t *\\n\\t * Calling Conditions:\\n\\t *\\n\\t * - Only the \\\"UPGRADER_ROLE\\\" can execute.\\n\\t *\\n\\t * @param newImplementation The address of the new logic contract.\\n\\t */\\n\\t/* solhint-disable no-empty-blocks */\\n\\tfunction _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(UPGRADER_ROLE) {}\\n\\n\\t/**\\n\\t * @notice This is a function that applies any validations required to allow salvage operations (like salvageERC20).\\n\\t *\\n\\t * @dev Reverts when the caller does not have the \\\"SALVAGE_ROLE\\\".\\n\\t *\\n\\t * Calling Conditions:\\n\\t *\\n\\t * - Only the \\\"SALVAGE_ROLE\\\" can execute.\\n\\t * - {ERC20F} is not paused.\\n\\t */\\n\\t/* solhint-disable no-empty-blocks */\\n\\tfunction _authorizeSalvageERC20() internal virtual override whenNotPaused onlyRole(SALVAGE_ROLE) {}\\n\\n\\t/**\\n\\t * @notice This is a function that applies any validations required to allow salvage operations (like salvageGas).\\n\\t *\\n\\t * @dev Reverts when the caller does not have the \\\"SALVAGE_ROLE\\\".\\n\\t *\\n\\t * Calling Conditions:\\n\\t *\\n\\t * - Only the \\\"SALVAGE_ROLE\\\" can execute.\\n\\t * - {ERC20F} is not paused.\\n\\t */\\n\\t/* solhint-disable no-empty-blocks */\\n\\tfunction _authorizeSalvageGas() internal virtual override whenNotPaused onlyRole(SALVAGE_ROLE) {}\\n\\n\\t/**\\n\\t * @notice This is a function that applies any validations required to allow Contract Uri updates.\\n\\t *\\n\\t * @dev Reverts when the caller does not have the \\\"CONTRACT_ADMIN_ROLE\\\".\\n\\t *\\n\\t * Calling Conditions:\\n\\t *\\n\\t * - Only the \\\"CONTRACT_ADMIN_ROLE\\\" can execute.\\n\\t * - {ERC20F} is not paused.\\n\\t */\\n\\t/* solhint-disable no-empty-blocks */\\n\\tfunction _authorizeContractUriUpdate() internal virtual override whenNotPaused onlyRole(CONTRACT_ADMIN_ROLE) {}\\n\\n\\t/**\\n\\t * @notice This is a function that applies any validations required to allow Pause operations (like pause or unpause) to be executed.\\n\\t *\\n\\t * @dev Reverts when the caller does not have the \\\"PAUSER_ROLE\\\".\\n\\t *\\n\\t * Calling Conditions:\\n\\t *\\n\\t * - Only the \\\"PAUSER_ROLE\\\" can execute.\\n\\t */\\n\\t/* solhint-disable no-empty-blocks */\\n\\tfunction _authorizePause() internal virtual override onlyRole(PAUSER_ROLE) {}\\n\\n\\t/**\\n\\t * @notice This is a function that applies any validations required to allow Access Registry updates.\\n\\t *\\n\\t * @dev Reverts when the caller does not have the \\\"CONTRACT_ADMIN_ROLE\\\".\\n\\t *\\n\\t * Calling Conditions:\\n\\t *\\n\\t * - Only the \\\"CONTRACT_ADMIN_ROLE\\\" can execute.\\n\\t * - {ERC20F} is not paused.\\n\\t */\\n\\t/* solhint-disable no-empty-blocks */\\n\\tfunction _authorizeAccessRegistryUpdate() internal virtual override whenNotPaused onlyRole(CONTRACT_ADMIN_ROLE) {}\\n\\n\\t/**\\n\\t * @notice This is a function that applies any validations required to allow Role Access operation (like grantRole or revokeRole ) to be executed.\\n\\t *\\n\\t * @dev Reverts when the {ERC20F} contract is paused.\\n\\t *\\n\\t * Calling Conditions:\\n\\t *\\n\\t * - {ERC20F} is not paused.\\n\\t */\\n\\t/* solhint-disable no-empty-blocks */\\n\\tfunction _authorizeRoleAccess() internal virtual override whenNotPaused {}\\n\\n\\t/**\\n\\t * @notice This function checks that an account can have access to this token.\\n\\t * The function will revert if the account does not have access.\\n\\t *\\n\\t * @param account The address to check has access.\\n\\t * @param isSender Value indicating if the sender or receiver is being checked.\\n\\t */\\n\\tfunction _requireHasAccess(address account, bool isSender) internal view virtual {\\n\\t\\tif (address(accessRegistry) != address(0)) {\\n\\t\\t\\tif (!accessRegistry.hasAccess(account, _msgSender(), _msgData())) {\\n\\t\\t\\t\\tif (isSender) {\\n\\t\\t\\t\\t\\trevert ERC20InvalidSender(account);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\trevert ERC20InvalidReceiver(account);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x1541423705aa8fa7d108ce5c3e4be2b08712f588aa1e2cdc0dd1bd0b80abcc0e\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/library/AccessRegistry/AccessRegistrySubscriptionUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2024 Fireblocks <support@fireblocks.com>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\npragma solidity 0.8.20;\\n\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport {IAccessRegistry} from \\\"./interface/IAccessRegistry.sol\\\";\\nimport {LibErrors} from \\\"../Errors/LibErrors.sol\\\";\\n\\n/**\\n * @title Access Registry Subscription Upgradeable\\n * @author Fireblocks\\n * @dev This abstract contract provides internal contract logic for subscribing to an Access Registry contract.\\n */\\nabstract contract AccessRegistrySubscriptionUpgradeable is Initializable, ContextUpgradeable {\\n\\t/// State\\n\\n\\t/**\\n\\t * @notice This field is the address of the {AccessRegistry} contract.\\n\\t */\\n\\tIAccessRegistry public accessRegistry;\\n\\n\\t/// Events\\n\\n\\t/**\\n\\t * @notice This event is emitted when the {AccessRegistry} contract address is updated.\\n\\t * @dev This event is emitted by the {_updateAccessRegistry} function.\\n\\t *\\n\\t * @param caller The address of the account that updated the {AccessRegistry} contract address.\\n\\t * @param oldAccessRegistry The address of the old {AccessRegistry} contract.\\n\\t * @param newAccessRegistry The address of the new {AccessRegistry} contract.\\n\\t */\\n\\tevent AccessRegistryUpdated(\\n\\t\\taddress indexed caller,\\n\\t\\taddress indexed oldAccessRegistry,\\n\\t\\taddress indexed newAccessRegistry\\n\\t);\\n\\n\\t/// Functions\\n\\n\\t/**\\n\\t * @notice This is an initializer function for the abstract contract.\\n\\t * @dev Standard Initializable contract behavior.\\n\\t *\\n\\t * Calling Conditions:\\n\\t *\\n\\t * - Can only be invoked by functions with the {initializer} or {reinitializer} modifiers.\\n\\t * @param _accessRegistry The address of the contract that implements {IAccessRegistry}.\\n\\t */\\n\\tfunction __AccessRegistrySubscription_init(address _accessRegistry) internal onlyInitializing {\\n\\t\\t_accessRegistryUpdate(_accessRegistry);\\n\\t}\\n\\n\\t/**\\n\\t * @notice This is a function used to update `accessRegistry` field.\\n\\t * @dev This function emits a {AccessRegistryUpdated} event as part of {_accessRegistryUpdate}\\n\\t * when the access registry address is successfully updated.\\n\\t *\\n\\t * @param _accessRegistry The address of the contract that implements {IAccessRegistry}.\\n\\t */\\n\\tfunction accessRegistryUpdate(address _accessRegistry) external virtual {\\n\\t\\t_authorizeAccessRegistryUpdate();\\n\\t\\t_accessRegistryUpdate(_accessRegistry);\\n\\t}\\n\\n\\t/**\\n\\t * @notice This function updates the address of the implementation of {IAccessRegistry} contract by updating the\\n\\t * `accessRegistry` field.\\n\\t *\\n\\t * @dev Calling Conditions:\\n\\t *\\n\\t * - `_accessRegistry` must implement IAccessRegistry interface.\\n\\t *\\n\\t * @param _accessRegistry The address of the contract that implements {IAccessRegistry}.\\n\\t */\\n\\tfunction _accessRegistryUpdate(address _accessRegistry) internal virtual {\\n\\t\\tif (\\n\\t\\t\\t_accessRegistry != address(0) &&\\n\\t\\t\\t(!IERC165Upgradeable(_accessRegistry).supportsInterface(type(IAccessRegistry).interfaceId))\\n\\t\\t) {\\n\\t\\t\\trevert LibErrors.InvalidImplementation();\\n\\t\\t}\\n\\n\\t\\temit AccessRegistryUpdated(_msgSender(), address(accessRegistry), _accessRegistry);\\n\\t\\taccessRegistry = IAccessRegistry(_accessRegistry);\\n\\t}\\n\\n\\t/**\\n\\t * @notice This function is designed to be overridden in inheriting contracts.\\n\\t * @dev Override this function to implement RBAC control.\\n\\t */\\n\\tfunction _authorizeAccessRegistryUpdate() internal virtual;\\n\\n\\t/* solhint-enable func-name-mixedcase */\\n\\t/**\\n\\t * @dev This empty reserved space is put in place to allow future versions to add new\\n\\t * variables without shifting down storage in the inheritance chain.\\n\\t * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n\\t */\\n\\t//slither-disable-next-line naming-convention\\n\\tuint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xeb343f2e89bc20304adabb7d1445c00ca6a22f331737202b11ce1f2b3f8f5ed3\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/library/AccessRegistry/interface/IAccessRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2024 Fireblocks <support@fireblocks.com>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\npragma solidity 0.8.20;\\n\\n/**\\n * @title Access Registry Interface\\n * @author Fireblocks\\n * @notice Access Registry Interface serves as a generalized interface for interacting with the Access Registry.\\n *\\n * @dev Interface for the Access Registry features.\\n */\\ninterface IAccessRegistry {\\n\\t/**\\n\\t * @notice This function is used to check if the account has necessary permissions to access the system.\\n\\t * @param account The account to be checked.\\n\\t * @param caller The account calling the function requiring an access check.\\n\\t * @param data The data associated with the function call\\n\\t * @return true if the account is allowed to access the system (false otherwise).\\n\\t */\\n\\tfunction hasAccess(address account, address caller, bytes calldata data) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1dab02db3c9c4507b540829085e22c393eeeb88d47749b21acf16f35158c9dd2\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/library/Errors/LibErrors.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2024 Fireblocks <support@fireblocks.com>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\npragma solidity 0.8.20;\\n\\n/**\\n * @title Errors Library\\n * @author Fireblocks\\n * @notice The Errors Library provides error messages for the Fireblocks ecosystem of smart contracts.\\n */\\nlibrary LibErrors {\\n\\t/// Errors\\n\\n\\t/**\\n\\t * @notice Thrown when the account is barred to participate in the system.\\n\\t * @param account The account to be checked.\\n\\t */\\n\\terror AccountUnauthorized(address account);\\n\\n\\t/**\\n\\t * @notice Thrown when a Renounce Role is called.\\n\\t */\\n\\terror RenounceRoleDisabled();\\n\\n\\t/**\\n\\t * @dev Indicates a failure that an address is not valid.\\n\\t */\\n\\terror InvalidAddress();\\n\\n\\t/**\\n\\t * @dev Indicates that there was an attempt to recover tokens from an account that can participate in the system.\\n\\t * @param account The address from which token recovery was attempted.\\n\\t */\\n\\terror RecoveryOnActiveAccount(address account);\\n\\n\\t/**\\n\\t * @dev Indicates that a contract does not implement a required interface.\\n\\t */\\n\\terror InvalidImplementation();\\n\\n\\t/**\\n\\t * @dev Indicates that tokenId is not valid.\\n\\t */\\n\\terror InvalidTokenId();\\n\\n\\t/**\\n\\t * @dev Indicates that the user is not allowed to perform the action for that token.\\n\\t */\\n\\terror UnauthorizedTokenManagement();\\n\\n\\t/**\\n\\t * @dev Indicates a failure that a value is not valid.\\n\\t */\\n\\terror ZeroAmount();\\n\\n\\t/**\\n\\t * @dev Indicates a failure while rescuing gas.\\n\\t */\\n\\terror SalvageGasFailed();\\n\\n\\t/**\\n\\t * @dev Indicates a failure because \\\"DEFAULT_ADMIN_ROLE\\\" was tried to be revoked.\\n\\t */\\n\\terror DefaultAdminError();\\n\\n\\t/**\\n\\t * @dev Indicates that registry is not set.\\n\\t */\\n\\terror AccessRegistryNotSet();\\n\\n\\t/**\\n\\t * @dev Indicates that the URI has already been set.\\n\\t * @param tokenId The id of the token.\\n\\t */\\n\\terror URIAlreadySet(uint256 tokenId);\\n\\n\\t/**\\n\\t * @dev Indicates that the lengths of the arrays do not match.\\n\\t */\\n\\terror ArrayLengthMismatch();\\n}\\n\",\"keccak256\":\"0xc1eb6ee4b8d45a90b943ab42f806c20847f7b60576cc5ea38d141021f5aab42d\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/library/Errors/interface/IERC20Errors.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2024 Fireblocks <support@fireblocks.com>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity 0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n\\t/**\\n\\t * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n\\t * @param sender Address whose tokens are being transferred.\\n\\t * @param balance Current balance for the interacting account.\\n\\t * @param needed Minimum amount required to perform a transfer.\\n\\t */\\n\\terror ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n\\t/**\\n\\t * @dev Indicates a failure with the token `sender`. Used in transfers.\\n\\t * @param sender Address whose tokens are being transferred.\\n\\t */\\n\\terror ERC20InvalidSender(address sender);\\n\\n\\t/**\\n\\t * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n\\t * @param receiver Address to which tokens are being transferred.\\n\\t */\\n\\terror ERC20InvalidReceiver(address receiver);\\n\\n\\t/**\\n\\t * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n\\t * @param spender Address that may be allowed to operate on tokens without being their owner.\\n\\t * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n\\t * @param needed Minimum amount required to perform a transfer.\\n\\t */\\n\\terror ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n\\t/**\\n\\t * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n\\t * @param approver Address initiating an approval operation.\\n\\t */\\n\\terror ERC20InvalidApprover(address approver);\\n\\n\\t/**\\n\\t * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n\\t * @param spender Address that may be allowed to operate on tokens without being their owner.\\n\\t */\\n\\terror ERC20InvalidSpender(address spender);\\n}\\n\",\"keccak256\":\"0x4fa534a4cea6904bc4145367ac33d902271f0a4fb4d00ea1afd3a64c04d8e1ac\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/library/Utils/ContractUriUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2024 Fireblocks <support@fireblocks.com>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\npragma solidity 0.8.20;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/**\\n * @title Contract Uri Upgradeable\\n * @author Fireblocks\\n * @dev This abstract contract provides internal contract logic for upgrading the contract URI.\\n */\\nabstract contract ContractUriUpgradeable is Initializable, ContextUpgradeable {\\n\\t/// State\\n\\n\\t/**\\n\\t * @notice This field is a URI (Uniform Resource Identifier) that points to a JSON file with metadata about the contract.\\n\\t * @dev This state variable is queried by the contractUri() function.\\n\\t */\\n\\tstring public contractUri;\\n\\n\\t/// Events\\n\\n\\t/**\\n\\t * @notice This event is logged when the contract URI is updated.\\n\\t *\\n\\t * @param caller The (indexed) address of the entity that triggered the update.\\n\\t * @param oldUri The URI previously associated with the contract.\\n\\t * @param newUri The new URI associated with the contract.\\n\\t */\\n\\tevent ContractUriUpdated(address indexed caller, string oldUri, string newUri);\\n\\n\\t// Functions\\n\\n\\t/**\\n\\t * @notice This is an initializer function for the abstract contract.\\n\\t * @dev Standard Initializable contract behavior.\\n\\t *\\n\\t * Calling Conditions:\\n\\t *\\n\\t * - Can only be invoked by functions with the {initializer} or {reinitializer} modifiers.\\n\\t */\\n\\t/* solhint-disable func-name-mixedcase */\\n\\tfunction __ContractUri_init(string memory _uri) internal onlyInitializing {\\n\\t\\t_updateContractUri(_uri);\\n\\t}\\n\\n\\t/**\\n\\t * @notice This is a function used to update `contractUri` field.\\n\\t * @dev This function emits a {ContractUriUpdated} event.\\n\\t *\\n\\t * @param _uri A URI link pointing to the current URI associated with the contract.\\n\\t */\\n\\tfunction contractUriUpdate(string calldata _uri) external virtual {\\n\\t\\t_authorizeContractUriUpdate();\\n\\t\\t_updateContractUri(_uri);\\n\\t}\\n\\n\\t/**\\n\\t * @notice This is a function used to update `contractUri` field.\\n\\t * @dev This function emits a {ContractUriUpdated} event.\\n\\t *\\n\\t * @param _uri A URI link pointing to the current URI associated with the contract.\\n\\t */\\n\\tfunction _updateContractUri(string memory _uri) internal virtual {\\n\\t\\temit ContractUriUpdated(_msgSender(), contractUri, _uri);\\n\\t\\tcontractUri = _uri;\\n\\t}\\n\\n\\t/**\\n\\t * @notice This function is designed to be overridden in inheriting contracts.\\n\\t * @dev Override this function to implement RBAC control.\\n\\t */\\n\\tfunction _authorizeContractUriUpdate() internal virtual;\\n\\n\\t/* solhint-enable func-name-mixedcase */\\n\\t/**\\n\\t * @dev This empty reserved space is put in place to allow future versions to add new\\n\\t * variables without shifting down storage in the inheritance chain.\\n\\t * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n\\t */\\n\\t//slither-disable-next-line naming-convention\\n\\tuint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5810e8db58b7d1f63aff50130a588365eba5edb48354625e39d5969b598fb1b3\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/library/Utils/PauseUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2024 Fireblocks <support@fireblocks.com>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\npragma solidity 0.8.20;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\n/**\\n * @title Pause Upgradeable\\n * @author Fireblocks\\n * @dev This abstract contract provides internal contract logic for pausing and unpausing the contract.\\n */\\nabstract contract PauseUpgradeable is Initializable, PausableUpgradeable {\\n\\t/// Functions\\n\\n\\t/**\\n\\t * @notice This is an initializer function for the abstract contract.\\n\\t * @dev Standard Initializable contract behavior.\\n\\t *\\n\\t * Calling Conditions:\\n\\t *\\n\\t * - Can only be invoked by functions with the {initializer} or {reinitializer} modifiers.\\n\\t */\\n\\tfunction __Pause_init() internal onlyInitializing {\\n\\t\\t__Pausable_init();\\n\\t}\\n\\n\\t/**\\n\\t * @notice This is a function used to pause the contract.\\n\\t *\\n\\t * @dev Calling Conditions:\\n\\t *\\n\\t * - Contract is not paused. (checked internally by {Pausable._pause})\\n\\t *\\n\\t * This function emits a {Paused} event as part of {PausableUpgradeable._pause}.\\n\\t */\\n\\tfunction pause() external virtual {\\n\\t\\t_authorizePause();\\n\\t\\t_pause();\\n\\t}\\n\\n\\t/**\\n\\t * @notice This is a function used to unpause the contract.\\n\\t *\\n\\t * @dev Calling Conditions:\\n\\t *\\n\\t * - Contract is paused. (checked internally by {Pausable._unpause})\\n\\t *\\n\\t * This function emits an {Unpaused} event as part of {PausableUpgradeable._unpause}.\\n\\t */\\n\\tfunction unpause() external virtual {\\n\\t\\t_authorizePause();\\n\\t\\t_unpause();\\n\\t}\\n\\n\\t/**\\n\\t * @notice This function is designed to be overridden in inheriting contracts.\\n\\t * @dev Override this function to implement RBAC control.\\n\\t */\\n\\tfunction _authorizePause() internal virtual;\\n\\n\\t/* solhint-enable func-name-mixedcase */\\n\\t/**\\n\\t * @dev This empty reserved space is put in place to allow future versions to add new\\n\\t * variables without shifting down storage in the inheritance chain.\\n\\t * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n\\t */\\n\\t//slither-disable-next-line naming-convention\\n\\tuint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x5635402ea53b229914b4e106af33b50569093ab74bee1f91746d5918961aeab6\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/library/Utils/RoleAccessUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2024 Fireblocks <support@fireblocks.com>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\npragma solidity 0.8.20;\\n\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nimport {LibErrors} from \\\"../Errors/LibErrors.sol\\\";\\n\\n/**\\n * @title Role Access Upgradeable\\n * @author Fireblocks\\n * @dev This abstract contract provides internal contract logic for managing access control roles.\\n */\\nabstract contract RoleAccessUpgradeable is Initializable, AccessControlUpgradeable {\\n\\t/// Functions\\n\\n\\t/**\\n\\t * @notice This is an initializer function for the abstract contract.\\n\\t * @dev Standard Initializable contract behavior.\\n\\t *\\n\\t * Calling Conditions:\\n\\t *\\n\\t * - Can only be invoked by functions with the {initializer} or {reinitializer} modifiers.\\n\\t */\\n\\tfunction __RoleAccess_init() internal onlyInitializing {\\n\\t\\t__AccessControl_init();\\n\\t}\\n\\n\\t/**\\n\\t * @notice This function revokes an Access Control role from an account\\n\\t * @dev Calling Conditions:\\n\\t *\\n\\t * - Caller must be the role admin of the `role`.\\n\\t * - Non-zero address `account`.\\n\\t *\\n\\t * This function emits a {RoleRevoked} event as part of {AccessControlUpgradeable._revokeRole}.\\n\\t *\\n\\t * @param role The role that will be revoked.\\n\\t * @param account The address from which role is revoked\\n\\t */\\n\\tfunction revokeRole(bytes32 role, address account) public virtual override {\\n\\t\\tif (role == DEFAULT_ADMIN_ROLE && account == _msgSender()) {\\n\\t\\t\\trevert LibErrors.DefaultAdminError();\\n\\t\\t}\\n\\n\\t\\t_authorizeRoleAccess();\\n\\t\\tsuper.revokeRole(role, account); // In {AccessControlUpgradeable}\\n\\t}\\n\\n\\t/**\\n\\t * @notice  This function renounces an Access Control role from an account, except for the \\\"DEFAULT_ADMIN_ROLE\\\".\\n\\t *\\n\\t * @dev Only the account itself can renounce its own roles, and not any other account.\\n\\t * Calling Conditions:\\n\\t * - Cannot renounce DEFAULT_ADMIN_ROLE.\\n\\t * - 'account' is the caller of the transaction.\\n\\t */\\n\\tfunction renounceRole(bytes32 role, address account) public virtual override {\\n\\t\\tif (role == DEFAULT_ADMIN_ROLE) {\\n\\t\\t\\trevert LibErrors.DefaultAdminError();\\n\\t\\t}\\n\\t\\t_authorizeRoleAccess();\\n\\t\\tsuper.renounceRole(role, account); // In {AccessControlUpgradeable}\\n\\t}\\n\\n\\t/**\\n\\t * @notice This function grants an Access Control role to an account\\n\\t * @dev Calling Conditions:\\n\\t *\\n\\t * - Caller must be the role admin of the `role`.\\n\\t * - Non-zero address `account`.\\n\\t *\\n\\t * This function emits a {RoleGranted} event as part of {AccessControlUpgradeable._grantRole}.\\n\\t *\\n\\t * @param role The role that will be granted.\\n\\t * @param account The address to which role is granted\\n\\t */\\n\\tfunction grantRole(bytes32 role, address account) public virtual override {\\n\\t\\t_authorizeRoleAccess();\\n\\t\\tsuper.grantRole(role, account); // In {AccessControlUpgradeable}\\n\\t}\\n\\n\\t/**\\n\\t * @notice This function is designed to be overridden in inheriting contracts.\\n\\t * @dev Override this function to implement RBAC control.\\n\\t */\\n\\tfunction _authorizeRoleAccess() internal virtual;\\n\\n\\t/* solhint-enable func-name-mixedcase */\\n\\t/**\\n\\t * @dev This empty reserved space is put in place to allow future versions to add new\\n\\t * variables without shifting down storage in the inheritance chain.\\n\\t * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n\\t */\\n\\t//slither-disable-next-line naming-convention\\n\\tuint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd84b267edcbee36070088246d3db4d6f078ebc7a3e760d8edb6af42189c72a07\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/library/Utils/SalvageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2024 Fireblocks <support@fireblocks.com>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\npragma solidity 0.8.20;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nimport {LibErrors} from \\\"../Errors/LibErrors.sol\\\";\\n\\n/**\\n * @title Salvage Upgradeable\\n * @author Fireblocks\\n * @dev This abstract contract provides internal contract logic for rescuing tokens and ETH.\\n */\\nabstract contract SalvageUpgradeable is Initializable, ContextUpgradeable {\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\t/// Events\\n\\t/**\\n\\t * @notice This event is logged when ERC20 tokens are salvaged.\\n\\t *\\n\\t * @param caller The (indexed) address of the entity that triggered the salvage.\\n\\t * @param token The (indexed) address of the ERC20 token which was salvaged.\\n\\t * @param amount The (indexed) amount of tokens salvaged.\\n\\t */\\n\\tevent TokenSalvaged(address indexed caller, address indexed token, uint256 indexed amount);\\n\\n\\t/**\\n\\t * @notice This event is logged when ETH is salvaged.\\n\\t *\\n\\t * @param caller The (indexed) address of the entity that triggered the salvage.\\n\\t * @param amount The (indexed) amount of ETH salvaged.\\n\\t */\\n\\tevent GasTokenSalvaged(address indexed caller, uint256 indexed amount);\\n\\n\\t/// Functions\\n\\n\\t/**\\n\\t * @notice This is an initializer function for the abstract contract.\\n\\t * @dev Standard Initializable contract behavior.\\n\\t *\\n\\t * Calling Conditions:\\n\\t *\\n\\t * - Can only be invoked by functions with the {initializer} or {reinitializer} modifiers.\\n\\t */\\n\\t/* solhint-disable func-name-mixedcase */\\n\\tfunction __Salvage_init() internal onlyInitializing {}\\n\\n\\t/**\\n\\t * @notice A function used to salvage ERC20 tokens sent to the contract using this abstract contract.\\n\\t * @dev Calling Conditions:\\n\\t *\\n\\t * - `amount` is greater than 0.\\n\\t *\\n\\t * This function emits a {TokenSalvaged} event, indicating that funds were salvaged.\\n\\t *\\n\\t * @param token The ERC20 asset which is to be salvaged.\\n\\t * @param amount The amount to be salvaged.\\n\\t */\\n\\tfunction salvageERC20(IERC20Upgradeable token, uint256 amount) external virtual {\\n\\t\\tif (amount == 0) {\\n\\t\\t\\trevert LibErrors.ZeroAmount();\\n\\t\\t}\\n\\t\\t_authorizeSalvageERC20();\\n\\t\\temit TokenSalvaged(_msgSender(), address(token), amount);\\n\\t\\ttoken.safeTransfer(_msgSender(), amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice A function used to salvage ETH sent to the contract using this abstract contract.\\n\\t * @dev Calling Conditions:\\n\\t *\\n\\t * - `amount` is greater than 0.\\n\\t *\\n\\t * This function emits a {GasTokenSalvaged} event, indicating that funds were salvaged.\\n\\t *\\n\\t * @param amount The amount to be salvaged.\\n\\t */\\n\\tfunction salvageGas(uint256 amount) external virtual {\\n\\t\\tif (amount == 0) {\\n\\t\\t\\trevert LibErrors.ZeroAmount();\\n\\t\\t}\\n\\t\\t_authorizeSalvageGas();\\n\\t\\temit GasTokenSalvaged(_msgSender(), amount);\\n\\t\\t(bool succeed, ) = _msgSender().call{value: amount}(\\\"\\\");\\n\\t\\tif (!succeed) {\\n\\t\\t\\trevert LibErrors.SalvageGasFailed();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice This function is designed to be overridden in inheriting contracts.\\n\\t * @dev Override this function to implement RBAC control.\\n\\t */\\n\\tfunction _authorizeSalvageERC20() internal virtual;\\n\\n\\t/**\\n\\t * @notice This function is designed to be overridden in inheriting contracts.\\n\\t * @dev Override this function to implement RBAC control.\\n\\t */\\n\\tfunction _authorizeSalvageGas() internal virtual;\\n\\n\\t/* solhint-enable func-name-mixedcase */\\n\\t/**\\n\\t * @dev This empty reserved space is put in place to allow future versions to add new\\n\\t * variables without shifting down storage in the inheritance chain.\\n\\t * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n\\t */\\n\\t//slither-disable-next-line naming-convention\\n\\tuint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb20ec7895f80b7eeddfdffc1861619d7754754fe6f9b0d8469c9960833ac9aab\",\"license\":\"AGPL-3.0-or-later\"},\"node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x121966b3220d263a6669dcf59c1254bd48ed237adf4d8a595add70a7927eada1\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xd14a627157b9a411d2410713e5dd3a377e9064bd5c194a90748bbf27ea625784\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3988ac03e4819acd4b5adf41de7d43c1471748ddc2d73d2c7aca1e3827402e5d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract MulticallUpgradeable is Initializable {\\n    function __Multicall_init() internal onlyInitializing {\\n    }\\n\\n    function __Multicall_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = AddressUpgradeable.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9793fff31f1864ea9835c37b305e6f1dd0585c20df215a0d43b8ac13d180127a\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xeb8d6be406a373771724922eb41b5d593bc8e2dc705daa22cd1145cfc8f5a3a0\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}",
	"metadata": {
		"compiler": { "version": "0.8.20+commit.a1b79de6" },
		"language": "Solidity",
		"output": {
			"abi": [
				{ "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
				{ "inputs": [], "type": "error", "name": "AccessRegistryNotSet" },
				{ "inputs": [], "type": "error", "name": "DefaultAdminError" },
				{
					"inputs": [
						{ "internalType": "address", "name": "spender", "type": "address" },
						{ "internalType": "uint256", "name": "allowance", "type": "uint256" },
						{ "internalType": "uint256", "name": "needed", "type": "uint256" }
					],
					"type": "error",
					"name": "ERC20InsufficientAllowance"
				},
				{
					"inputs": [
						{ "internalType": "address", "name": "sender", "type": "address" },
						{ "internalType": "uint256", "name": "balance", "type": "uint256" },
						{ "internalType": "uint256", "name": "needed", "type": "uint256" }
					],
					"type": "error",
					"name": "ERC20InsufficientBalance"
				},
				{
					"inputs": [{ "internalType": "address", "name": "approver", "type": "address" }],
					"type": "error",
					"name": "ERC20InvalidApprover"
				},
				{
					"inputs": [{ "internalType": "address", "name": "receiver", "type": "address" }],
					"type": "error",
					"name": "ERC20InvalidReceiver"
				},
				{
					"inputs": [{ "internalType": "address", "name": "sender", "type": "address" }],
					"type": "error",
					"name": "ERC20InvalidSender"
				},
				{
					"inputs": [{ "internalType": "address", "name": "spender", "type": "address" }],
					"type": "error",
					"name": "ERC20InvalidSpender"
				},
				{ "inputs": [], "type": "error", "name": "InvalidAddress" },
				{ "inputs": [], "type": "error", "name": "InvalidImplementation" },
				{
					"inputs": [{ "internalType": "address", "name": "account", "type": "address" }],
					"type": "error",
					"name": "RecoveryOnActiveAccount"
				},
				{ "inputs": [], "type": "error", "name": "SalvageGasFailed" },
				{ "inputs": [], "type": "error", "name": "ZeroAmount" },
				{
					"inputs": [
						{ "internalType": "address", "name": "caller", "type": "address", "indexed": true },
						{ "internalType": "address", "name": "oldAccessRegistry", "type": "address", "indexed": true },
						{ "internalType": "address", "name": "newAccessRegistry", "type": "address", "indexed": true }
					],
					"type": "event",
					"name": "AccessRegistryUpdated",
					"anonymous": false
				},
				{
					"inputs": [
						{ "internalType": "address", "name": "previousAdmin", "type": "address", "indexed": false },
						{ "internalType": "address", "name": "newAdmin", "type": "address", "indexed": false }
					],
					"type": "event",
					"name": "AdminChanged",
					"anonymous": false
				},
				{
					"inputs": [
						{ "internalType": "address", "name": "owner", "type": "address", "indexed": true },
						{ "internalType": "address", "name": "spender", "type": "address", "indexed": true },
						{ "internalType": "uint256", "name": "value", "type": "uint256", "indexed": false }
					],
					"type": "event",
					"name": "Approval",
					"anonymous": false
				},
				{
					"inputs": [{ "internalType": "address", "name": "beacon", "type": "address", "indexed": true }],
					"type": "event",
					"name": "BeaconUpgraded",
					"anonymous": false
				},
				{
					"inputs": [
						{ "internalType": "address", "name": "caller", "type": "address", "indexed": true },
						{ "internalType": "string", "name": "oldUri", "type": "string", "indexed": false },
						{ "internalType": "string", "name": "newUri", "type": "string", "indexed": false }
					],
					"type": "event",
					"name": "ContractUriUpdated",
					"anonymous": false
				},
				{ "inputs": [], "type": "event", "name": "EIP712DomainChanged", "anonymous": false },
				{
					"inputs": [
						{ "internalType": "address", "name": "caller", "type": "address", "indexed": true },
						{ "internalType": "uint256", "name": "amount", "type": "uint256", "indexed": true }
					],
					"type": "event",
					"name": "GasTokenSalvaged",
					"anonymous": false
				},
				{
					"inputs": [{ "internalType": "uint8", "name": "version", "type": "uint8", "indexed": false }],
					"type": "event",
					"name": "Initialized",
					"anonymous": false
				},
				{
					"inputs": [{ "internalType": "address", "name": "account", "type": "address", "indexed": false }],
					"type": "event",
					"name": "Paused",
					"anonymous": false
				},
				{
					"inputs": [
						{ "internalType": "bytes32", "name": "role", "type": "bytes32", "indexed": true },
						{ "internalType": "bytes32", "name": "previousAdminRole", "type": "bytes32", "indexed": true },
						{ "internalType": "bytes32", "name": "newAdminRole", "type": "bytes32", "indexed": true }
					],
					"type": "event",
					"name": "RoleAdminChanged",
					"anonymous": false
				},
				{
					"inputs": [
						{ "internalType": "bytes32", "name": "role", "type": "bytes32", "indexed": true },
						{ "internalType": "address", "name": "account", "type": "address", "indexed": true },
						{ "internalType": "address", "name": "sender", "type": "address", "indexed": true }
					],
					"type": "event",
					"name": "RoleGranted",
					"anonymous": false
				},
				{
					"inputs": [
						{ "internalType": "bytes32", "name": "role", "type": "bytes32", "indexed": true },
						{ "internalType": "address", "name": "account", "type": "address", "indexed": true },
						{ "internalType": "address", "name": "sender", "type": "address", "indexed": true }
					],
					"type": "event",
					"name": "RoleRevoked",
					"anonymous": false
				},
				{
					"inputs": [
						{ "internalType": "address", "name": "caller", "type": "address", "indexed": true },
						{ "internalType": "address", "name": "token", "type": "address", "indexed": true },
						{ "internalType": "uint256", "name": "amount", "type": "uint256", "indexed": true }
					],
					"type": "event",
					"name": "TokenSalvaged",
					"anonymous": false
				},
				{
					"inputs": [
						{ "internalType": "address", "name": "caller", "type": "address", "indexed": true },
						{ "internalType": "address", "name": "account", "type": "address", "indexed": true },
						{ "internalType": "uint256", "name": "amount", "type": "uint256", "indexed": false }
					],
					"type": "event",
					"name": "TokensRecovered",
					"anonymous": false
				},
				{
					"inputs": [
						{ "internalType": "address", "name": "from", "type": "address", "indexed": true },
						{ "internalType": "address", "name": "to", "type": "address", "indexed": true },
						{ "internalType": "uint256", "name": "value", "type": "uint256", "indexed": false }
					],
					"type": "event",
					"name": "Transfer",
					"anonymous": false
				},
				{
					"inputs": [{ "internalType": "address", "name": "account", "type": "address", "indexed": false }],
					"type": "event",
					"name": "Unpaused",
					"anonymous": false
				},
				{
					"inputs": [{ "internalType": "address", "name": "implementation", "type": "address", "indexed": true }],
					"type": "event",
					"name": "Upgraded",
					"anonymous": false
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "BURNER_ROLE",
					"outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "CONTRACT_ADMIN_ROLE",
					"outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "DEFAULT_ADMIN_ROLE",
					"outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "DOMAIN_SEPARATOR",
					"outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "MINTER_ROLE",
					"outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "PAUSER_ROLE",
					"outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "RECOVERY_ROLE",
					"outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "SALVAGE_ROLE",
					"outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "UPGRADER_ROLE",
					"outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "accessRegistry",
					"outputs": [{ "internalType": "contract IAccessRegistry", "name": "", "type": "address" }]
				},
				{
					"inputs": [{ "internalType": "address", "name": "_accessRegistry", "type": "address" }],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "accessRegistryUpdate"
				},
				{
					"inputs": [
						{ "internalType": "address", "name": "owner", "type": "address" },
						{ "internalType": "address", "name": "spender", "type": "address" }
					],
					"stateMutability": "view",
					"type": "function",
					"name": "allowance",
					"outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }]
				},
				{
					"inputs": [
						{ "internalType": "address", "name": "spender", "type": "address" },
						{ "internalType": "uint256", "name": "amount", "type": "uint256" }
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "approve",
					"outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
				},
				{
					"inputs": [{ "internalType": "address", "name": "account", "type": "address" }],
					"stateMutability": "view",
					"type": "function",
					"name": "balanceOf",
					"outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }]
				},
				{
					"inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "burn"
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "contractUri",
					"outputs": [{ "internalType": "string", "name": "", "type": "string" }]
				},
				{
					"inputs": [{ "internalType": "string", "name": "_uri", "type": "string" }],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "contractUriUpdate"
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "decimals",
					"outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }]
				},
				{
					"inputs": [
						{ "internalType": "address", "name": "spender", "type": "address" },
						{ "internalType": "uint256", "name": "subtractedValue", "type": "uint256" }
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "decreaseAllowance",
					"outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "eip712Domain",
					"outputs": [
						{ "internalType": "bytes1", "name": "fields", "type": "bytes1" },
						{ "internalType": "string", "name": "name", "type": "string" },
						{ "internalType": "string", "name": "version", "type": "string" },
						{ "internalType": "uint256", "name": "chainId", "type": "uint256" },
						{ "internalType": "address", "name": "verifyingContract", "type": "address" },
						{ "internalType": "bytes32", "name": "salt", "type": "bytes32" },
						{ "internalType": "uint256[]", "name": "extensions", "type": "uint256[]" }
					]
				},
				{
					"inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }],
					"stateMutability": "view",
					"type": "function",
					"name": "getRoleAdmin",
					"outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }]
				},
				{
					"inputs": [
						{ "internalType": "bytes32", "name": "role", "type": "bytes32" },
						{ "internalType": "address", "name": "account", "type": "address" }
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "grantRole"
				},
				{
					"inputs": [
						{ "internalType": "bytes32", "name": "role", "type": "bytes32" },
						{ "internalType": "address", "name": "account", "type": "address" }
					],
					"stateMutability": "view",
					"type": "function",
					"name": "hasRole",
					"outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
				},
				{
					"inputs": [
						{ "internalType": "address", "name": "spender", "type": "address" },
						{ "internalType": "uint256", "name": "addedValue", "type": "uint256" }
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "increaseAllowance",
					"outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
				},
				{
					"inputs": [
						{ "internalType": "string", "name": "_name", "type": "string" },
						{ "internalType": "string", "name": "_symbol", "type": "string" },
						{ "internalType": "address", "name": "defaultAdmin", "type": "address" },
						{ "internalType": "address", "name": "minter", "type": "address" },
						{ "internalType": "address", "name": "pauser", "type": "address" }
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "initialize"
				},
				{
					"inputs": [
						{ "internalType": "address", "name": "to", "type": "address" },
						{ "internalType": "uint256", "name": "amount", "type": "uint256" }
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "mint"
				},
				{
					"inputs": [{ "internalType": "bytes[]", "name": "data", "type": "bytes[]" }],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "multicall",
					"outputs": [{ "internalType": "bytes[]", "name": "results", "type": "bytes[]" }]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "name",
					"outputs": [{ "internalType": "string", "name": "", "type": "string" }]
				},
				{
					"inputs": [{ "internalType": "address", "name": "owner", "type": "address" }],
					"stateMutability": "view",
					"type": "function",
					"name": "nonces",
					"outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }]
				},
				{ "inputs": [], "stateMutability": "nonpayable", "type": "function", "name": "pause" },
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "paused",
					"outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
				},
				{
					"inputs": [
						{ "internalType": "address", "name": "owner", "type": "address" },
						{ "internalType": "address", "name": "spender", "type": "address" },
						{ "internalType": "uint256", "name": "value", "type": "uint256" },
						{ "internalType": "uint256", "name": "deadline", "type": "uint256" },
						{ "internalType": "uint8", "name": "v", "type": "uint8" },
						{ "internalType": "bytes32", "name": "r", "type": "bytes32" },
						{ "internalType": "bytes32", "name": "s", "type": "bytes32" }
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "permit"
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "proxiableUUID",
					"outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }]
				},
				{
					"inputs": [
						{ "internalType": "address", "name": "account", "type": "address" },
						{ "internalType": "uint256", "name": "amount", "type": "uint256" }
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "recoverTokens"
				},
				{
					"inputs": [
						{ "internalType": "bytes32", "name": "role", "type": "bytes32" },
						{ "internalType": "address", "name": "account", "type": "address" }
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "renounceRole"
				},
				{
					"inputs": [
						{ "internalType": "bytes32", "name": "role", "type": "bytes32" },
						{ "internalType": "address", "name": "account", "type": "address" }
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "revokeRole"
				},
				{
					"inputs": [
						{ "internalType": "contract IERC20Upgradeable", "name": "token", "type": "address" },
						{ "internalType": "uint256", "name": "amount", "type": "uint256" }
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "salvageERC20"
				},
				{
					"inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "salvageGas"
				},
				{
					"inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }],
					"stateMutability": "view",
					"type": "function",
					"name": "supportsInterface",
					"outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "symbol",
					"outputs": [{ "internalType": "string", "name": "", "type": "string" }]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "totalSupply",
					"outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }]
				},
				{
					"inputs": [
						{ "internalType": "address", "name": "to", "type": "address" },
						{ "internalType": "uint256", "name": "amount", "type": "uint256" }
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "transfer",
					"outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
				},
				{
					"inputs": [
						{ "internalType": "address", "name": "from", "type": "address" },
						{ "internalType": "address", "name": "to", "type": "address" },
						{ "internalType": "uint256", "name": "amount", "type": "uint256" }
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "transferFrom",
					"outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
				},
				{ "inputs": [], "stateMutability": "nonpayable", "type": "function", "name": "unpause" },
				{
					"inputs": [{ "internalType": "address", "name": "newImplementation", "type": "address" }],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "upgradeTo"
				},
				{
					"inputs": [
						{ "internalType": "address", "name": "newImplementation", "type": "address" },
						{ "internalType": "bytes", "name": "data", "type": "bytes" }
					],
					"stateMutability": "payable",
					"type": "function",
					"name": "upgradeToAndCall"
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "version",
					"outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }]
				}
			],
			"devdoc": {
				"kind": "dev",
				"methods": {
					"DOMAIN_SEPARATOR()": { "details": "See {IERC20Permit-DOMAIN_SEPARATOR}." },
					"accessRegistryUpdate(address)": {
						"details": "This function emits a {AccessRegistryUpdated} event as part of {_accessRegistryUpdate} when the access registry address is successfully updated.",
						"params": { "_accessRegistry": "The address of the contract that implements {IAccessRegistry}." }
					},
					"allowance(address,address)": { "details": "See {IERC20-allowance}." },
					"approve(address,uint256)": {
						"details": "Calling Conditions: - {ERC20F} is not paused. - The `spender` must be a non-zero address. (checked internally by {ERC20Upgradeable}.{_approve}) If the spender is already authorized to spend a non-zero amount of token, the `amount` parameter will overwrite the previously authorized amount. Upon successful execution function emits an {Approval} event as part of {ERC20Upgradeable._approve}.",
						"params": { "amount": "The amount allowed to be spent.", "spender": "The address getting an allowance." },
						"returns": { "_0": "True value indicating whether the approval was successful." }
					},
					"balanceOf(address)": { "details": "See {IERC20-balanceOf}." },
					"burn(uint256)": {
						"details": "Calling Conditions: - Can only be invoked by the address that has the role \"BURNER_ROLE\". - {ERC20F} is not paused. (checked internally by {_beforeTokenTransfer}) - `amount` is less than or equal to the caller's balance. (checked internally by {ERC20Upgradeable}.{_burn}) - `amount` is greater than 0. (checked internally by {ERC20Upgradeable}.{_burn}) This function emits a {Transfer} event as part of {ERC20Upgradeable._burn}.",
						"params": { "amount": "The number of tokens to be burned." }
					},
					"constructor": { "custom:oz-upgrades-unsafe-allow": "constructor" },
					"contractUriUpdate(string)": {
						"details": "This function emits a {ContractUriUpdated} event.",
						"params": { "_uri": "A URI link pointing to the current URI associated with the contract." }
					},
					"decimals()": {
						"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
					},
					"decreaseAllowance(address,uint256)": {
						"details": "Calling Conditions: - {ERC20F} is not paused. - The `spender` must be a non-zero address. (checked internally by {ERC20Upgradeable}.{_approve}) - Allowance to any spender cannot assume a negative value. The request is only processed if the requested decrease is less than the current allowance. (checked internally by {ERC20Upgradeable.decreaseAllowance}) This function emits an {Approval} event as part of {ERC20Upgradeable._approve}.",
						"params": {
							"spender": "The spender's address.",
							"subtractedValue": "The Amount by which allowance is decreased."
						},
						"returns": { "_0": "True if successful." }
					},
					"eip712Domain()": { "details": "See {EIP-5267}. _Available since v4.9._" },
					"getRoleAdmin(bytes32)": {
						"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
					},
					"grantRole(bytes32,address)": {
						"details": "Calling Conditions: - Caller must be the role admin of the `role`. - Non-zero address `account`. This function emits a {RoleGranted} event as part of {AccessControlUpgradeable._grantRole}.",
						"params": { "account": "The address to which role is granted", "role": "The role that will be granted." }
					},
					"hasRole(bytes32,address)": { "details": "Returns `true` if `account` has been granted `role`." },
					"increaseAllowance(address,uint256)": {
						"details": "Calling Conditions: - {ERC20F} is not paused. - The `spender` must be a non-zero address. (checked internally by {ERC20Upgradeable}.{_approve}) This function emits an {Approval} event as part of {ERC20Upgradeable._approve}.",
						"params": {
							"addedValue": "The amount by which allowance is increased.",
							"spender": "The spender's address."
						},
						"returns": { "_0": "True if successful." }
					},
					"initialize(string,string,address,address,address)": {
						"details": "Calling Conditions: - Can only be invoked once (controlled via the {initializer} modifier). - Non-zero address `defaultAdmin`. - Non-zero address `minter`. - Non-zero address `pauser`.",
						"params": {
							"_name": "The name of the token.",
							"_symbol": "The symbol of the token.",
							"defaultAdmin": "The account to be granted the \"DEFAULT_ADMIN_ROLE\".",
							"minter": "The account to be granted the \"MINTER_ROLE\".",
							"pauser": "The account to be granted the \"PAUSER_ROLE\"."
						}
					},
					"mint(address,uint256)": {
						"details": "Calling Conditions: - Can only be invoked by the address that has the role \"MINTER_ROLE\". - {ERC20F} is not paused. (checked internally by {_beforeTokenTransfer}) - `to` is a non-zero address. (checked internally by {ERC20Upgradeable}.{_mint}) - `to` is allowed to receive tokens. This function emits a {Transfer} event as part of {ERC20Upgradeable._mint}.",
						"params": {
							"amount": "The number of tokens to be issued.",
							"to": "The address that will receive the issued tokens."
						}
					},
					"multicall(bytes[])": {
						"custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
						"details": "Receives and executes a batch of function calls on this contract."
					},
					"name()": { "details": "Returns the name of the token." },
					"nonces(address)": { "details": "See {IERC20Permit-nonces}." },
					"pause()": {
						"details": "Calling Conditions: - Contract is not paused. (checked internally by {Pausable._pause}) This function emits a {Paused} event as part of {PausableUpgradeable._pause}."
					},
					"paused()": { "details": "Returns true if the contract is paused, and false otherwise." },
					"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
						"details": "If the Spender already has a non-zero allowance by the same caller(approver), the allowance will be set to reflect the new amount. Calling Conditions: - {ERC20F} is not paused. - The `owner` must be a non-zero address. (checked internally by {ERC20Upgradeable}.{_approve}) - `spender` must be a non-zero address. (checked internally by {ERC20Upgradeable}.{_approve}) - `deadline` must be a timestamp in the future. (checked internally by {ERC20PermitUpgradeable}.{permit}) - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. (checked internally by {ERC20PermitUpgradeable}.{permit}) - The signature must use `owner`'s current nonce This function emits an {Approval} event as part of {ERC20Upgradeable._approve}.",
						"params": {
							"deadline": "The expiry timestamp of the signature.",
							"owner": "The address that will sign the approval.",
							"r": "The first 32 bytes of the ECDSA signature.",
							"s": "The second 32 bytes of the ECDSA signature.",
							"spender": "The address that will receive the approval.",
							"v": "The recovery byte of the ECDSA signature.",
							"value": "The allowance that will be approved."
						}
					},
					"proxiableUUID()": {
						"details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
					},
					"recoverTokens(address,uint256)": {
						"details": "Calling Conditions: - `caller` of this function must have the \"RECOVERY_ROLE\". - {ERC20F} is not paused.(checked internally by {_beforeTokenTransfer}). - `account` address must be not be allowed to hold tokens. - `account` must be a non-zero address. (checked internally in {ERC20Upgradeable._transfer}) - `amount` is greater than 0. - `amount` is less than or equal to the balance of the account. (checked internally in {ERC20Upgradeable._transfer}) This function emits a {TokensRecovered} event, signalling that the funds of the given address were recovered.",
						"params": {
							"account": "The address to recover the tokens from.",
							"amount": "The amount to be recovered from the balance of the `account`."
						}
					},
					"renounceRole(bytes32,address)": {
						"details": "Only the account itself can renounce its own roles, and not any other account. Calling Conditions: - Cannot renounce DEFAULT_ADMIN_ROLE. - 'account' is the caller of the transaction."
					},
					"revokeRole(bytes32,address)": {
						"details": "Calling Conditions: - Caller must be the role admin of the `role`. - Non-zero address `account`. This function emits a {RoleRevoked} event as part of {AccessControlUpgradeable._revokeRole}.",
						"params": { "account": "The address from which role is revoked", "role": "The role that will be revoked." }
					},
					"salvageERC20(address,uint256)": {
						"details": "Calling Conditions: - `amount` is greater than 0. This function emits a {TokenSalvaged} event, indicating that funds were salvaged.",
						"params": { "amount": "The amount to be salvaged.", "token": "The ERC20 asset which is to be salvaged." }
					},
					"salvageGas(uint256)": {
						"details": "Calling Conditions: - `amount` is greater than 0. This function emits a {GasTokenSalvaged} event, indicating that funds were salvaged.",
						"params": { "amount": "The amount to be salvaged." }
					},
					"supportsInterface(bytes4)": {
						"details": "This function returns `true` if the interface is supported, otherwise it returns `false`.",
						"returns": { "_0": "`true` if the interface is supported, otherwise it returns `false`." }
					},
					"symbol()": { "details": "Returns the symbol of the token, usually a shorter version of the name." },
					"totalSupply()": { "details": "See {IERC20-totalSupply}." },
					"transfer(address,uint256)": {
						"details": "Calling Conditions: - {ERC20F} is not paused. (checked internally by {_beforeTokenTransfer}) - The `sender` is allowed to send tokens. - The `to` is allowed to receive tokens. - `to` is a non-zero address. (checked internally by {ERC20Upgradeable}.{_transfer}) - `amount` is not greater than sender's balance. (checked internally by {ERC20Upgradeable}.{_transfer}) This function emits a {Transfer} event as part of {ERC20Upgradeable._transfer}.",
						"params": {
							"amount": "The number of tokens that will be sent to the `recipient`.",
							"to": "The address that will receive the tokens."
						},
						"returns": { "_0": "True if the function was successful." }
					},
					"transferFrom(address,address,uint256)": {
						"details": "Calling Conditions: - {ERC20F} is not paused. (checked internally by {_beforeTokenTransfer}) - The `from` is allowed to send tokens. - The `to` is allowed to receive tokens. - `from` is a non-zero address. (checked internally by {ERC20Upgradeable}.{_transfer}) - `to` is a non-zero address. (checked internally by {ERC20Upgradeable}.{_transfer}) - `amount` is not greater than `from`'s balance or caller's allowance of `from`'s funds. (checked internally   by {ERC20Upgradeable}.{transferFrom}) - `amount` is greater than 0. (checked internally by {_spendAllowance})",
						"params": {
							"amount": "The number of tokens that will be sent to the `to` (recipient).",
							"from": "The address that tokens will be transferred on behalf of.",
							"to": "The address that will receive the tokens."
						},
						"returns": { "_0": "True if the function was successful." }
					},
					"unpause()": {
						"details": "Calling Conditions: - Contract is paused. (checked internally by {Pausable._unpause}) This function emits an {Unpaused} event as part of {PausableUpgradeable._unpause}."
					},
					"upgradeTo(address)": {
						"custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
						"details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
					},
					"upgradeToAndCall(address,bytes)": {
						"custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
						"details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
					},
					"version()": {
						"details": "This function get the latest deployment version from the {Initializable}.{_getInitializedVersion}. With every new deployment, the version number will be incremented.",
						"returns": { "_0": "The version of the contract." }
					}
				},
				"version": 1
			},
			"userdoc": {
				"kind": "user",
				"methods": {
					"BURNER_ROLE()": {
						"notice": "The Access Control identifier for the Burner Role. An account with \"BURNER_ROLE\" can burn tokens."
					},
					"CONTRACT_ADMIN_ROLE()": {
						"notice": "The Access Control identifier for the Contract Admin Role. An account with \"CONTRACT_ADMIN_ROLE\" can update the contract URI."
					},
					"MINTER_ROLE()": {
						"notice": "The Access Control identifier for the Minter Role. An account with \"MINTER_ROLE\" can mint tokens."
					},
					"PAUSER_ROLE()": {
						"notice": "The Access Control identifier for the Pauser Role. An account with \"PAUSER_ROLE\" can pause the contract."
					},
					"RECOVERY_ROLE()": {
						"notice": "The Access Control identifier for the Recovery Role. An account with \"RECOVERY_ROLE\" can recover tokens."
					},
					"SALVAGE_ROLE()": {
						"notice": "The Access Control identifier for the Salvager Role. An account with \"SALVAGE_ROLE\" can salvage tokens and gas."
					},
					"UPGRADER_ROLE()": {
						"notice": "The Access Control identifier for the Upgrader Role. An account with \"UPGRADER_ROLE\" can upgrade the implementation contract address."
					},
					"accessRegistry()": { "notice": "This field is the address of the {AccessRegistry} contract." },
					"accessRegistryUpdate(address)": { "notice": "This is a function used to update `accessRegistry` field." },
					"approve(address,uint256)": {
						"notice": "This function allows the owner of the tokens to authorize another address to spend a certain amount of token on their behalf. The `spender` parameter is the address that is being authorized to spend the token, and the `amount` parameter is the maximum number of tokens that the spender is authorized to spend."
					},
					"burn(uint256)": {
						"notice": "This is a function used to burn tokens. The caller will burn tokens from their own address."
					},
					"contractUri()": {
						"notice": "This field is a URI (Uniform Resource Identifier) that points to a JSON file with metadata about the contract."
					},
					"contractUriUpdate(string)": { "notice": "This is a function used to update `contractUri` field." },
					"decreaseAllowance(address,uint256)": {
						"notice": "This function decrease the allowance of the `spender` by `subtractedValue`. The new allowance will be the difference of previous amount and `subtractedValue`."
					},
					"grantRole(bytes32,address)": { "notice": "This function grants an Access Control role to an account" },
					"increaseAllowance(address,uint256)": {
						"notice": "This function increases the allowance of the `spender` by `addedValue`. This means that the caller is delegating the `spender` to spend more funds than previously allowed. The resultant allowance will be a sum of previous allowance and the `addedValue`."
					},
					"initialize(string,string,address,address,address)": {
						"notice": "This function configures the ERC20F contract with the initial state and granting privileged roles."
					},
					"mint(address,uint256)": {
						"notice": "This is a function used to issue new tokens. The caller will issue tokens to the `to` address."
					},
					"pause()": { "notice": "This is a function used to pause the contract." },
					"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
						"notice": "This is a function that allows an owner to provide off-chain permission for a specific `spender` to spend a certain amount of tokens on their behalf, using an ECDSA signature. This signature is then provided to this {ERC20F} contract which verifies the signature and updates the allowance. This exercise reduces the number of transactions required to approve a transfer."
					},
					"recoverTokens(address,uint256)": {
						"notice": "This is a function used to recover tokens from an address not on the Allowlist."
					},
					"renounceRole(bytes32,address)": {
						"notice": "This function renounces an Access Control role from an account, except for the \"DEFAULT_ADMIN_ROLE\"."
					},
					"revokeRole(bytes32,address)": { "notice": "This function revokes an Access Control role from an account" },
					"salvageERC20(address,uint256)": {
						"notice": "A function used to salvage ERC20 tokens sent to the contract using this abstract contract."
					},
					"salvageGas(uint256)": {
						"notice": "A function used to salvage ETH sent to the contract using this abstract contract."
					},
					"supportsInterface(bytes4)": {
						"notice": "This is a function used to check if an interface is supported by this contract."
					},
					"transfer(address,uint256)": {
						"notice": "This is a function used to transfer tokens from the sender to the `to` address."
					},
					"transferFrom(address,address,uint256)": {
						"notice": "This is a function used to transfer tokens on behalf of the `from` address to the `to` address. This function emits an {Approval} event as part of {ERC20Upgradeable._approve}. This function emits a {Transfer} event as part of {ERC20Upgradeable._transfer}."
					},
					"unpause()": { "notice": "This is a function used to unpause the contract." },
					"version()": { "notice": "This is a function used to get the version of the contract." }
				},
				"version": 1
			}
		},
		"settings": {
			"remappings": [
				"@openzeppelin/=node_modules/@openzeppelin/",
				"eth-gas-reporter/=node_modules/eth-gas-reporter/",
				"forge-std/=lib/forge-std/src/",
				"hardhat/=node_modules/hardhat/"
			],
			"optimizer": { "enabled": true, "runs": 200 },
			"metadata": { "useLiteralContent": true, "bytecodeHash": "ipfs" },
			"compilationTarget": { "contracts/ERC20F.sol": "ERC20F" },
			"evmVersion": "shanghai",
			"libraries": {}
		},
		"sources": {
			"contracts/ERC20F.sol": {
				"keccak256": "0x1541423705aa8fa7d108ce5c3e4be2b08712f588aa1e2cdc0dd1bd0b80abcc0e",
				"urls": [],
				"content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n// Copyright (C) 2024 Fireblocks <support@fireblocks.com>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\npragma solidity 0.8.20;\n\nimport {ERC20PermitUpgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\";\nimport {ERC20Upgradeable, IERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport {IERC1822ProxiableUpgradeable} from \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\";\nimport {IERC1967Upgradeable} from \"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\";\nimport {IERC20MetadataUpgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport {IERC5267Upgradeable} from \"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\";\nimport {IERC20PermitUpgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {MulticallUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport {IERC20Errors} from \"./library/Errors/interface/IERC20Errors.sol\";\n\nimport {LibErrors} from \"./library/Errors/LibErrors.sol\";\nimport {AccessRegistrySubscriptionUpgradeable} from \"./library/AccessRegistry/AccessRegistrySubscriptionUpgradeable.sol\";\nimport {ContractUriUpgradeable} from \"./library/Utils/ContractUriUpgradeable.sol\";\nimport {SalvageUpgradeable} from \"./library/Utils/SalvageUpgradeable.sol\";\nimport {PauseUpgradeable} from \"./library/Utils/PauseUpgradeable.sol\";\nimport {RoleAccessUpgradeable} from \"./library/Utils/RoleAccessUpgradeable.sol\";\n\n/**\n * @title ERC20F\n * @author Fireblocks\n * @notice This contract represents a fungible token within the Fireblocks ecosystem of contracts.\n *\n * The contract utilizes the UUPS (Universal Upgradeable Proxy Standard) for seamless upgradability. This standard\n * enables the contract to be easily upgraded without disrupting its state. By following the UUPS proxy pattern, the\n * ERC20F logic is separated from the storage, allowing upgrades while preserving the existing data. This\n * approach ensures that the contract can adapt and evolve over time, incorporating improvements and new features and\n * mitigating potential attack vectors in future.\n *\n * The ERC20F contract Role Based Access Control employs following roles:\n *\n *  - UPGRADER_ROLE\n *  - PAUSER_ROLE\n *  - CONTRACT_ADMIN_ROLE\n *  - MINTER_ROLE\n *  - BURNER_ROLE\n *  - RECOVERY_ROLE\n *  - SALVAGE_ROLE\n *\n * The ERC20F Token contract can utilize an Access Registry contract to retrieve information on whether an account\n * is authorized to interact with the system.\n */\ncontract ERC20F is\n\tInitializable,\n\tERC20Upgradeable,\n\tERC20PermitUpgradeable,\n\tAccessRegistrySubscriptionUpgradeable,\n\tMulticallUpgradeable,\n\tSalvageUpgradeable,\n\tContractUriUpgradeable,\n\tPauseUpgradeable,\n\tRoleAccessUpgradeable,\n\tIERC20Errors,\n\tUUPSUpgradeable\n{\n\t/// Constants\n\n\t/**\n\t * @notice The Access Control identifier for the Upgrader Role.\n\t * An account with \"UPGRADER_ROLE\" can upgrade the implementation contract address.\n\t *\n\t * @dev This constant holds the hash of the string \"UPGRADER_ROLE\".\n\t */\n\tbytes32 public constant UPGRADER_ROLE = keccak256(\"UPGRADER_ROLE\");\n\n\t/**\n\t * @notice The Access Control identifier for the Pauser Role.\n\t * An account with \"PAUSER_ROLE\" can pause the contract.\n\t *\n\t * @dev This constant holds the hash of the string \"PAUSER_ROLE\".\n\t */\n\tbytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n\t/**\n\t * @notice The Access Control identifier for the Contract Admin Role.\n\t * An account with \"CONTRACT_ADMIN_ROLE\" can update the contract URI.\n\t *\n\t * @dev This constant holds the hash of the string \"CONTRACT_ADMIN_ROLE\".\n\t */\n\tbytes32 public constant CONTRACT_ADMIN_ROLE = keccak256(\"CONTRACT_ADMIN_ROLE\");\n\n\t/**\n\t * @notice The Access Control identifier for the Minter Role.\n\t * An account with \"MINTER_ROLE\" can mint tokens.\n\t *\n\t * @dev This constant holds the hash of the string \"MINTER_ROLE\".\n\t */\n\tbytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n\t/**\n\t * @notice The Access Control identifier for the Burner Role.\n\t * An account with \"BURNER_ROLE\" can burn tokens.\n\t *\n\t * @dev This constant holds the hash of the string \"BURNER_ROLE\".\n\t */\n\tbytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\");\n\n\t/**\n\t * @notice The Access Control identifier for the Recovery Role.\n\t * An account with \"RECOVERY_ROLE\" can recover tokens.\n\t *\n\t * @dev This constant holds the hash of the string \"RECOVERY_ROLE\".\n\t */\n\tbytes32 public constant RECOVERY_ROLE = keccak256(\"RECOVERY_ROLE\");\n\n\t/**\n\t * @notice The Access Control identifier for the Salvager Role.\n\t * An account with \"SALVAGE_ROLE\" can salvage tokens and gas.\n\t *\n\t * @dev This constant holds the hash of the string \"SALVAGE_ROLE\".\n\t */\n\tbytes32 public constant SALVAGE_ROLE = keccak256(\"SALVAGE_ROLE\");\n\n\t/// Events\n\n\t/**\n\t * @notice This event is logged when the funds are recovered from an address that is not allowed\n\t * to participate in the system.\n\t *\n\t * @param caller The (indexed) address of the caller.\n\t * @param account The (indexed) account the tokens were recovered from.\n\t * @param amount The number of tokens recovered.\n\t */\n\tevent TokensRecovered(address indexed caller, address indexed account, uint256 amount);\n\n\t/// Functions\n\n\t/**\n\t * @notice This function acts as the constructor of the contract.\n\t * @dev This function disables the initializers.\n\t */\n\t/// @custom:oz-upgrades-unsafe-allow constructor\n\tconstructor() {\n\t\t_disableInitializers();\n\t}\n\n\t/**\n\t * @notice This function configures the ERC20F contract with the initial state and granting\n\t * privileged roles.\n\t *\n\t * @dev Calling Conditions:\n\t *\n\t * - Can only be invoked once (controlled via the {initializer} modifier).\n\t * - Non-zero address `defaultAdmin`.\n\t * - Non-zero address `minter`.\n\t * - Non-zero address `pauser`.\n\t *\n\t * @param _name The name of the token.\n\t * @param _symbol The symbol of the token.\n\t * @param defaultAdmin The account to be granted the \"DEFAULT_ADMIN_ROLE\".\n\t * @param minter The account to be granted the \"MINTER_ROLE\".\n\t * @param pauser The account to be granted the \"PAUSER_ROLE\".\n\t */\n\tfunction initialize(\n\t\tstring calldata _name,\n\t\tstring calldata _symbol,\n\t\taddress defaultAdmin,\n\t\taddress minter,\n\t\taddress pauser\n\t) external initializer {\n\t\tif (defaultAdmin == address(0) || pauser == address(0) || minter == address(0)) {\n\t\t\trevert LibErrors.InvalidAddress();\n\t\t}\n\n\t\t__UUPSUpgradeable_init();\n\t\t__ERC20_init(_name, _symbol);\n\t\t__ERC20Permit_init(_name);\n\t\t__Multicall_init();\n\t\t__AccessRegistrySubscription_init(address(0));\n\t\t__Salvage_init();\n\t\t__ContractUri_init(\"\");\n\t\t__Pause_init();\n\t\t__RoleAccess_init();\n\n\t\t_grantRole(DEFAULT_ADMIN_ROLE, defaultAdmin);\n\t\t_grantRole(MINTER_ROLE, minter);\n\t\t_grantRole(PAUSER_ROLE, pauser);\n\t}\n\n\t/**\n\t * @notice This is a function used to issue new tokens.\n\t * The caller will issue tokens to the `to` address.\n\t *\n\t * @dev Calling Conditions:\n\t *\n\t * - Can only be invoked by the address that has the role \"MINTER_ROLE\".\n\t * - {ERC20F} is not paused. (checked internally by {_beforeTokenTransfer})\n\t * - `to` is a non-zero address. (checked internally by {ERC20Upgradeable}.{_mint})\n\t * - `to` is allowed to receive tokens.\n\t *\n\t * This function emits a {Transfer} event as part of {ERC20Upgradeable._mint}.\n\t *\n\t * @param to The address that will receive the issued tokens.\n\t * @param amount The number of tokens to be issued.\n\t */\n\tfunction mint(address to, uint256 amount) external virtual onlyRole(MINTER_ROLE) {\n\t\t_requireHasAccess(to, false);\n\t\t_mint(to, amount);\n\t}\n\n\t/**\n\t * @notice This is a function used to burn tokens.\n\t * The caller will burn tokens from their own address.\n\t *\n\t * @dev Calling Conditions:\n\t *\n\t * - Can only be invoked by the address that has the role \"BURNER_ROLE\".\n\t * - {ERC20F} is not paused. (checked internally by {_beforeTokenTransfer})\n\t * - `amount` is less than or equal to the caller's balance. (checked internally by {ERC20Upgradeable}.{_burn})\n\t * - `amount` is greater than 0. (checked internally by {ERC20Upgradeable}.{_burn})\n\t *\n\t * This function emits a {Transfer} event as part of {ERC20Upgradeable._burn}.\n\t *\n\t * @param amount The number of tokens to be burned.\n\t */\n\tfunction burn(uint256 amount) external virtual onlyRole(BURNER_ROLE) {\n\t\tif (amount == 0) revert LibErrors.ZeroAmount();\n\t\t_requireHasAccess(_msgSender(), true);\n\t\t_burn(_msgSender(), amount);\n\t}\n\n\t/**\n\t * @notice This is a function used to recover tokens from an address not on the Allowlist.\n\t *\n\t * @dev Calling Conditions:\n\t *\n\t * - `caller` of this function must have the \"RECOVERY_ROLE\".\n\t * - {ERC20F} is not paused.(checked internally by {_beforeTokenTransfer}).\n\t * - `account` address must be not be allowed to hold tokens.\n\t * - `account` must be a non-zero address. (checked internally in {ERC20Upgradeable._transfer})\n\t * - `amount` is greater than 0.\n\t * - `amount` is less than or equal to the balance of the account. (checked internally in {ERC20Upgradeable._transfer})\n\t *\n\t * This function emits a {TokensRecovered} event, signalling that the funds of the given address were recovered.\n\t *\n\t * @param account The address to recover the tokens from.\n\t * @param amount The amount to be recovered from the balance of the `account`.\n\t */\n\tfunction recoverTokens(address account, uint256 amount) external virtual onlyRole(RECOVERY_ROLE) {\n\t\tif (amount == 0) revert LibErrors.ZeroAmount();\n\t\tif (address(accessRegistry) == address(0)) revert LibErrors.AccessRegistryNotSet();\n\t\tif (accessRegistry.hasAccess(account, _msgSender(), _msgData())) revert LibErrors.RecoveryOnActiveAccount(account);\n\t\temit TokensRecovered(_msgSender(), account, amount);\n\t\t_transfer(account, _msgSender(), amount);\n\t}\n\n\t/**\n\t * @notice This is a function used to get the version of the contract.\n\t * @dev This function get the latest deployment version from the {Initializable}.{_getInitializedVersion}.\n\t * With every new deployment, the version number will be incremented.\n\t * @return The version of the contract.\n\t */\n\tfunction version() external view virtual returns (uint64) {\n\t\treturn uint64(super._getInitializedVersion());\n\t}\n\n\t/**\n\t * @notice This is a function that allows an owner to provide off-chain permission for a specific `spender` to spend\n\t * a certain amount of tokens on their behalf, using an ECDSA signature. This signature is then provided to this\n\t * {ERC20F} contract which verifies the signature and updates the allowance. This exercise reduces the number\n\t * of transactions required to approve a transfer.\n\t *\n\t * @dev If the Spender already has a non-zero allowance by the same caller(approver), the allowance will be set to\n\t * reflect the new amount.\n\t *\n\t * Calling Conditions:\n\t *\n\t * - {ERC20F} is not paused.\n\t * - The `owner` must be a non-zero address. (checked internally by {ERC20Upgradeable}.{_approve})\n\t * - `spender` must be a non-zero address. (checked internally by {ERC20Upgradeable}.{_approve})\n\t * - `deadline` must be a timestamp in the future. (checked internally by {ERC20PermitUpgradeable}.{permit})\n\t * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n\t * over the EIP712-formatted function arguments. (checked internally by {ERC20PermitUpgradeable}.{permit})\n\t * - The signature must use `owner`'s current nonce\n\t *\n\t * This function emits an {Approval} event as part of {ERC20Upgradeable._approve}.\n\t *\n\t * @param owner The address that will sign the approval.\n\t * @param spender The address that will receive the approval.\n\t * @param value The allowance that will be approved.\n\t * @param deadline The expiry timestamp of the signature.\n\t * @param v The recovery byte of the ECDSA signature.\n\t * @param r The first 32 bytes of the ECDSA signature.\n\t * @param s The second 32 bytes of the ECDSA signature.\n\t */\n\tfunction permit(\n\t\taddress owner,\n\t\taddress spender,\n\t\tuint256 value,\n\t\tuint256 deadline,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) public virtual override whenNotPaused {\n\t\tsuper.permit(owner, spender, value, deadline, v, r, s);\n\t}\n\n\t/**\n\t * @notice This function allows the owner of the tokens to authorize another address to spend a certain\n\t * amount of token on their behalf. The `spender` parameter is the address that is being authorized\n\t * to spend the token, and the `amount` parameter is the maximum number of tokens that the spender\n\t * is authorized to spend.\n\t *\n\t * @dev Calling Conditions:\n\t *\n\t * - {ERC20F} is not paused.\n\t * - The `spender` must be a non-zero address. (checked internally by {ERC20Upgradeable}.{_approve})\n\t *\n\t * If the spender is already authorized to spend a non-zero amount of token, the `amount` parameter\n\t * will overwrite the previously authorized amount.\n\t *\n\t * Upon successful execution function emits an {Approval} event as part of {ERC20Upgradeable._approve}.\n\t *\n\t * @param spender The address getting an allowance.\n\t * @param amount The amount allowed to be spent.\n\t * @return True value indicating whether the approval was successful.\n\t */\n\tfunction approve(address spender, uint256 amount) public virtual override whenNotPaused returns (bool) {\n\t\treturn super.approve(spender, amount);\n\t}\n\n\t/**\n\t * @notice This function increases the allowance of the `spender` by `addedValue`. This means that the caller is\n\t * delegating the `spender` to spend more funds than previously allowed. The resultant allowance will be a sum of\n\t * previous allowance and the `addedValue`.\n\t *\n\t * @dev Calling Conditions:\n\t *\n\t * - {ERC20F} is not paused.\n\t * - The `spender` must be a non-zero address. (checked internally by {ERC20Upgradeable}.{_approve})\n\t *\n\t * This function emits an {Approval} event as part of {ERC20Upgradeable._approve}.\n\t *\n\t * @param spender The spender's address.\n\t * @param addedValue The amount by which allowance is increased.\n\t * @return True if successful.\n\t */\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual override whenNotPaused returns (bool) {\n\t\treturn super.increaseAllowance(spender, addedValue);\n\t}\n\n\t/**\n\t * @notice This function decrease the allowance of the `spender` by `subtractedValue`. The new allowance will be the\n\t * difference of previous amount and `subtractedValue`.\n\t *\n\t * @dev Calling Conditions:\n\t *\n\t * - {ERC20F} is not paused.\n\t * - The `spender` must be a non-zero address. (checked internally by {ERC20Upgradeable}.{_approve})\n\t * - Allowance to any spender cannot assume a negative value. The request is only processed if the requested\n\t * decrease is less than the current allowance. (checked internally by {ERC20Upgradeable.decreaseAllowance})\n\t *\n\t * This function emits an {Approval} event as part of {ERC20Upgradeable._approve}.\n\t *\n\t * @param spender The spender's address.\n\t * @param subtractedValue The Amount by which allowance is decreased.\n\t * @return True if successful.\n\t */\n\tfunction decreaseAllowance(\n\t\taddress spender,\n\t\tuint256 subtractedValue\n\t) public virtual override whenNotPaused returns (bool) {\n\t\treturn super.decreaseAllowance(spender, subtractedValue);\n\t}\n\n\t/**\n\t * @notice This is a function used to transfer tokens from the sender to\n\t * the `to` address.\n\t *\n\t * @dev Calling Conditions:\n\t *\n\t * - {ERC20F} is not paused. (checked internally by {_beforeTokenTransfer})\n\t * - The `sender` is allowed to send tokens.\n\t * - The `to` is allowed to receive tokens.\n\t * - `to` is a non-zero address. (checked internally by {ERC20Upgradeable}.{_transfer})\n\t * - `amount` is not greater than sender's balance. (checked internally by {ERC20Upgradeable}.{_transfer})\n\t *\n\t * This function emits a {Transfer} event as part of {ERC20Upgradeable._transfer}.\n\t *\n\t * @param to The address that will receive the tokens.\n\t * @param amount The number of tokens that will be sent to the `recipient`.\n\t * @return True if the function was successful.\n\t */\n\tfunction transfer(address to, uint256 amount) public virtual override returns (bool) {\n\t\t_requireHasAccess(_msgSender(), true);\n\t\t_requireHasAccess(to, false);\n\t\treturn super.transfer(to, amount);\n\t}\n\n\t/**\n\t * @notice This is a function used to transfer tokens on behalf of the `from` address to\n\t * the `to` address.\n\t *\n\t * This function emits an {Approval} event as part of {ERC20Upgradeable._approve}.\n\t * This function emits a {Transfer} event as part of {ERC20Upgradeable._transfer}.\n\t *\n\t * @dev Calling Conditions:\n\t *\n\t * - {ERC20F} is not paused. (checked internally by {_beforeTokenTransfer})\n\t * - The `from` is allowed to send tokens.\n\t * - The `to` is allowed to receive tokens.\n\t * - `from` is a non-zero address. (checked internally by {ERC20Upgradeable}.{_transfer})\n\t * - `to` is a non-zero address. (checked internally by {ERC20Upgradeable}.{_transfer})\n\t * - `amount` is not greater than `from`'s balance or caller's allowance of `from`'s funds. (checked internally\n\t *   by {ERC20Upgradeable}.{transferFrom})\n\t * - `amount` is greater than 0. (checked internally by {_spendAllowance})\n\t *\n\t * @param from The address that tokens will be transferred on behalf of.\n\t * @param to The address that will receive the tokens.\n\t * @param amount The number of tokens that will be sent to the `to` (recipient).\n\t * @return True if the function was successful.\n\t */\n\tfunction transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n\t\t_requireHasAccess(from, true);\n\t\t_requireHasAccess(to, false);\n\t\treturn super.transferFrom(from, to, amount);\n\t}\n\n\t/**\n\t * @notice This is a function used to check if an interface is supported by this contract.\n\t * @dev This function returns `true` if the interface is supported, otherwise it returns `false`.\n\t * @return `true` if the interface is supported, otherwise it returns `false`.\n\t */\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n\t\treturn\n\t\t\tinterfaceId == type(IERC20Upgradeable).interfaceId ||\n\t\t\tinterfaceId == type(IERC20MetadataUpgradeable).interfaceId ||\n\t\t\tinterfaceId == type(IERC1967Upgradeable).interfaceId ||\n\t\t\tinterfaceId == type(IERC1822ProxiableUpgradeable).interfaceId ||\n\t\t\tinterfaceId == type(IERC20PermitUpgradeable).interfaceId ||\n\t\t\tinterfaceId == type(IERC5267Upgradeable).interfaceId ||\n\t\t\tsuper.supportsInterface(interfaceId);\n\t}\n\n\t/**\n\t * @notice This function works as a middle layer and performs some checks before\n\t * it allows a transfer to operate.\n\t *\n\t * @dev A hook inherited from ERC20Upgradeable.\n\t *\n\t * This function performs the following checks, and reverts when not met:\n\t *\n\t * - {ERC20F} is not paused.\n\t *\n\t * @param from The address that sent the tokens.\n\t * @param to The address that receives the transfer `amount`.\n\t * @param amount The number of tokens sent to the `to` address.\n\t */\n\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override whenNotPaused {\n\t\tsuper._beforeTokenTransfer(from, to, amount);\n\t}\n\n\t/**\n\t * @notice This is a function that applies any validations required to allow upgrade operations.\n\t *\n\t * @dev Reverts when the caller does not have the \"UPGRADER_ROLE\".\n\t *\n\t * Calling Conditions:\n\t *\n\t * - Only the \"UPGRADER_ROLE\" can execute.\n\t *\n\t * @param newImplementation The address of the new logic contract.\n\t */\n\t/* solhint-disable no-empty-blocks */\n\tfunction _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(UPGRADER_ROLE) {}\n\n\t/**\n\t * @notice This is a function that applies any validations required to allow salvage operations (like salvageERC20).\n\t *\n\t * @dev Reverts when the caller does not have the \"SALVAGE_ROLE\".\n\t *\n\t * Calling Conditions:\n\t *\n\t * - Only the \"SALVAGE_ROLE\" can execute.\n\t * - {ERC20F} is not paused.\n\t */\n\t/* solhint-disable no-empty-blocks */\n\tfunction _authorizeSalvageERC20() internal virtual override whenNotPaused onlyRole(SALVAGE_ROLE) {}\n\n\t/**\n\t * @notice This is a function that applies any validations required to allow salvage operations (like salvageGas).\n\t *\n\t * @dev Reverts when the caller does not have the \"SALVAGE_ROLE\".\n\t *\n\t * Calling Conditions:\n\t *\n\t * - Only the \"SALVAGE_ROLE\" can execute.\n\t * - {ERC20F} is not paused.\n\t */\n\t/* solhint-disable no-empty-blocks */\n\tfunction _authorizeSalvageGas() internal virtual override whenNotPaused onlyRole(SALVAGE_ROLE) {}\n\n\t/**\n\t * @notice This is a function that applies any validations required to allow Contract Uri updates.\n\t *\n\t * @dev Reverts when the caller does not have the \"CONTRACT_ADMIN_ROLE\".\n\t *\n\t * Calling Conditions:\n\t *\n\t * - Only the \"CONTRACT_ADMIN_ROLE\" can execute.\n\t * - {ERC20F} is not paused.\n\t */\n\t/* solhint-disable no-empty-blocks */\n\tfunction _authorizeContractUriUpdate() internal virtual override whenNotPaused onlyRole(CONTRACT_ADMIN_ROLE) {}\n\n\t/**\n\t * @notice This is a function that applies any validations required to allow Pause operations (like pause or unpause) to be executed.\n\t *\n\t * @dev Reverts when the caller does not have the \"PAUSER_ROLE\".\n\t *\n\t * Calling Conditions:\n\t *\n\t * - Only the \"PAUSER_ROLE\" can execute.\n\t */\n\t/* solhint-disable no-empty-blocks */\n\tfunction _authorizePause() internal virtual override onlyRole(PAUSER_ROLE) {}\n\n\t/**\n\t * @notice This is a function that applies any validations required to allow Access Registry updates.\n\t *\n\t * @dev Reverts when the caller does not have the \"CONTRACT_ADMIN_ROLE\".\n\t *\n\t * Calling Conditions:\n\t *\n\t * - Only the \"CONTRACT_ADMIN_ROLE\" can execute.\n\t * - {ERC20F} is not paused.\n\t */\n\t/* solhint-disable no-empty-blocks */\n\tfunction _authorizeAccessRegistryUpdate() internal virtual override whenNotPaused onlyRole(CONTRACT_ADMIN_ROLE) {}\n\n\t/**\n\t * @notice This is a function that applies any validations required to allow Role Access operation (like grantRole or revokeRole ) to be executed.\n\t *\n\t * @dev Reverts when the {ERC20F} contract is paused.\n\t *\n\t * Calling Conditions:\n\t *\n\t * - {ERC20F} is not paused.\n\t */\n\t/* solhint-disable no-empty-blocks */\n\tfunction _authorizeRoleAccess() internal virtual override whenNotPaused {}\n\n\t/**\n\t * @notice This function checks that an account can have access to this token.\n\t * The function will revert if the account does not have access.\n\t *\n\t * @param account The address to check has access.\n\t * @param isSender Value indicating if the sender or receiver is being checked.\n\t */\n\tfunction _requireHasAccess(address account, bool isSender) internal view virtual {\n\t\tif (address(accessRegistry) != address(0)) {\n\t\t\tif (!accessRegistry.hasAccess(account, _msgSender(), _msgData())) {\n\t\t\t\tif (isSender) {\n\t\t\t\t\trevert ERC20InvalidSender(account);\n\t\t\t\t} else {\n\t\t\t\t\trevert ERC20InvalidReceiver(account);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
				"license": "AGPL-3.0-or-later"
			},
			"contracts/library/AccessRegistry/AccessRegistrySubscriptionUpgradeable.sol": {
				"keccak256": "0xeb343f2e89bc20304adabb7d1445c00ca6a22f331737202b11ce1f2b3f8f5ed3",
				"urls": [],
				"content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n// Copyright (C) 2024 Fireblocks <support@fireblocks.com>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\npragma solidity 0.8.20;\n\nimport {IERC165Upgradeable} from \"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {ContextUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport {IAccessRegistry} from \"./interface/IAccessRegistry.sol\";\nimport {LibErrors} from \"../Errors/LibErrors.sol\";\n\n/**\n * @title Access Registry Subscription Upgradeable\n * @author Fireblocks\n * @dev This abstract contract provides internal contract logic for subscribing to an Access Registry contract.\n */\nabstract contract AccessRegistrySubscriptionUpgradeable is Initializable, ContextUpgradeable {\n\t/// State\n\n\t/**\n\t * @notice This field is the address of the {AccessRegistry} contract.\n\t */\n\tIAccessRegistry public accessRegistry;\n\n\t/// Events\n\n\t/**\n\t * @notice This event is emitted when the {AccessRegistry} contract address is updated.\n\t * @dev This event is emitted by the {_updateAccessRegistry} function.\n\t *\n\t * @param caller The address of the account that updated the {AccessRegistry} contract address.\n\t * @param oldAccessRegistry The address of the old {AccessRegistry} contract.\n\t * @param newAccessRegistry The address of the new {AccessRegistry} contract.\n\t */\n\tevent AccessRegistryUpdated(\n\t\taddress indexed caller,\n\t\taddress indexed oldAccessRegistry,\n\t\taddress indexed newAccessRegistry\n\t);\n\n\t/// Functions\n\n\t/**\n\t * @notice This is an initializer function for the abstract contract.\n\t * @dev Standard Initializable contract behavior.\n\t *\n\t * Calling Conditions:\n\t *\n\t * - Can only be invoked by functions with the {initializer} or {reinitializer} modifiers.\n\t * @param _accessRegistry The address of the contract that implements {IAccessRegistry}.\n\t */\n\tfunction __AccessRegistrySubscription_init(address _accessRegistry) internal onlyInitializing {\n\t\t_accessRegistryUpdate(_accessRegistry);\n\t}\n\n\t/**\n\t * @notice This is a function used to update `accessRegistry` field.\n\t * @dev This function emits a {AccessRegistryUpdated} event as part of {_accessRegistryUpdate}\n\t * when the access registry address is successfully updated.\n\t *\n\t * @param _accessRegistry The address of the contract that implements {IAccessRegistry}.\n\t */\n\tfunction accessRegistryUpdate(address _accessRegistry) external virtual {\n\t\t_authorizeAccessRegistryUpdate();\n\t\t_accessRegistryUpdate(_accessRegistry);\n\t}\n\n\t/**\n\t * @notice This function updates the address of the implementation of {IAccessRegistry} contract by updating the\n\t * `accessRegistry` field.\n\t *\n\t * @dev Calling Conditions:\n\t *\n\t * - `_accessRegistry` must implement IAccessRegistry interface.\n\t *\n\t * @param _accessRegistry The address of the contract that implements {IAccessRegistry}.\n\t */\n\tfunction _accessRegistryUpdate(address _accessRegistry) internal virtual {\n\t\tif (\n\t\t\t_accessRegistry != address(0) &&\n\t\t\t(!IERC165Upgradeable(_accessRegistry).supportsInterface(type(IAccessRegistry).interfaceId))\n\t\t) {\n\t\t\trevert LibErrors.InvalidImplementation();\n\t\t}\n\n\t\temit AccessRegistryUpdated(_msgSender(), address(accessRegistry), _accessRegistry);\n\t\taccessRegistry = IAccessRegistry(_accessRegistry);\n\t}\n\n\t/**\n\t * @notice This function is designed to be overridden in inheriting contracts.\n\t * @dev Override this function to implement RBAC control.\n\t */\n\tfunction _authorizeAccessRegistryUpdate() internal virtual;\n\n\t/* solhint-enable func-name-mixedcase */\n\t/**\n\t * @dev This empty reserved space is put in place to allow future versions to add new\n\t * variables without shifting down storage in the inheritance chain.\n\t * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n\t */\n\t//slither-disable-next-line naming-convention\n\tuint256[49] private __gap;\n}\n",
				"license": "AGPL-3.0-or-later"
			},
			"contracts/library/AccessRegistry/interface/IAccessRegistry.sol": {
				"keccak256": "0x1dab02db3c9c4507b540829085e22c393eeeb88d47749b21acf16f35158c9dd2",
				"urls": [],
				"content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n// Copyright (C) 2024 Fireblocks <support@fireblocks.com>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\npragma solidity 0.8.20;\n\n/**\n * @title Access Registry Interface\n * @author Fireblocks\n * @notice Access Registry Interface serves as a generalized interface for interacting with the Access Registry.\n *\n * @dev Interface for the Access Registry features.\n */\ninterface IAccessRegistry {\n\t/**\n\t * @notice This function is used to check if the account has necessary permissions to access the system.\n\t * @param account The account to be checked.\n\t * @param caller The account calling the function requiring an access check.\n\t * @param data The data associated with the function call\n\t * @return true if the account is allowed to access the system (false otherwise).\n\t */\n\tfunction hasAccess(address account, address caller, bytes calldata data) external view returns (bool);\n}\n",
				"license": "AGPL-3.0-or-later"
			},
			"contracts/library/Errors/LibErrors.sol": {
				"keccak256": "0xc1eb6ee4b8d45a90b943ab42f806c20847f7b60576cc5ea38d141021f5aab42d",
				"urls": [],
				"content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n// Copyright (C) 2024 Fireblocks <support@fireblocks.com>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\npragma solidity 0.8.20;\n\n/**\n * @title Errors Library\n * @author Fireblocks\n * @notice The Errors Library provides error messages for the Fireblocks ecosystem of smart contracts.\n */\nlibrary LibErrors {\n\t/// Errors\n\n\t/**\n\t * @notice Thrown when the account is barred to participate in the system.\n\t * @param account The account to be checked.\n\t */\n\terror AccountUnauthorized(address account);\n\n\t/**\n\t * @notice Thrown when a Renounce Role is called.\n\t */\n\terror RenounceRoleDisabled();\n\n\t/**\n\t * @dev Indicates a failure that an address is not valid.\n\t */\n\terror InvalidAddress();\n\n\t/**\n\t * @dev Indicates that there was an attempt to recover tokens from an account that can participate in the system.\n\t * @param account The address from which token recovery was attempted.\n\t */\n\terror RecoveryOnActiveAccount(address account);\n\n\t/**\n\t * @dev Indicates that a contract does not implement a required interface.\n\t */\n\terror InvalidImplementation();\n\n\t/**\n\t * @dev Indicates that tokenId is not valid.\n\t */\n\terror InvalidTokenId();\n\n\t/**\n\t * @dev Indicates that the user is not allowed to perform the action for that token.\n\t */\n\terror UnauthorizedTokenManagement();\n\n\t/**\n\t * @dev Indicates a failure that a value is not valid.\n\t */\n\terror ZeroAmount();\n\n\t/**\n\t * @dev Indicates a failure while rescuing gas.\n\t */\n\terror SalvageGasFailed();\n\n\t/**\n\t * @dev Indicates a failure because \"DEFAULT_ADMIN_ROLE\" was tried to be revoked.\n\t */\n\terror DefaultAdminError();\n\n\t/**\n\t * @dev Indicates that registry is not set.\n\t */\n\terror AccessRegistryNotSet();\n\n\t/**\n\t * @dev Indicates that the URI has already been set.\n\t * @param tokenId The id of the token.\n\t */\n\terror URIAlreadySet(uint256 tokenId);\n\n\t/**\n\t * @dev Indicates that the lengths of the arrays do not match.\n\t */\n\terror ArrayLengthMismatch();\n}\n",
				"license": "AGPL-3.0-or-later"
			},
			"contracts/library/Errors/interface/IERC20Errors.sol": {
				"keccak256": "0x4fa534a4cea6904bc4145367ac33d902271f0a4fb4d00ea1afd3a64c04d8e1ac",
				"urls": [],
				"content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n// Copyright (C) 2024 Fireblocks <support@fireblocks.com>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity 0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n\t/**\n\t * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n\t * @param sender Address whose tokens are being transferred.\n\t * @param balance Current balance for the interacting account.\n\t * @param needed Minimum amount required to perform a transfer.\n\t */\n\terror ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n\t/**\n\t * @dev Indicates a failure with the token `sender`. Used in transfers.\n\t * @param sender Address whose tokens are being transferred.\n\t */\n\terror ERC20InvalidSender(address sender);\n\n\t/**\n\t * @dev Indicates a failure with the token `receiver`. Used in transfers.\n\t * @param receiver Address to which tokens are being transferred.\n\t */\n\terror ERC20InvalidReceiver(address receiver);\n\n\t/**\n\t * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n\t * @param spender Address that may be allowed to operate on tokens without being their owner.\n\t * @param allowance Amount of tokens a `spender` is allowed to operate with.\n\t * @param needed Minimum amount required to perform a transfer.\n\t */\n\terror ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n\t/**\n\t * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n\t * @param approver Address initiating an approval operation.\n\t */\n\terror ERC20InvalidApprover(address approver);\n\n\t/**\n\t * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n\t * @param spender Address that may be allowed to operate on tokens without being their owner.\n\t */\n\terror ERC20InvalidSpender(address spender);\n}\n",
				"license": "AGPL-3.0-or-later"
			},
			"contracts/library/Utils/ContractUriUpgradeable.sol": {
				"keccak256": "0x5810e8db58b7d1f63aff50130a588365eba5edb48354625e39d5969b598fb1b3",
				"urls": [],
				"content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n// Copyright (C) 2024 Fireblocks <support@fireblocks.com>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\npragma solidity 0.8.20;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {ContextUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\n\n/**\n * @title Contract Uri Upgradeable\n * @author Fireblocks\n * @dev This abstract contract provides internal contract logic for upgrading the contract URI.\n */\nabstract contract ContractUriUpgradeable is Initializable, ContextUpgradeable {\n\t/// State\n\n\t/**\n\t * @notice This field is a URI (Uniform Resource Identifier) that points to a JSON file with metadata about the contract.\n\t * @dev This state variable is queried by the contractUri() function.\n\t */\n\tstring public contractUri;\n\n\t/// Events\n\n\t/**\n\t * @notice This event is logged when the contract URI is updated.\n\t *\n\t * @param caller The (indexed) address of the entity that triggered the update.\n\t * @param oldUri The URI previously associated with the contract.\n\t * @param newUri The new URI associated with the contract.\n\t */\n\tevent ContractUriUpdated(address indexed caller, string oldUri, string newUri);\n\n\t// Functions\n\n\t/**\n\t * @notice This is an initializer function for the abstract contract.\n\t * @dev Standard Initializable contract behavior.\n\t *\n\t * Calling Conditions:\n\t *\n\t * - Can only be invoked by functions with the {initializer} or {reinitializer} modifiers.\n\t */\n\t/* solhint-disable func-name-mixedcase */\n\tfunction __ContractUri_init(string memory _uri) internal onlyInitializing {\n\t\t_updateContractUri(_uri);\n\t}\n\n\t/**\n\t * @notice This is a function used to update `contractUri` field.\n\t * @dev This function emits a {ContractUriUpdated} event.\n\t *\n\t * @param _uri A URI link pointing to the current URI associated with the contract.\n\t */\n\tfunction contractUriUpdate(string calldata _uri) external virtual {\n\t\t_authorizeContractUriUpdate();\n\t\t_updateContractUri(_uri);\n\t}\n\n\t/**\n\t * @notice This is a function used to update `contractUri` field.\n\t * @dev This function emits a {ContractUriUpdated} event.\n\t *\n\t * @param _uri A URI link pointing to the current URI associated with the contract.\n\t */\n\tfunction _updateContractUri(string memory _uri) internal virtual {\n\t\temit ContractUriUpdated(_msgSender(), contractUri, _uri);\n\t\tcontractUri = _uri;\n\t}\n\n\t/**\n\t * @notice This function is designed to be overridden in inheriting contracts.\n\t * @dev Override this function to implement RBAC control.\n\t */\n\tfunction _authorizeContractUriUpdate() internal virtual;\n\n\t/* solhint-enable func-name-mixedcase */\n\t/**\n\t * @dev This empty reserved space is put in place to allow future versions to add new\n\t * variables without shifting down storage in the inheritance chain.\n\t * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n\t */\n\t//slither-disable-next-line naming-convention\n\tuint256[49] private __gap;\n}\n",
				"license": "AGPL-3.0-or-later"
			},
			"contracts/library/Utils/PauseUpgradeable.sol": {
				"keccak256": "0x5635402ea53b229914b4e106af33b50569093ab74bee1f91746d5918961aeab6",
				"urls": [],
				"content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n// Copyright (C) 2024 Fireblocks <support@fireblocks.com>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\npragma solidity 0.8.20;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {PausableUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\n\n/**\n * @title Pause Upgradeable\n * @author Fireblocks\n * @dev This abstract contract provides internal contract logic for pausing and unpausing the contract.\n */\nabstract contract PauseUpgradeable is Initializable, PausableUpgradeable {\n\t/// Functions\n\n\t/**\n\t * @notice This is an initializer function for the abstract contract.\n\t * @dev Standard Initializable contract behavior.\n\t *\n\t * Calling Conditions:\n\t *\n\t * - Can only be invoked by functions with the {initializer} or {reinitializer} modifiers.\n\t */\n\tfunction __Pause_init() internal onlyInitializing {\n\t\t__Pausable_init();\n\t}\n\n\t/**\n\t * @notice This is a function used to pause the contract.\n\t *\n\t * @dev Calling Conditions:\n\t *\n\t * - Contract is not paused. (checked internally by {Pausable._pause})\n\t *\n\t * This function emits a {Paused} event as part of {PausableUpgradeable._pause}.\n\t */\n\tfunction pause() external virtual {\n\t\t_authorizePause();\n\t\t_pause();\n\t}\n\n\t/**\n\t * @notice This is a function used to unpause the contract.\n\t *\n\t * @dev Calling Conditions:\n\t *\n\t * - Contract is paused. (checked internally by {Pausable._unpause})\n\t *\n\t * This function emits an {Unpaused} event as part of {PausableUpgradeable._unpause}.\n\t */\n\tfunction unpause() external virtual {\n\t\t_authorizePause();\n\t\t_unpause();\n\t}\n\n\t/**\n\t * @notice This function is designed to be overridden in inheriting contracts.\n\t * @dev Override this function to implement RBAC control.\n\t */\n\tfunction _authorizePause() internal virtual;\n\n\t/* solhint-enable func-name-mixedcase */\n\t/**\n\t * @dev This empty reserved space is put in place to allow future versions to add new\n\t * variables without shifting down storage in the inheritance chain.\n\t * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n\t */\n\t//slither-disable-next-line naming-convention\n\tuint256[50] private __gap;\n}\n",
				"license": "AGPL-3.0-or-later"
			},
			"contracts/library/Utils/RoleAccessUpgradeable.sol": {
				"keccak256": "0xd84b267edcbee36070088246d3db4d6f078ebc7a3e760d8edb6af42189c72a07",
				"urls": [],
				"content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n// Copyright (C) 2024 Fireblocks <support@fireblocks.com>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\npragma solidity 0.8.20;\n\nimport {AccessControlUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {ContextUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\n\nimport {LibErrors} from \"../Errors/LibErrors.sol\";\n\n/**\n * @title Role Access Upgradeable\n * @author Fireblocks\n * @dev This abstract contract provides internal contract logic for managing access control roles.\n */\nabstract contract RoleAccessUpgradeable is Initializable, AccessControlUpgradeable {\n\t/// Functions\n\n\t/**\n\t * @notice This is an initializer function for the abstract contract.\n\t * @dev Standard Initializable contract behavior.\n\t *\n\t * Calling Conditions:\n\t *\n\t * - Can only be invoked by functions with the {initializer} or {reinitializer} modifiers.\n\t */\n\tfunction __RoleAccess_init() internal onlyInitializing {\n\t\t__AccessControl_init();\n\t}\n\n\t/**\n\t * @notice This function revokes an Access Control role from an account\n\t * @dev Calling Conditions:\n\t *\n\t * - Caller must be the role admin of the `role`.\n\t * - Non-zero address `account`.\n\t *\n\t * This function emits a {RoleRevoked} event as part of {AccessControlUpgradeable._revokeRole}.\n\t *\n\t * @param role The role that will be revoked.\n\t * @param account The address from which role is revoked\n\t */\n\tfunction revokeRole(bytes32 role, address account) public virtual override {\n\t\tif (role == DEFAULT_ADMIN_ROLE && account == _msgSender()) {\n\t\t\trevert LibErrors.DefaultAdminError();\n\t\t}\n\n\t\t_authorizeRoleAccess();\n\t\tsuper.revokeRole(role, account); // In {AccessControlUpgradeable}\n\t}\n\n\t/**\n\t * @notice  This function renounces an Access Control role from an account, except for the \"DEFAULT_ADMIN_ROLE\".\n\t *\n\t * @dev Only the account itself can renounce its own roles, and not any other account.\n\t * Calling Conditions:\n\t * - Cannot renounce DEFAULT_ADMIN_ROLE.\n\t * - 'account' is the caller of the transaction.\n\t */\n\tfunction renounceRole(bytes32 role, address account) public virtual override {\n\t\tif (role == DEFAULT_ADMIN_ROLE) {\n\t\t\trevert LibErrors.DefaultAdminError();\n\t\t}\n\t\t_authorizeRoleAccess();\n\t\tsuper.renounceRole(role, account); // In {AccessControlUpgradeable}\n\t}\n\n\t/**\n\t * @notice This function grants an Access Control role to an account\n\t * @dev Calling Conditions:\n\t *\n\t * - Caller must be the role admin of the `role`.\n\t * - Non-zero address `account`.\n\t *\n\t * This function emits a {RoleGranted} event as part of {AccessControlUpgradeable._grantRole}.\n\t *\n\t * @param role The role that will be granted.\n\t * @param account The address to which role is granted\n\t */\n\tfunction grantRole(bytes32 role, address account) public virtual override {\n\t\t_authorizeRoleAccess();\n\t\tsuper.grantRole(role, account); // In {AccessControlUpgradeable}\n\t}\n\n\t/**\n\t * @notice This function is designed to be overridden in inheriting contracts.\n\t * @dev Override this function to implement RBAC control.\n\t */\n\tfunction _authorizeRoleAccess() internal virtual;\n\n\t/* solhint-enable func-name-mixedcase */\n\t/**\n\t * @dev This empty reserved space is put in place to allow future versions to add new\n\t * variables without shifting down storage in the inheritance chain.\n\t * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n\t */\n\t//slither-disable-next-line naming-convention\n\tuint256[50] private __gap;\n}\n",
				"license": "AGPL-3.0-or-later"
			},
			"contracts/library/Utils/SalvageUpgradeable.sol": {
				"keccak256": "0xb20ec7895f80b7eeddfdffc1861619d7754754fe6f9b0d8469c9960833ac9aab",
				"urls": [],
				"content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n// Copyright (C) 2024 Fireblocks <support@fireblocks.com>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\npragma solidity 0.8.20;\n\nimport {IERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport {SafeERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {ContextUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\n\nimport {LibErrors} from \"../Errors/LibErrors.sol\";\n\n/**\n * @title Salvage Upgradeable\n * @author Fireblocks\n * @dev This abstract contract provides internal contract logic for rescuing tokens and ETH.\n */\nabstract contract SalvageUpgradeable is Initializable, ContextUpgradeable {\n\tusing SafeERC20Upgradeable for IERC20Upgradeable;\n\n\t/// Events\n\t/**\n\t * @notice This event is logged when ERC20 tokens are salvaged.\n\t *\n\t * @param caller The (indexed) address of the entity that triggered the salvage.\n\t * @param token The (indexed) address of the ERC20 token which was salvaged.\n\t * @param amount The (indexed) amount of tokens salvaged.\n\t */\n\tevent TokenSalvaged(address indexed caller, address indexed token, uint256 indexed amount);\n\n\t/**\n\t * @notice This event is logged when ETH is salvaged.\n\t *\n\t * @param caller The (indexed) address of the entity that triggered the salvage.\n\t * @param amount The (indexed) amount of ETH salvaged.\n\t */\n\tevent GasTokenSalvaged(address indexed caller, uint256 indexed amount);\n\n\t/// Functions\n\n\t/**\n\t * @notice This is an initializer function for the abstract contract.\n\t * @dev Standard Initializable contract behavior.\n\t *\n\t * Calling Conditions:\n\t *\n\t * - Can only be invoked by functions with the {initializer} or {reinitializer} modifiers.\n\t */\n\t/* solhint-disable func-name-mixedcase */\n\tfunction __Salvage_init() internal onlyInitializing {}\n\n\t/**\n\t * @notice A function used to salvage ERC20 tokens sent to the contract using this abstract contract.\n\t * @dev Calling Conditions:\n\t *\n\t * - `amount` is greater than 0.\n\t *\n\t * This function emits a {TokenSalvaged} event, indicating that funds were salvaged.\n\t *\n\t * @param token The ERC20 asset which is to be salvaged.\n\t * @param amount The amount to be salvaged.\n\t */\n\tfunction salvageERC20(IERC20Upgradeable token, uint256 amount) external virtual {\n\t\tif (amount == 0) {\n\t\t\trevert LibErrors.ZeroAmount();\n\t\t}\n\t\t_authorizeSalvageERC20();\n\t\temit TokenSalvaged(_msgSender(), address(token), amount);\n\t\ttoken.safeTransfer(_msgSender(), amount);\n\t}\n\n\t/**\n\t * @notice A function used to salvage ETH sent to the contract using this abstract contract.\n\t * @dev Calling Conditions:\n\t *\n\t * - `amount` is greater than 0.\n\t *\n\t * This function emits a {GasTokenSalvaged} event, indicating that funds were salvaged.\n\t *\n\t * @param amount The amount to be salvaged.\n\t */\n\tfunction salvageGas(uint256 amount) external virtual {\n\t\tif (amount == 0) {\n\t\t\trevert LibErrors.ZeroAmount();\n\t\t}\n\t\t_authorizeSalvageGas();\n\t\temit GasTokenSalvaged(_msgSender(), amount);\n\t\t(bool succeed, ) = _msgSender().call{value: amount}(\"\");\n\t\tif (!succeed) {\n\t\t\trevert LibErrors.SalvageGasFailed();\n\t\t}\n\t}\n\n\t/**\n\t * @notice This function is designed to be overridden in inheriting contracts.\n\t * @dev Override this function to implement RBAC control.\n\t */\n\tfunction _authorizeSalvageERC20() internal virtual;\n\n\t/**\n\t * @notice This function is designed to be overridden in inheriting contracts.\n\t * @dev Override this function to implement RBAC control.\n\t */\n\tfunction _authorizeSalvageGas() internal virtual;\n\n\t/* solhint-enable func-name-mixedcase */\n\t/**\n\t * @dev This empty reserved space is put in place to allow future versions to add new\n\t * variables without shifting down storage in the inheritance chain.\n\t * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n\t */\n\t//slither-disable-next-line naming-convention\n\tuint256[50] private __gap;\n}\n",
				"license": "AGPL-3.0-or-later"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
				"keccak256": "0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
				"keccak256": "0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol": {
				"keccak256": "0x121966b3220d263a6669dcf59c1254bd48ed237adf4d8a595add70a7927eada1",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165Upgradeable.sol\";\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol": {
				"keccak256": "0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol": {
				"keccak256": "0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.0;\n\ninterface IERC5267Upgradeable {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
				"keccak256": "0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
				"keccak256": "0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
				"keccak256": "0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"keccak256": "0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
				"keccak256": "0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
				"keccak256": "0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"keccak256": "0xd14a627157b9a411d2410713e5dd3a377e9064bd5c194a90748bbf27ea625784",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"keccak256": "0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol": {
				"keccak256": "0x3988ac03e4819acd4b5adf41de7d43c1471748ddc2d73d2c7aca1e3827402e5d",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20PermitUpgradeable.sol\";\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"../../../utils/cryptography/EIP712Upgradeable.sol\";\nimport \"../../../utils/CountersUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 51\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\n        __EIP712_init_unchained(name, \"1\");\n    }\n\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"keccak256": "0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol": {
				"keccak256": "0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
				"keccak256": "0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\n    }\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"keccak256": "0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
				"keccak256": "0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol": {
				"keccak256": "0x9793fff31f1864ea9835c37b305e6f1dd0585c20df215a0d43b8ac13d180127a",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Multicall.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./AddressUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * _Available since v4.1._\n */\nabstract contract MulticallUpgradeable is Initializable {\n    function __Multicall_init() internal onlyInitializing {\n    }\n\n    function __Multicall_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = AddressUpgradeable.functionDelegateCall(address(this), data[i]);\n        }\n        return results;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
				"keccak256": "0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
				"keccak256": "0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
				"keccak256": "0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol": {
				"keccak256": "0xeb8d6be406a373771724922eb41b5d593bc8e2dc705daa22cd1145cfc8f5a3a0",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../interfaces/IERC5267Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\n    bytes32 private constant _TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /// @custom:oz-renamed-from _HASHED_NAME\n    bytes32 private _hashedName;\n    /// @custom:oz-renamed-from _HASHED_VERSION\n    bytes32 private _hashedVersion;\n\n    string private _name;\n    string private _version;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        _name = name;\n        _version = version;\n\n        // Reset prior values in storage if upgrading\n        _hashedName = 0;\n        _hashedVersion = 0;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator();\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {EIP-5267}.\n     *\n     * _Available since v4.9._\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        override\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\n        require(_hashedName == 0 && _hashedVersion == 0, \"EIP712: Uninitialized\");\n\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Name() internal virtual view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Version() internal virtual view returns (string memory) {\n        return _version;\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\n     */\n    function _EIP712NameHash() internal view returns (bytes32) {\n        string memory name = _EIP712Name();\n        if (bytes(name).length > 0) {\n            return keccak256(bytes(name));\n        } else {\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\n            bytes32 hashedName = _hashedName;\n            if (hashedName != 0) {\n                return hashedName;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\n     */\n    function _EIP712VersionHash() internal view returns (bytes32) {\n        string memory version = _EIP712Version();\n        if (bytes(version).length > 0) {\n            return keccak256(bytes(version));\n        } else {\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\n            bytes32 hashedVersion = _hashedVersion;\n            if (hashedVersion != 0) {\n                return hashedVersion;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[48] private __gap;\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
				"keccak256": "0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
				"keccak256": "0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
				"keccak256": "0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n",
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol": {
				"keccak256": "0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a",
				"urls": [],
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n",
				"license": "MIT"
			}
		},
		"version": 1
	},
	"id": 2
}
